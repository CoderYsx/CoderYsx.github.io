<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JWT实战</title>
    <link href="/2021/01/07/JWT%E5%AE%9E%E6%88%98/"/>
    <url>/2021/01/07/JWT%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="JWT-实战"><a href="#JWT-实战" class="headerlink" title="JWT 实战"></a>JWT 实战</h1><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f5f.png" alt="image-20200726102546868"></p><h2 id="1-什么是JWT"><a href="#1-什么是JWT" class="headerlink" title="1.什么是JWT"></a>1.什么是JWT</h2><p>JSON Web Token (JWT) is an open standard (<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public/private key pair using <strong>RSA</strong> or <strong>ECDSA</strong>.</p><p>​                                                                                                                                                                                                                                            —[摘自官网]</p><pre><code class="hljs markdown"><span class="hljs-section"># 1.翻译</span><span class="hljs-bullet">-</span>  官网地址: https://jwt.io/introduction/<span class="hljs-bullet">-</span>  翻译: jsonwebtoken（JWT）是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名<span class="hljs-section"># 2.通俗解释</span><span class="hljs-bullet">-</span> JWT简称JSON Web Token,也就是通过JSON形式作为Web应用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</code></pre><h2 id="2-JWT能做什么"><a href="#2-JWT能做什么" class="headerlink" title="2.JWT能做什么"></a>2.JWT能做什么</h2><pre><code class="hljs markdown"><span class="hljs-section"># 1.授权</span><span class="hljs-bullet">-</span> 这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。<span class="hljs-section"># 2.信息交换</span><span class="hljs-bullet">-</span> JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。</code></pre><h2 id="3-为什么是JWT"><a href="#3-为什么是JWT" class="headerlink" title="3.为什么是JWT"></a>3.为什么是JWT</h2><h3 id="基于传统的Session认证"><a href="#基于传统的Session认证" class="headerlink" title="基于传统的Session认证"></a>基于传统的Session认证</h3><pre><code class="hljs markdown"><span class="hljs-section"># 1.认证方式</span><span class="hljs-bullet">-</span> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。t<span class="hljs-section"># 2.认证流程</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f61.png" alt="image-20200726103959013"></p><pre><code class="hljs markdown"><span class="hljs-section"># 3.暴露问题</span><span class="hljs-bullet">-</span> 1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大<span class="hljs-bullet">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。<span class="hljs-bullet">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。<span class="hljs-bullet">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示<span class="hljs-code">也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是     sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</span></code></pre><p>![image-20200804212240422](../../../../微服务/编程不良人/JWT实战教程资料/笔记/1/JWT 实战教程.assets/49.png)</p><h3 id="基于JWT认证"><a href="#基于JWT认证" class="headerlink" title="基于JWT认证"></a>基于JWT认证</h3><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f6e.png" alt="image-20200726183248298"></p><pre><code class="hljs markdown"><span class="hljs-section"># 1.认证流程</span><span class="hljs-bullet">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。<span class="hljs-bullet">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater<span class="hljs-bullet">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。<span class="hljs-bullet">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER<span class="hljs-bullet">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。<span class="hljs-bullet">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。<span class="hljs-section"># 2.jwt优势</span><span class="hljs-bullet">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快<span class="hljs-bullet">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库<span class="hljs-bullet">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。<span class="hljs-bullet">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。</code></pre><h2 id="4-JWT的结构是什么"><a href="#4-JWT的结构是什么" class="headerlink" title="4.JWT的结构是什么?"></a>4.JWT的结构是什么?</h2><pre><code class="hljs markdown">token   string  ====&gt;  header.payload.singnature   token   <span class="hljs-section"># 1.令牌组成</span><span class="hljs-bullet">-</span> 1.标头(Header)<span class="hljs-bullet">-</span> 2.有效载荷(Payload)<span class="hljs-bullet">-</span> 3.签名(Signature)<span class="hljs-bullet">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz   Header.Payload.Signature</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.Header</span><span class="hljs-bullet">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。<span class="hljs-bullet">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</code></pre><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,  <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 3.Payload</span><span class="hljs-bullet">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</code></pre><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span>&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 4.Signature</span><span class="hljs-bullet">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过<span class="hljs-bullet">-</span> 如:<span class="hljs-code">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret);</span><span class="hljs-code"></span><span class="hljs-code"># 签名目的</span><span class="hljs-code">- 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</span><span class="hljs-code"></span><span class="hljs-code"># 信息安全问题</span><span class="hljs-code">- 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？</span><span class="hljs-code"></span><span class="hljs-code">- 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系统，甚至实现Web应用的单点登录。</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f69.png" alt="image-20200726181136113"></p><pre><code class="hljs markdown"><span class="hljs-section"># 5.放在一起</span><span class="hljs-bullet">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。<span class="hljs-bullet">-</span> 简洁(Compact)<span class="hljs-code">可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</span><span class="hljs-code">- 自包含(Self-contained)</span><span class="hljs-code">负载中包含了所有用户所需要的信息，避免了多次查询数据库</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f65.png" alt="image-20200726124257203"></p><h2 id="5-使用JWT"><a href="#5-使用JWT" class="headerlink" title="5.使用JWT"></a>5.使用JWT</h2><pre><code class="hljs markdown"><span class="hljs-section"># 1.引入依赖</span></code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jwt--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.生成token</span></code></pre><pre><code class="hljs java">Calendar instance = Calendar.getInstance();instance.add(Calendar.SECOND, <span class="hljs-number">90</span>);<span class="hljs-comment">//生成令牌</span>String token = JWT.create()  .withClaim(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>)<span class="hljs-comment">//设置自定义用户名</span>  .withExpiresAt(instance.getTime())<span class="hljs-comment">//设置过期时间</span>  .sign(Algorithm.HMAC256(<span class="hljs-string">&quot;token!Q2W#E$RW&quot;</span>));<span class="hljs-comment">//设置签名 保密 复杂</span><span class="hljs-comment">//输出令牌</span>System.out.println(token);</code></pre><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 生成结果eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOlsicGhvbmUiLCIxNDMyMzIzNDEzNCJdLCJleHAiOjE1OTU3Mzk0NDIsInVzZXJuYW1lIjoi5byg5LiJIn0.aHmE3RNqvAjFr<span class="hljs-emphasis">_dvyn_</span>sD2VJ46P7EGiS5OBMO<span class="hljs-emphasis">_TI5jg</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 3.根据令牌和签名解析数据</span></code></pre><pre><code class="hljs java">JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC256(<span class="hljs-string">&quot;token!Q2W#E$RW&quot;</span>)).build();DecodedJWT decodedJWT = jwtVerifier.verify(token);System.out.println(<span class="hljs-string">&quot;用户名: &quot;</span> + decodedJWT.getClaim(<span class="hljs-string">&quot;username&quot;</span>).asString());System.out.println(<span class="hljs-string">&quot;过期时间: &quot;</span>+decodedJWT.getExpiresAt());</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 4.常见异常信息</span><span class="hljs-bullet">-</span> SignatureVerificationException:签名不一致异常<span class="hljs-bullet">-</span> TokenExpiredException:    令牌过期异常<span class="hljs-bullet">-</span> AlgorithmMismatchException:算法不匹配异常<span class="hljs-bullet">-</span> InvalidClaimException:失效的payload异常</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f74.png" alt="image-20200805184517282"></p><h2 id="6-封装工具类"><a href="#6-封装工具类" class="headerlink" title="6.封装工具类"></a>6.封装工具类</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JWTUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String TOKEN = <span class="hljs-string">&quot;token!Q@W3e4r&quot;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 生成token</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  //传入payload</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回token</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getToken</span><span class="hljs-params">(Map&lt;String,String&gt; map)</span></span>&#123;        JWTCreator.Builder builder = JWT.create();        map.forEach((k,v)-&gt;&#123;            builder.withClaim(k,v);        &#125;);        Calendar instance = Calendar.getInstance();        instance.add(Calendar.SECOND,<span class="hljs-number">7</span>);        builder.withExpiresAt(instance.getTime());        <span class="hljs-keyword">return</span> builder.sign(Algorithm.HMAC256(TOKEN)).toString();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 验证token</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verify</span><span class="hljs-params">(String token)</span></span>&#123;        JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 获取token中payload</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DecodedJWT <span class="hljs-title">getToken</span><span class="hljs-params">(String token)</span></span>&#123;        <span class="hljs-keyword">return</span> JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);    &#125;&#125;</code></pre><h2 id="7-整合springboot"><a href="#7-整合springboot" class="headerlink" title="7.整合springboot"></a>7.整合springboot</h2><pre><code class="hljs markdown"><span class="hljs-section"># 0.搭建springboot+mybatis+jwt环境</span><span class="hljs-bullet">-</span> 引入依赖<span class="hljs-bullet">-</span> 编写配置</code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jwt--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入mybatis--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入lombok--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入druid--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入mysql--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8989</span><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">jwt</span><span class="hljs-meta">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/jwt?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">mybatis.type-aliases-package</span>=<span class="hljs-string">com.baizhi.entity</span><span class="hljs-meta">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:com/baizhi/mapper/*.xml</span><span class="hljs-meta">logging.level.com.baizhi.dao</span>=<span class="hljs-string">debug</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 1.开发数据库</span><span class="hljs-bullet">-</span> 这里采用最简单的表结构验证JWT使用</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f78.png" alt="image-20200805212226422"></p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;主键&#x27;</span>,  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;用户名&#x27;</span>,  <span class="hljs-string">`password`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">&#x27;用户密码&#x27;</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">2</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.开发entity</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@Accessors(chain=true)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String password;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f7b.png" alt="image-20200805213539471"></p><pre><code class="hljs markdown"><span class="hljs-section"># 3.开发DAO接口和mapper.xml</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDAO</span> </span>&#123;    <span class="hljs-function">User <span class="hljs-title">login</span><span class="hljs-params">(User user)</span></span>;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f7d.png" alt="image-20200805213603655"></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.baizhi.dao.UserDAO&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span>        select * from user where name=#&#123;name&#125; and password = #&#123;password&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0463ffa7d37b3175f33.png" alt="image-20200805213628252"></p><pre><code class="hljs markdown"><span class="hljs-section"># 4.开发Service 接口以及实现类</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-function">User <span class="hljs-title">login</span><span class="hljs-params">(User user)</span></span>;<span class="hljs-comment">//登录接口</span>&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0463ffa7d37b3175f36.png" alt="image-20200805213648147"></p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserDAO userDAO;    <span class="hljs-meta">@Override</span>    <span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">login</span><span class="hljs-params">(User user)</span> </span>&#123;        User userDB = userDAO.login(user);        <span class="hljs-keyword">if</span>(userDB!=<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> userDB;        &#125;        <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;登录失败~~&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0463ffa7d37b3175f3b.png" alt="image-20200805213704965"></p><pre><code class="hljs markdown"><span class="hljs-section"># 5.开发controller</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-meta">@GetMapping(&quot;/user/login&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">login</span><span class="hljs-params">(User user)</span> </span>&#123;        Map&lt;String,Object&gt; result = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        log.info(<span class="hljs-string">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());        log.info(<span class="hljs-string">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());        <span class="hljs-keyword">try</span> &#123;            User userDB = userService.login(user);            Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//用来存放payload</span>            map.put(<span class="hljs-string">&quot;id&quot;</span>,userDB.getId());            map.put(<span class="hljs-string">&quot;username&quot;</span>, userDB.getName());            String token = JWTUtils.getToken(map);            result.put(<span class="hljs-string">&quot;state&quot;</span>,<span class="hljs-keyword">true</span>);            result.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;登录成功!!!&quot;</span>);            result.put(<span class="hljs-string">&quot;token&quot;</span>,token); <span class="hljs-comment">//成功返回token信息</span>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();            result.put(<span class="hljs-string">&quot;state&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>);            result.put(<span class="hljs-string">&quot;msg&quot;</span>,e.getMessage());        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0463ffa7d37b3175f40.png" alt="image-20200805214235426"></p><pre><code class="hljs markdown"><span class="hljs-section"># 6.数据库添加测试数据启动项目</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0463ffa7d37b3175f44.png" alt="image-20200805214324868"></p><p><img src="https://pic.downk.cc/item/5ff6b0463ffa7d37b3175f49.png" alt="image-20200805214424786"></p><pre><code class="hljs markdown"><span class="hljs-section"># 7.通过postman模拟登录失败</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f4d.png" alt="image-20200805214610668"></p><pre><code class="hljs markdown"><span class="hljs-section"># 8.通过postman模拟登录成功</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f53.png" alt="image-20200805214749469"></p><pre><code class="hljs markdown"><span class="hljs-section"># 9.编写测试接口</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/test/test&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">test</span><span class="hljs-params">(String token)</span> </span>&#123;  Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();  <span class="hljs-keyword">try</span> &#123;    JWTUtils.verify(token);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;验证通过~~~&quot;</span>);    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">true</span>);  &#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Token已经过期!!!&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e)&#123;    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;签名错误!!!&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (AlgorithmMismatchException e)&#123;    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;加密算法不匹配!!!&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;    e.printStackTrace();    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;无效token~~&quot;</span>);  &#125;  <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f56.png" alt="image-20200805215119590"></p><pre><code class="hljs markdown"><span class="hljs-section"># 10.通过postman请求接口</span></code></pre><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f58.png" alt="image-20200805215337303"></p><p><img src="https://pic.downk.cc/item/5ff6b0473ffa7d37b3175f5d.png" alt="image-20200805215451442"></p><pre><code class="hljs markdown"><span class="hljs-section"># 11.问题?</span><span class="hljs-bullet">-</span> 使用上述方式每次都要传递token数据,每个方法都需要验证token代码冗余,不够灵活? 如何优化<span class="hljs-bullet">-</span> 使用拦截器进行优化</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;  String token = request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);  Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();  <span class="hljs-keyword">try</span> &#123;    JWTUtils.verify(token);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;  &#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Token已经过期!!!&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e)&#123;    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;签名错误!!!&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (AlgorithmMismatchException e)&#123;    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;加密算法不匹配!!!&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;    e.printStackTrace();    map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-keyword">false</span>);    map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;无效token~~&quot;</span>);  &#125;  String json = <span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(map);  response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);  response.getWriter().println(json);  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="hljs-keyword">new</span> JwtTokenInterceptor()).          excludePathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>)          .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2021/01/07/ElasticSearch/"/>
    <url>/2021/01/07/ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h2 id="1-什么是RestFul"><a href="#1-什么是RestFul" class="headerlink" title="1. 什么是RestFul"></a>1. 什么是RestFul</h2><blockquote><p><strong>REST</strong> :  表现层状态转化(Representational State Transfer)，如果一个架构符合REST原则，就称它为 RESTful 架构风格。 </p><p>**资源(Resources): 所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息 </p><p><strong>表现层</strong>(Representation) :我们把”资源”具体呈现出来的形式，叫做它的”表现层”。</p><p><strong>状态转化(State Transfer)</strong>:如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转 化”(State Transfer)。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p></blockquote><blockquote><p><strong>REST原则就是指一个URL代表一个唯一资源，并且通过HTTP协议里面四个动词:GET、POST、PUT、DELETE对应四种服务器端的基本操作: GET用来获取资源，POST用来更新资源(也可以用于添加资源)，PUT用来添加资源(也可以用于更新资源)，DELETE用来删除资源。</strong></p></blockquote><h2 id="2-什么是全文检索"><a href="#2-什么是全文检索" class="headerlink" title="2. 什么是全文检索"></a>2. 什么是全文检索</h2><blockquote><p><strong>全文检索是计算机程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置。当用户查询时根据建立的索引查找，类似于通过字典的检索字表查字的过程。</strong></p><p>全文检索（Full-Text Retrieval(检索)）以文本作为检索对象，找出含有指定词汇的文本。<strong>全面、准确和快速是衡量全文检索系统的关键指标。</strong></p><blockquote><p>关于全文检索，我们要知道：</p></blockquote><p>** 1. 只处理文本。**</p><p>   <strong>2. 不处理语义。</strong></p><p>   <strong>3. 搜索时英文不区分大小写。</strong></p><p>   <strong>4. 结果列表有相关度排序。</strong></p></blockquote><h2 id="3-什么是ElasticSearch"><a href="#3-什么是ElasticSearch" class="headerlink" title="3. 什么是ElasticSearch"></a>3. 什么是ElasticSearch</h2><blockquote><p><strong>ElasticSearch</strong> 简称 <strong>ES</strong> ，<strong>是基于Apache Lucene构建的开源搜索引擎，是当前流行的企业级搜索引擎(分布式搜索引擎)**。Lucene本身就可以被认为迄今为止性能最好的一款开源搜索引擎工具包，但是lucene的API相对复杂，需要深厚的搜索理论。很难集成到实际的应用中去。</strong>同时ES是采用java语言编写，提供了简单易用的RestFul API，开发者可以使用其简单的RestFul API，开发相关的搜索功能，从而避免lucene的复杂性**。   搜索检索         数据库like</p></blockquote><hr><h2 id="4-ES的诞生"><a href="#4-ES的诞生" class="headerlink" title="4. ES的诞生"></a>4. ES的诞生</h2><blockquote><p>多年前，一个叫做Shay Banon 的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。</p><p>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。</p><p>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做Elasticsearch。</p><p>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索……</p></blockquote><hr><h2 id="5-ES的应用场景-json格式数据-restful"><a href="#5-ES的应用场景-json格式数据-restful" class="headerlink" title="5. ES的应用场景 json格式数据  restful"></a>5. ES的应用场景 json格式数据  restful</h2><blockquote><p><strong>Es主要以轻量级JSON作为数据存储格式，这点与MongoDB有点类似，但它在读写性能上优于 MongoDB 。同时也支持地理位置查询 ，还方便地理位置和文本混合查询 。 以及在统计、日志类数据存储和分析、可视化这方面是引领者。</strong></p><p><strong>国外:</strong> </p><p>​    <strong>Wikipedia</strong>(维基百科)使用ES提供全文搜索并高亮关键字、<strong>StackOverflow</strong>(IT问答网站)结合全文搜索与地理位置查询、<strong>Github</strong>使用Elasticsearch检索1300亿行的代码。 </p><p><strong>国内:</strong></p><p>​    <strong>百度</strong>(在云分析、网盟、预测、文库、钱包、风控等业务上都应用了ES，单集群每天导入30TB+数据， 总共每天60TB+)、<strong>新浪 、阿里巴巴、腾讯</strong>等公司均有对ES的使用。</p></blockquote><blockquote><p><strong>使用比较广泛的平台ELK(ElasticSearch 全文检索服务器 核心, Logstash, Kibana)。</strong> </p></blockquote><h2 id="6-ES的安装"><a href="#6-ES的安装" class="headerlink" title="6. ES的安装"></a>6. ES的安装</h2><pre><code class="hljs markdown"><span class="hljs-section"># 0. 安装前准备</span><span class="hljs-code">centos7 +</span><span class="hljs-code">java 8  +</span><span class="hljs-code">elastic 6.2.4+</span><span class="hljs-code"></span><span class="hljs-code"># 1. 在官方网站下载ES</span><span class="hljs-code">wget http://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.1.tar.gz</span><span class="hljs-code"></span><span class="hljs-code"># 2. 安装JDK(必须JDK1.8+)</span><span class="hljs-code">rpm -ivh jdk-8u181-linux-x64.rpm</span><span class="hljs-code">/*注意:默认安装位置 /usr/java/jdk1.8.0_171-amd64*/</span><span class="hljs-code"></span><span class="hljs-code"># 3. 配置环境变量</span><span class="hljs-code">vim /etc/profile</span><span class="hljs-code">在文件末尾加入:</span><span class="hljs-code">export JAVA_HOME=/usr/java/jdk1.8.0_171-amd64</span><span class="hljs-code">export PATH=$PATH:$JAVA_HOME/bin</span><span class="hljs-code"></span><span class="hljs-code"># 4. 重载系统配置</span><span class="hljs-code">source /etc/profile</span><span class="hljs-code"></span><span class="hljs-code"># 5.创建普通用户(es不能作为root用户启动)</span><span class="hljs-code">a.在linux系统中创建新的组</span><span class="hljs-code">groupadd es</span><span class="hljs-code"></span><span class="hljs-code">b.创建新的用户es并将es用户放入es组中</span><span class="hljs-code">useradd es -g es </span><span class="hljs-code"></span><span class="hljs-code">c.修改es用户密码</span><span class="hljs-code">passwd es</span><span class="hljs-code"></span><span class="hljs-code"># 6.上传es到普通用户的家目录,并安装elasticsearch</span><span class="hljs-code">tar -zxvf elasticsearch-6.4.1.tar.gz</span><span class="hljs-code"></span><span class="hljs-code"># 7. elasticsearche的目录结构</span><span class="hljs-code">        bin                         可执行的二进制文件的目录</span><span class="hljs-code">        config                    配置文件的目录</span><span class="hljs-code">        lib                         运行时依赖的库</span><span class="hljs-code">        logs  modules       运行时日志文件</span><span class="hljs-code">        plugins                   es中提供的插件</span><span class="hljs-code"></span><span class="hljs-code"># 8. 运行es服务</span><span class="hljs-code">在bin目录中执行   ./elasticsearch</span><span class="hljs-code"></span><span class="hljs-code"></span><span class="hljs-code"># 9. 测试ES是否启动成功</span><span class="hljs-code">在命令终端中执行: curl http://localhost:9200 出现以下信息:</span><span class="hljs-code">&#123;</span><span class="hljs-code">          &quot;name&quot; : &quot;xQK1cwT&quot;,</span><span class="hljs-code">          &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><span class="hljs-code">          &quot;cluster_uuid&quot; : &quot;t7IYk7LKQ0mXcyyrdFWpLg&quot;,</span><span class="hljs-code">          &quot;version&quot; : &#123;</span><span class="hljs-code">            &quot;number&quot; : &quot;6.2.4&quot;,</span><span class="hljs-code">            &quot;build_hash&quot; : &quot;ccec39f&quot;,</span><span class="hljs-code">            &quot;build_date&quot; : &quot;2018-04-12T20:37:28.497551Z&quot;,</span><span class="hljs-code">            &quot;build_snapshot&quot; : false,</span><span class="hljs-code">            &quot;lucene_version&quot; : &quot;7.2.1&quot;,</span><span class="hljs-code">            &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><span class="hljs-code">            &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><span class="hljs-code">          &#125;,</span><span class="hljs-code">          &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><span class="hljs-code">        &#125;</span><span class="hljs-code">        </span><span class="hljs-code"># 11. 开启ES远程访问</span><span class="hljs-code">vim elasticsearch.yml 将原来network修改为以下配置:</span><span class="hljs-code">network.host: 0.0.0.0</span><span class="hljs-code"></span><span class="hljs-code"># 12. 启动时错误解决方案</span><span class="hljs-code">a.重新启动es出现如下错误</span><span class="hljs-code">  **ERROR: bootstrap checks failed[1]: max file descriptors [4096] for elasticsearch process is too low, </span><span class="hljs-code">   increase to at least [65536]**</span><span class="hljs-code">      解决方案:</span><span class="hljs-code">       # 切换到root用户修改</span><span class="hljs-code">        vim /etc/security/limits.conf</span><span class="hljs-code">       # 在最后面追加下面内容</span><span class="hljs-code">        *               soft    nofile          65536</span><span class="hljs-code">        *               hard    nofile          65536</span><span class="hljs-code">        *               soft    nproc           4096</span><span class="hljs-code">        *               hard    nproc           4096</span><span class="hljs-code">       # 退出重新登录检测配置是否生效:</span><span class="hljs-code">        ulimit -Hn</span><span class="hljs-code">        ulimit -Sn</span><span class="hljs-code">        ulimit -Hu</span><span class="hljs-code">        ulimit -Su</span><span class="hljs-code"></span><span class="hljs-code">b.重新启动出现如下错误</span><span class="hljs-code">  **ERROR: max number of threads [3802] for user [chenyn] is too low,increase to at least [4096]**</span><span class="hljs-code">       解决方案:</span><span class="hljs-code">       #进入limits.d目录下修改配置文件。</span><span class="hljs-code">        vim /etc/security/limits.d/20-nproc.conf </span><span class="hljs-code">       # 修改为 启动ES用户名 soft nproc 4096</span><span class="hljs-code">       </span><span class="hljs-code">    c.重新启动出现如下错误</span><span class="hljs-code">  **ERROR: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]**</span><span class="hljs-code">       解决方案:</span><span class="hljs-code">        vim /etc/sysctl.conf</span><span class="hljs-code">        vm.max_map_count=655360</span><span class="hljs-code">       #执行以下命令生效：</span><span class="hljs-code">        sysctl -p</span><span class="hljs-code"></span><span class="hljs-code"># 13. 关闭网络防火墙</span><span class="hljs-code">systemctl stop firewalld   关闭本次防火墙服务</span><span class="hljs-code">systemctl disable firewalld 关闭开启自启动防火墙服务</span><span class="hljs-code"></span><span class="hljs-code"># 14. 外部浏览器访问即可</span><span class="hljs-code">http://es的主机名:9200 出现如下信息说明安装成功:</span><span class="hljs-code">&#123;</span><span class="hljs-code">        &quot;name&quot; : &quot;xQK1cwT&quot;,</span><span class="hljs-code">        &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><span class="hljs-code">        &quot;cluster_uuid&quot; : &quot;t7IYk7LKQ0mXcyyrdFWpLg&quot;,</span><span class="hljs-code">        &quot;version&quot; : &#123;</span><span class="hljs-code">        &quot;number&quot; : &quot;6.2.4&quot;,</span><span class="hljs-code">        &quot;build_hash&quot; : &quot;ccec39f&quot;,</span><span class="hljs-code">        &quot;build_date&quot; : &quot;2018-04-12T20:37:28.497551Z&quot;,</span><span class="hljs-code">        &quot;build_snapshot&quot; : false,</span><span class="hljs-code">        &quot;lucene_version&quot; : &quot;7.2.1&quot;,</span><span class="hljs-code">        &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><span class="hljs-code">        &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><span class="hljs-code">   &#125;</span></code></pre><hr><h2 id="7-ES中基本概念"><a href="#7-ES中基本概念" class="headerlink" title="7. ES中基本概念"></a>7. ES中基本概念</h2><h3 id="7-1-接近实时-Near-Real-Time-简称NRT"><a href="#7-1-接近实时-Near-Real-Time-简称NRT" class="headerlink" title="7.1 接近实时(Near Real Time 简称NRT)"></a>7.1 接近实时(Near Real Time 简称NRT)</h3><blockquote><p><strong>Elasticsearch是一个接近实时的搜索平台</strong>。这意味着，<strong>从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟(通常是1秒内)</strong> </p></blockquote><h3 id="7-2-索引-index"><a href="#7-2-索引-index" class="headerlink" title="7.2 索引(index)"></a>7.2 索引(index)</h3><blockquote><p><strong><code>一个索引就是一个拥有几分相似特征的文档的集合</code>**。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。</strong><code>一个索引由一个名字来标识(必须全部是小写字母的)</code><strong>，</strong><code>并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字</code><strong>。</strong><code>索引类似于关系型数据库中Database 的概念</code>**。在一个集群中，如果你想，可以定义任意多的索引。 </p></blockquote><h3 id="7-3-类型-type"><a href="#7-3-类型-type" class="headerlink" title="7.3 类型(type)"></a>7.3 类型(type)</h3><blockquote><p><strong><code>一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定</code>**。在一个索引中，你可以定义一种或多种类型。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数 据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可 以为评论数据定义另一个类型。</strong><code>类型类似于关系型数据库中Table的概念</code>**。 </p><p><strong>NOTE: 在5.x版本以前可以在一个索引中定义多个类型,6.x之后版本也可以使用,但是不推荐,在8.x版本中彻底移除一个索引中创建多个类型</strong></p></blockquote><h3 id="7-4-映射-Mapping"><a href="#7-4-映射-Mapping" class="headerlink" title="7.4 映射(Mapping)"></a>7.4 映射(Mapping)</h3><blockquote><p><strong>Mapping</strong>是ES中的一个很重要的内容，**<code>它类似于传统关系型数据中table的schema，用于定义一个索引(index)中的类型(type)的数据的结构</code><strong>。 在ES中，我们可以手动创建type(相当于table)和mapping(相关与schema),也可以采用默认创建方式。</strong><code>在默认配置下，ES可以根据插入的数据自动地创建type及其mapping。 mapping中主要包括字段名、字段数据类型和字段索引类型</code>** </p></blockquote><h3 id="7-5-文档-document"><a href="#7-5-文档-document" class="headerlink" title="7.5 文档(document)"></a>7.5 文档(document)</h3><blockquote><p><strong><code>一个文档是一个可被索引的基础信息单元，类似于表中的一条记录</code>。</strong>比如，你可以拥有某一个员工的文档,也可以拥有某个商品的一个文档。文档以采用了轻量级的数据交换格式JSON(Javascript Object Notation)来表示。 </p></blockquote><hr><h2 id="8-Kibana的安装"><a href="#8-Kibana的安装" class="headerlink" title="8. Kibana的安装"></a>8. Kibana的安装</h2><pre><code class="hljs markdown">Kibana是一个针对Elasticsearch的开源分析及可视化平台，使用Kibana可以查询、查看并与存储在ES索引的数据进行交互操作，使用Kibana能执行高级的数据分析，并能以图表、表格和地图的形式查看数据<span class="hljs-bullet">1.</span> 下载Kibana<span class="hljs-code">https://www.elastic.co/downloads/kibana</span><span class="hljs-code"></span><span class="hljs-code">2. 安装下载的kibana</span><span class="hljs-code">rpm -ivh kibana-6.2.4-x86_64.rpm</span><span class="hljs-code"></span><span class="hljs-code">3. 查找kibana的安装位置</span><span class="hljs-code">find / -name kibana</span><span class="hljs-code">    </span><span class="hljs-code">4. 编辑kibana配置文件</span><span class="hljs-code">[root@localhost /]# vim /etc/kibana/kibana.yml</span><span class="hljs-code"></span><span class="hljs-code">5. 修改如下配置</span><span class="hljs-code">server.host: &quot;10.102.115.3&quot;                #ES服务器主机名</span><span class="hljs-code">elasticsearch.url: &quot;http://10.102.115.3:9200&quot;   #ES服务器地址</span><span class="hljs-code"></span><span class="hljs-code">6. 启动kibana</span><span class="hljs-code">systemctl start kibana</span><span class="hljs-code">systemctl stop  kibana</span><span class="hljs-code">systemctl status kibana</span><span class="hljs-code"></span><span class="hljs-code">7. 访问kibana的web界面  </span><span class="hljs-code">http://10.102.115.3:5601/   #kibana默认端口为5601 使用主机:端口直接访问即可    </span></code></pre><hr><h2 id="9-Kibana的基本操作"><a href="#9-Kibana的基本操作" class="headerlink" title="9. Kibana的基本操作"></a>9. Kibana的基本操作</h2><h3 id="9-1-索引-Index-的基本操作"><a href="#9-1-索引-Index-的基本操作" class="headerlink" title="9.1 索引(Index)的基本操作"></a>9.1 索引(Index)的基本操作</h3><pre><code class="hljs http">PUT /dangdang/         创建索引DELETE /dangdang删除索引DELETE /*删除所有索引GET /_cat/indices?v 查看索引信息</code></pre><h3 id="9-2-类型-type-的基本操作"><a href="#9-2-类型-type-的基本操作" class="headerlink" title="9.2 类型(type)的基本操作"></a>9.2 类型(type)的基本操作</h3><h4 id="创建类型"><a href="#创建类型" class="headerlink" title="创建类型"></a>创建类型</h4><pre><code class="hljs http"><span class="hljs-attribute">1.创建/dangdang索引并创建(product)类型</span>PUT /dangdang             &#123;  &quot;mappings&quot;: &#123;    &quot;product&quot;: &#123;      &quot;properties&quot;: &#123;        &quot;title&quot;:    &#123; &quot;type&quot;: &quot;text&quot;  &#125;,        &quot;name&quot;:     &#123; &quot;type&quot;: &quot;text&quot;  &#125;,       &quot;age&quot;:      &#123; &quot;type&quot;: &quot;integer&quot; &#125;,        &quot;created&quot;:  &#123;          &quot;type&quot;:   &quot;date&quot;,           &quot;format&quot;: &quot;strict_date_optional_time||epoch_millis&quot;        &#125;      &#125;    &#125;  &#125;&#125;注意: 这种方式创建类型要求索引不能存在</code></pre><blockquote><p>Mapping Type: <strong>: text , keyword , date ,integer, long , double , boolean or ip</strong></p></blockquote><h4 id="查看类型"><a href="#查看类型" class="headerlink" title="查看类型"></a>查看类型</h4><pre><code class="hljs http">GET /dangdang/_mapping/product # 语法:GET /索引名/_mapping/类型名</code></pre><h3 id="9-3-文档-document-的基本操作"><a href="#9-3-文档-document-的基本操作" class="headerlink" title="9.3 文档(document)的基本操作"></a>9.3 文档(document)的基本操作</h3><h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4><pre><code class="hljs http">PUT /ems/emp/1   #/索引/类型/id&#123;  &quot;name&quot;:&quot;赵小六&quot;,  &quot;age&quot;:23,  &quot;bir&quot;:&quot;2012-12-12&quot;,  &quot;content&quot;:&quot;这是一个好一点的员工&quot;&#125;</code></pre><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><pre><code class="hljs json">GET /ems/emp/1  返回结果:&#123;  <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;ems&quot;</span>,  <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;emp&quot;</span>,  <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,  <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,  <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;_source&quot;</span>: &#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;赵小六&quot;</span>,    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">23</span>,    <span class="hljs-attr">&quot;bir&quot;</span>: <span class="hljs-string">&quot;2012-12-12&quot;</span>,    <span class="hljs-attr">&quot;content&quot;</span>: <span class="hljs-string">&quot;这是一个好一点的员工&quot;</span>  &#125;&#125;</code></pre><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><pre><code class="hljs json">DELETE /ems/emp/1&#123;  <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;ems&quot;</span>,  <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;emp&quot;</span>,  <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,  <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">2</span>,  &quot;result&quot;: &quot;deleted&quot;, #删除成功  &quot;_shards&quot;: &#123;    &quot;total&quot;: 2,    &quot;successful&quot;: 1,    &quot;failed&quot;: 0  &#125;,  &quot;_seq_no&quot;: 1,  &quot;_primary_term&quot;: 1&#125;</code></pre><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><pre><code class="hljs http">1.第一种方式  更新原有的数据   POST /dangdang/emp/1/_update    &#123;      &quot;doc&quot;:&#123;        &quot;name&quot;:&quot;xiaohei&quot;      &#125;    &#125;2.第二种方式  添加新的数据    POST /ems/emp/1/_update    &#123;      &quot;doc&quot;:&#123;        &quot;name&quot;:&quot;xiaohei&quot;,        &quot;age&quot;:11,        &quot;dpet&quot;:&quot;你好部门&quot;      &#125;    &#125;3.第三种方式 在原来数据基础上更新POST /ems/emp/1/_update    &#123;      &quot;script&quot;: &quot;ctx._source.age += 5&quot;    &#125;</code></pre><pre><code class="hljs markdown">ES的使用语法风格为:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">REST</span> <span class="hljs-attr">Verb</span>&gt;</span></span> /<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Index</span>&gt;</span></span>/<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Type</span>&gt;</span></span>/<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span></span>REST操作    /索引/类型/文档id</code></pre><h4 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h4><pre><code class="hljs http">1. 批量索引两个文档    PUT /dangdang/emp/_bulk &#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;   &#123;&quot;name&quot;: &quot;John Doe&quot;,&quot;age&quot;:23,&quot;bir&quot;:&quot;2012-12-12&quot;&#125;&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;    &#123;&quot;name&quot;: &quot;Jane Doe&quot;,&quot;age&quot;:23,&quot;bir&quot;:&quot;2012-12-12&quot;&#125;    2. 更新文档同时删除文档    POST /dangdang/emp/_bulk&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;&#123;&quot;doc&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;&#125;&#125;&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:2&#125;&#125;&#123;&quot;index&quot;:&#123;&#125;&#125;&#123;&quot;name&quot;:&quot;xxx&quot;,&quot;age&quot;:23&#125; 注意:批量时不会因为一个失败而全部失败,二十继续执行后续操作,批量在返回时按照执行的状态开始返回</code></pre><hr><h2 id="10-ES中高级检索"><a href="#10-ES中高级检索" class="headerlink" title="10. ES中高级检索"></a>10. ES中高级检索</h2><h3 id="10-1-检索方式"><a href="#10-1-检索方式" class="headerlink" title="10.1 检索方式"></a>10.1 检索方式</h3><blockquote><p>ES官方提供了两中检索方式:<strong>一种是通过 URL 参数进行搜索,另一种是通过 DSL(Domain Specified Language) 进行搜索</strong>。<strong>官方更推荐使用第二种方式第二种方式是基于传递JSON作为请求体(request body)格式与ES进行交互，这种方式更强大，更简洁</strong>。</p></blockquote><h3 id="10-2-测试数据"><a href="#10-2-测试数据" class="headerlink" title="10.2 测试数据"></a>10.2 测试数据</h3><pre><code class="hljs json">1.删除索引DELETE /ems2.创建索引并指定类型PUT /ems&#123;  <span class="hljs-attr">&quot;mappings&quot;</span>:&#123;    <span class="hljs-attr">&quot;emp&quot;</span>:&#123;      <span class="hljs-attr">&quot;properties&quot;</span>:&#123;        <span class="hljs-attr">&quot;name&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;age&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span>        &#125;,        <span class="hljs-attr">&quot;bir&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span>        &#125;,        <span class="hljs-attr">&quot;content&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;address&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span>        &#125;      &#125;    &#125;  &#125;&#125;3.插入测试数据PUT /ems/emp/_bulk  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">23</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">24</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">8</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">9</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">43</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">59</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;</code></pre><h3 id="10-2-URL检索"><a href="#10-2-URL检索" class="headerlink" title="10.2 URL检索"></a>10.2 URL检索</h3><blockquote><p>*<em>GET /ems/emp/_search?q=</em>&amp;sort=age:asc**</p><p>​    _search 搜索的API<br>​    q=*     匹配所有文档<br>​    sort    以结果中的指定字段排序</p></blockquote><h3 id="10-3-DSL检索"><a href="#10-3-DSL检索" class="headerlink" title="10.3 DSL检索"></a>10.3 DSL检索</h3><blockquote><p><strong>NOTE: 以下重点讲解DSL语法</strong></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;    &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,    &quot;sort&quot;: [        &#123;            &quot;age&quot;: &#123;                &quot;order&quot;: &quot;desc&quot;            &#125;        &#125;    ]&#125;</code></pre><h3 id="10-4-DSL高级检索-Query"><a href="#10-4-DSL高级检索-Query" class="headerlink" title="10.4 DSL高级检索(Query)"></a>10.4 DSL高级检索(Query)</h3><h4 id="0-查询所有-match-all"><a href="#0-查询所有-match-all" class="headerlink" title="0. 查询所有(match_all)"></a>0. 查询所有(match_all)</h4><blockquote><p><strong>match_all关键字:</strong>  返回索引中的全部文档</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;&#125;</code></pre><h4 id="1-查询结果中返回指定条数-size"><a href="#1-查询结果中返回指定条数-size" class="headerlink" title="1. 查询结果中返回指定条数(size)"></a>1. 查询结果中返回指定条数(size)</h4><blockquote><p><strong>size 关键字</strong>: 指定查询结果中返回指定条数。  <strong>默认返回值10条</strong></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123; &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,&quot;size&quot;: 1&#125;</code></pre><h4 id="2-分页查询-from"><a href="#2-分页查询-from" class="headerlink" title="2. 分页查询(from)"></a>2. 分页查询(from)</h4><blockquote><p><strong>from 关键字</strong>: 用来指定起始返回位置，和<strong>size关键字连用可实现分页效果</strong></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;      &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,      &quot;sort&quot;: [        &#123;          &quot;age&quot;: &#123;            &quot;order&quot;: &quot;desc&quot;          &#125;        &#125;      ],      &quot;size&quot;: 2,       &quot;from&quot;: 1&#125;</code></pre><h4 id="3-查询结果中返回指定字段-source"><a href="#3-查询结果中返回指定字段-source" class="headerlink" title="3. 查询结果中返回指定字段(_source)"></a>3. 查询结果中返回指定字段(_source)</h4><blockquote><p><strong>_source 关键字</strong>: 是一个数组,在数组中用来指定展示那些字段</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;      &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,      &quot;_source&quot;: [&quot;account_number&quot;, &quot;balance&quot;]&#125;</code></pre><h4 id="4-关键词查询-term"><a href="#4-关键词查询-term" class="headerlink" title="4. 关键词查询(term)"></a>4. 关键词查询(term)</h4><blockquote><p> <strong>term 关键字</strong>: 用来使用关键词查询</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;term&quot;: &#123;      &quot;address&quot;: &#123;        &quot;value&quot;: &quot;北京&quot;      &#125;    &#125;  &#125;&#125;</code></pre><blockquote><p><strong>NOTE1:  通过使用term查询得知ES中默认使用分词器为标准分词器(StandardAnalyzer),标准分词器对于英文单词分词,对于中文单字分词</strong>。</p><p><strong>NOTE2:  通过使用term查询得知,在ES的Mapping Type 中 keyword , date ,integer, long , double , boolean or ip 这些类型不分词</strong>，<strong>只有text类型分词</strong>。</p></blockquote><h4 id="5-范围查询-range"><a href="#5-范围查询-range" class="headerlink" title="5. 范围查询(range)"></a>5. 范围查询(range)</h4><blockquote><p><strong>range 关键字</strong>: 用来指定查询指定范围内的文档</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;range&quot;: &#123;      &quot;age&quot;: &#123;        &quot;gte&quot;: 8,        &quot;lte&quot;: 30      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="6-前缀查询-prefix"><a href="#6-前缀查询-prefix" class="headerlink" title="6. 前缀查询(prefix)"></a>6. 前缀查询(prefix)</h4><blockquote><p><strong>prefix 关键字</strong>: 用来检索含有指定前缀的关键词的相关文档</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;prefix&quot;: &#123;      &quot;content&quot;: &#123;        &quot;value&quot;: &quot;redis&quot;      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="7-通配符查询-wildcard"><a href="#7-通配符查询-wildcard" class="headerlink" title="7. 通配符查询(wildcard)"></a>7. 通配符查询(wildcard)</h4><blockquote><p><strong>wildcard 关键字</strong>: 通配符查询     *<em>? 用来匹配一个任意字符  * 用来匹配多个任意字符*</em></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;wildcard&quot;: &#123;      &quot;content&quot;: &#123;        &quot;value&quot;: &quot;re*&quot;      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="8-多id查询-ids"><a href="#8-多id查询-ids" class="headerlink" title="8. 多id查询(ids)"></a>8. 多id查询(ids)</h4><blockquote><p><strong>ids 关键字</strong> : 值为数组类型,用来根据一组id获取多个对应的文档</p></blockquote><pre><code class="hljs http">GET  /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;ids&quot;: &#123;      &quot;values&quot;: [&quot;lg5HwWkBxH7z6xax7W3_&quot;,&quot;lQ5HwWkBxH7z6xax7W3_&quot;]    &#125;  &#125;&#125;</code></pre><h4 id="9-模糊查询-fuzzy"><a href="#9-模糊查询-fuzzy" class="headerlink" title="9. 模糊查询(fuzzy)"></a>9. 模糊查询(fuzzy)</h4><blockquote><p><strong>fuzzy 关键字</strong>: 用来模糊查询含有指定关键字的文档  注意:允许出现的错误必须在0-2之间</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;fuzzy&quot;: &#123;      &quot;content&quot;:&quot;spoong&quot;    &#125;  &#125;&#125;# 注意: 最大编辑距离为 0 1 2如果关键词为2个长度      0..2 must match exactly  必须完全匹配如果关键词长度3..5之间  one edit allowed    允许一个失败如果关键词长度&gt;5   two edits allowed       最多允许两个错误</code></pre><h4 id="10-布尔查询-bool"><a href="#10-布尔查询-bool" class="headerlink" title="10. 布尔查询(bool)"></a>10. 布尔查询(bool)</h4><blockquote><p><strong>bool 关键字</strong>: 用来组合多个条件实现复杂查询  boolb表达式查询</p><p>​    <strong>must: 相当于&amp;&amp; 同时成立</strong></p><p>​    <strong>should: 相当于|| 成立一个就行</strong></p><p>​    <strong>must_not: 相当于!  不能满足任何一个</strong></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;          &quot;range&quot;: &#123;            &quot;age&quot;: &#123;              &quot;gte&quot;: 0,              &quot;lte&quot;: 30            &#125;          &#125;        &#125;      ],      &quot;must_not&quot;: [        &#123;&quot;wildcard&quot;: &#123;          &quot;content&quot;: &#123;            &quot;value&quot;: &quot;redi?&quot;          &#125;        &#125;&#125;      ]    &#125;  &#125;,  &quot;sort&quot;: [    &#123;      &quot;age&quot;: &#123;        &quot;order&quot;: &quot;desc&quot;      &#125;    &#125;  ]&#125;</code></pre><h4 id="11-高亮查询-highlight"><a href="#11-高亮查询-highlight" class="headerlink" title="11. 高亮查询(highlight)"></a>11. 高亮查询(highlight)</h4><blockquote><p><strong>highlight 关键字</strong>: 可以让符合条件的文档中的关键词高亮</p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;term&quot;: &#123;      &quot;content&quot;: &#123;        &quot;value&quot;: &quot;redis&quot;      &#125;    &#125;  &#125;,  &quot;highlight&quot;: &#123;    &quot;fields&quot;: &#123;      &quot;*&quot;: &#123;&#125;    &#125;  &#125;&#125;</code></pre><blockquote><p><strong>自定义高亮html标签</strong>: 可以在highlight中使用<code>pre_tags</code>和<code>post_tags</code></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;:&#123;    &quot;term&quot;:&#123;      &quot;content&quot;:&quot;框架&quot;    &#125;  &#125;,  &quot;highlight&quot;: &#123;    &quot;pre_tags&quot;: [&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;],    &quot;post_tags&quot;: [&quot;&lt;/span&gt;&quot;],    &quot;fields&quot;: &#123;      &quot;*&quot;:&#123;&#125;    &#125;  &#125;&#125;</code></pre><blockquote><p>多字段高亮 使用<code>require_field_match</code>开启多个字段高亮</p></blockquote><pre><code class="hljs http"> GET /ems/emp/_search&#123;  &quot;query&quot;:&#123;    &quot;term&quot;:&#123;      &quot;content&quot;:&quot;框架&quot;    &#125;  &#125;,  &quot;highlight&quot;: &#123;    &quot;pre_tags&quot;: [&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;],    &quot;post_tags&quot;: [&quot;&lt;/span&gt;&quot;],    &quot;require_field_match&quot;:false,    &quot;fields&quot;: &#123;      &quot;*&quot;:&#123;&#125;    &#125;  &#125;&#125;</code></pre><h4 id="12-多字段查询-multi-match"><a href="#12-多字段查询-multi-match" class="headerlink" title="12. 多字段查询(multi_match)"></a>12. 多字段查询(multi_match)</h4><blockquote><p><code>注意:使用这种方式进行查询时,为了更好获取搜索结果,在查询过程中先将查询条件根据当前的分词器分词之后进行查询</code></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;multi_match&quot;: &#123;      &quot;query&quot;: &quot;中国&quot;,      &quot;fields&quot;: [&quot;name&quot;,&quot;content&quot;] #这里写要检索的指定字段    &#125;  &#125;&#125;</code></pre><h4 id="13-多字段分词查询-query-String"><a href="#13-多字段分词查询-query-String" class="headerlink" title="13. 多字段分词查询(query_String)"></a>13. 多字段分词查询(query_String)</h4><blockquote><p><code>注意:使用这种方式进行查询时,为了更好获取搜索结果,在查询过程中先将查询条件根据当前的分词器分词之后进行查询</code></p></blockquote><pre><code class="hljs http">GET /dangdang/book/_search&#123;  &quot;query&quot;: &#123;    &quot;query_string&quot;: &#123;      &quot;query&quot;: &quot;中国声音&quot;,      &quot;analyzer&quot;: &quot;ik_max_word&quot;,       &quot;fields&quot;: [&quot;name&quot;,&quot;content&quot;]    &#125;  &#125;&#125;</code></pre><hr><h2 id="11-IK分词器"><a href="#11-IK分词器" class="headerlink" title="11. IK分词器"></a>11. IK分词器</h2><blockquote><p><strong>NOTE: 默认ES中采用标准分词器进行分词,这种方式并不适用于中文网站,因此需要修改ES对中文友好分词,从而达到更加的搜索的效果。</strong></p></blockquote><h3 id="11-1-在线安装IK"><a href="#11-1-在线安装IK" class="headerlink" title="11.1 在线安装IK"></a>11.1 在线安装IK</h3><blockquote><p>在线安装IK  (v5.5.1版本后开始支持在线安装 )</p></blockquote><pre><code class="hljs shell">1. 在es安装目录中执行如下命令[es@linux elasticsearch-6.2.4]$ ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip<span class="hljs-meta">-&gt;</span><span class="bash"> Downloading https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip</span>[=================================================] 100%<span class="hljs-meta">-&gt;</span><span class="bash"> Installed analysis-ik</span>[es@linux elasticsearch-6.2.4]$ ls plugins/analysis-ik[es@linux elasticsearch-6.2.4]$ cd plugins/analysis-ik/[es@linux analysis-ik]$ lscommons-codec-1.9.jar    elasticsearch-analysis-ik-6.2.4.jar  httpcore-4.4.4.jarcommons-logging-1.2.jar  httpclient-4.5.2.jar                 plugin-descriptor.properties2. 重启es生效</code></pre><blockquote><p><strong>NOTE: 要求版本严格与当前使用版本一致,如需使用其他版本替换 <code>6.2.4</code> 为使用的版本号</strong></p></blockquote><h3 id="11-2-本地安装IK"><a href="#11-2-本地安装IK" class="headerlink" title="11.2 本地安装IK"></a>11.2 本地安装IK</h3><blockquote><p>可以将对应的IK分词器下载到本地,然后再安装 <strong>NOTE: 本课程使用本地安装</strong></p></blockquote><pre><code class="hljs shell">1. 下载对应版本[es@linux ~]$ wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.2.4/elasticsearch-analysis-ik-6.2.4.zip2. 解压[es@linux ~]$ unzip elasticsearch-analysis-ik-6.2.4.zip #先使用yum install -y unzip3. 移动到es安装目录的plugins目录中[es@linux ~]$ ls elasticsearch-6.2.4/plugins/[es@linux ~]$ mv elasticsearch elasticsearch-6.2.4/plugins/[es@linux ~]$ ls elasticsearch-6.2.4/plugins/elasticsearch[es@linux ~]$ ls elasticsearch-6.2.4/plugins/elasticsearch/commons-codec-1.9.jar    config                               httpclient-4.5.2.jar  plugin-descriptor.propertiescommons-logging-1.2.jar  elasticsearch-analysis-ik-6.2.4.jar  httpcore-4.4.4.jar4. 重启es生效</code></pre><h3 id="11-3-测试IK分词器"><a href="#11-3-测试IK分词器" class="headerlink" title="11.3 测试IK分词器"></a>11.3 测试IK分词器</h3><blockquote><p><strong>NOTE: IK分词器提供了两种mapping类型用来做文档的分词分别是 <code>ik_max_word</code> 和<code> ik_smart</code></strong></p><p><code>ik_max_word 和 ik_smart 什么区别?</code></p><p>​        <code>ik_max_word: 会将文本做最细粒度的拆分</code>，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</p><p>​        <code>ik_smart: 会做最粗粒度的拆分</code>，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”。</p></blockquote><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><pre><code class="hljs json">DELETE /emsPUT /ems&#123;  <span class="hljs-attr">&quot;mappings&quot;</span>:&#123;    <span class="hljs-attr">&quot;emp&quot;</span>:&#123;      <span class="hljs-attr">&quot;properties&quot;</span>:&#123;        <span class="hljs-attr">&quot;name&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,           <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,           <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>        &#125;,        <span class="hljs-attr">&quot;age&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span>        &#125;,        <span class="hljs-attr">&quot;bir&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;date&quot;</span>        &#125;,        <span class="hljs-attr">&quot;content&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,          <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,          <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>        &#125;,        <span class="hljs-attr">&quot;address&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span>        &#125;      &#125;    &#125;  &#125;&#125;PUT /ems/emp/_bulk  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;小黑&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">23</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;王小黑&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">24</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;上海&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张小五&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">8</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;无锡&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;win7&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">9</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;南京&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;梅超风&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">43</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;杭州&quot;</span>&#125;  &#123;<span class="hljs-attr">&quot;index&quot;</span>:&#123;&#125;&#125;  &#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">59</span>,<span class="hljs-attr">&quot;bir&quot;</span>:<span class="hljs-string">&quot;2012-12-12&quot;</span>,<span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="hljs-attr">&quot;address&quot;</span>:<span class="hljs-string">&quot;北京&quot;</span>&#125;GET /ems/emp/_search&#123;  <span class="hljs-attr">&quot;query&quot;</span>:&#123;    <span class="hljs-attr">&quot;term&quot;</span>:&#123;      <span class="hljs-attr">&quot;content&quot;</span>:<span class="hljs-string">&quot;框架&quot;</span>    &#125;  &#125;,  <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;    <span class="hljs-attr">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>],    <span class="hljs-attr">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>],    <span class="hljs-attr">&quot;fields&quot;</span>: &#123;      <span class="hljs-attr">&quot;*&quot;</span>:&#123;&#125;    &#125;  &#125;&#125;</code></pre><h3 id="11-4-配置扩展词"><a href="#11-4-配置扩展词" class="headerlink" title="11.4 配置扩展词"></a>11.4 配置扩展词</h3><blockquote><p>IK支持自定义<code>扩展词典</code>和<code>停用词典</code>,所谓**<code>扩展词典</code><strong>就是有些词并不是关键词,但是也希望被ES用来作为检索的关键词,可以将这些词加入扩展词典。</strong><code>停用词典</code>**就是有些词是关键词,但是出于业务场景不想使用这些关键词被检索到，可以将这些词放入停用词典。</p><p>如何定义扩展词典和停用词典可以修改IK分词器中<code>config</code>目录中<code>IKAnalyzer.cfg.xml</code>这个文件。</p><p><strong>NOTE：词典的编码必须为UTF-8，否则无法生效</strong></p></blockquote><pre><code class="hljs xml">1. 修改vim IKAnalyzer.cfg.xml    <span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>    <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">properties</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span>        <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext_dict.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>         <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span>ext_stopword.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>2. 在ik分词器目录下config目录中创建ext_dict.dic文件   编码一定要为UTF-8才能生效vim ext_dict.dic 加入扩展词即可3. 在ik分词器目录下config目录中创建ext_stopword.dic文件 vim ext_stopword.dic 加入停用词即可4.重启es生效</code></pre><hr><h2 id="12-过滤查询-Filter-Query"><a href="#12-过滤查询-Filter-Query" class="headerlink" title="12. (过滤查询) Filter Query"></a>12. (过滤查询) Filter Query</h2><h3 id="12-1-过滤查询"><a href="#12-1-过滤查询" class="headerlink" title="12.1 过滤查询"></a>12.1 过滤查询</h3><blockquote><p>其实准确来说，ES中的查询操作分为2种: <code>查询(query)</code>和<code>过滤(filter)</code>。<code>查询即是之前提到的query查询，它 (查询)默认会计算每个返回文档的得分，然后根据得分排序</code>。<code>而过滤(filter)只会筛选出符合的文档，并不计算 得分，且它可以缓存文档 。所以，单从性能考虑，过滤比查询更快</code>。 </p><p>换句话说，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时， 应先使用过滤操作过滤数据， 然后使用查询匹配数据。 </p></blockquote><h3 id="12-2-过滤语法"><a href="#12-2-过滤语法" class="headerlink" title="12.2 过滤语法"></a>12.2 过滤语法</h3><pre><code class="hljs json">GET /ems/emp/_search&#123;  <span class="hljs-attr">&quot;query&quot;</span>: &#123;    <span class="hljs-attr">&quot;bool&quot;</span>: &#123;      <span class="hljs-attr">&quot;must&quot;</span>: [        &#123;<span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;&#125;      ],      <span class="hljs-attr">&quot;filter&quot;</span>: &#123;        <span class="hljs-attr">&quot;range&quot;</span>: &#123;          <span class="hljs-attr">&quot;age&quot;</span>: &#123;            <span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">10</span>          &#125;        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><blockquote><p><strong>NOTE:  在执行filter和query时,先执行filter在执行query</strong></p><p><strong>NOTE:Elasticsearch会自动缓存经常使用的过滤器，以加快性能。</strong></p></blockquote><h3 id="12-3-常见的过滤器类型"><a href="#12-3-常见的过滤器类型" class="headerlink" title="12.3 常见的过滤器类型"></a>12.3 常见的过滤器类型</h3><h4 id="term-、-terms-Filter"><a href="#term-、-terms-Filter" class="headerlink" title="term 、 terms Filter"></a>term 、 terms Filter</h4><pre><code class="hljs http">GET /ems/emp/_search   # 使用term过滤&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;&quot;term&quot;: &#123;          &quot;name&quot;: &#123;            &quot;value&quot;: &quot;小黑&quot;          &#125;        &#125;&#125;      ],      &quot;filter&quot;: &#123;        &quot;term&quot;: &#123;          &quot;content&quot;:&quot;框架&quot;        &#125;      &#125;    &#125;  &#125;&#125;GET /dangdang/book/_search  #使用terms过滤&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;&quot;term&quot;: &#123;          &quot;name&quot;: &#123;            &quot;value&quot;: &quot;中国&quot;          &#125;        &#125;&#125;      ],      &quot;filter&quot;: &#123;        &quot;terms&quot;: &#123;          &quot;content&quot;:[              &quot;科技&quot;,              &quot;声音&quot;            ]        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="ranage-filter"><a href="#ranage-filter" class="headerlink" title="ranage filter"></a>ranage filter</h4><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;&quot;term&quot;: &#123;          &quot;name&quot;: &#123;            &quot;value&quot;: &quot;中国&quot;          &#125;        &#125;&#125;      ],      &quot;filter&quot;: &#123;        &quot;range&quot;: &#123;          &quot;age&quot;: &#123;            &quot;gte&quot;: 7,            &quot;lte&quot;: 20          &#125;        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="exists-filter"><a href="#exists-filter" class="headerlink" title="exists filter"></a>exists filter</h4><blockquote><p><strong>过滤存在指定字段,获取字段不为空的索引记录使用</strong></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;&quot;term&quot;: &#123;          &quot;name&quot;: &#123;            &quot;value&quot;: &quot;中国&quot;          &#125;        &#125;&#125;      ],      &quot;filter&quot;: &#123;        &quot;exists&quot;: &#123;          &quot;field&quot;:&quot;aaa&quot;        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="ids-filter"><a href="#ids-filter" class="headerlink" title="ids filter"></a>ids filter</h4><blockquote><p><strong>过滤含有指定字段的索引记录</strong></p></blockquote><pre><code class="hljs http">GET /ems/emp/_search&#123;  &quot;query&quot;: &#123;    &quot;bool&quot;: &#123;      &quot;must&quot;: [        &#123;&quot;term&quot;: &#123;          &quot;name&quot;: &#123;            &quot;value&quot;: &quot;中国&quot;          &#125;        &#125;&#125;      ],      &quot;filter&quot;: &#123;        &quot;ids&quot;: &#123;          &quot;values&quot;: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><hr><h2 id="13-Java操作ES"><a href="#13-Java操作ES" class="headerlink" title="13. Java操作ES"></a>13. Java操作ES</h2><h3 id="13-1-引入maven依赖"><a href="#13-1-引入maven依赖" class="headerlink" title="13.1 引入maven依赖"></a>13.1 引入maven依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>transport<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="13-2创建索引和类型"><a href="#13-2创建索引和类型" class="headerlink" title="13.2创建索引和类型"></a>13.2创建索引和类型</h3><h4 id="Rest的创建方式"><a href="#Rest的创建方式" class="headerlink" title="Rest的创建方式"></a>Rest的创建方式</h4><pre><code class="hljs json"><span class="hljs-comment">// 1.在restful的创建方式</span>PUT /dangdang&#123;  <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;    <span class="hljs-attr">&quot;book&quot;</span>:&#123;      <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,          <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>        &#125;,        <span class="hljs-attr">&quot;age&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;integer&quot;</span>        &#125;,        <span class="hljs-attr">&quot;sex&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;content&quot;</span>:&#123;          <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,          <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>        &#125;      &#125;    &#125;  &#125;&#125;</code></pre><h4 id="Java中创建方式"><a href="#Java中创建方式" class="headerlink" title="Java中创建方式"></a>Java中创建方式</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 创建索引并创建类型同时指定映射</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreateIndexAndTypeAndMapping</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ExecutionException, InterruptedException </span>&#123;    TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));        System.out.println(<span class="hljs-string">&quot;=======创建索引=======&quot;</span>);    CreateIndexResponse indexResponse = transportClient.admin().indices().prepareCreate(<span class="hljs-string">&quot;dangdang&quot;</span>).execute().get();    System.out.println(indexResponse.index());    System.out.println(<span class="hljs-string">&quot;=======创建类型指定映射=======&quot;</span>);    XContentBuilder mappingBuilder = XContentFactory.jsonBuilder();    mappingBuilder.startObject()&#123; <span class="hljs-string">&quot;properties&quot;</span>:&#123;<span class="hljs-string">&quot;name&quot;</span>:&#123;<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;                                                 <span class="hljs-string">&quot;age&quot;</span>:&#123;<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;&quot;</span>                    .startObject(<span class="hljs-string">&quot;properties&quot;</span>)                        .startObject(<span class="hljs-string">&quot;name&quot;</span>)                            .field(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>)                            .field(<span class="hljs-string">&quot;analyzer&quot;</span>, <span class="hljs-string">&quot;ik_max_word&quot;</span>)                        .endObject()                        .startObject(<span class="hljs-string">&quot;age&quot;</span>)                            .field(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;integer&quot;</span>)                        .endObject()                        .startObject(<span class="hljs-string">&quot;sex&quot;</span>)                            .field(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;keyword&quot;</span>)                        .endObject()                        .startObject(<span class="hljs-string">&quot;content&quot;</span>)                            .field(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>)                            .field(<span class="hljs-string">&quot;analyzer&quot;</span>, <span class="hljs-string">&quot;ik_max_word&quot;</span>)                        .endObject()                    .endObject()                .endObject();    PutMappingRequest putMappingRequest = <span class="hljs-keyword">new</span> PutMappingRequest(<span class="hljs-string">&quot;dangdang&quot;</span>).type(<span class="hljs-string">&quot;book&quot;</span>).source(mappingBuilder);    transportClient.admin().indices().putMapping(putMappingRequest).get();&#125;</code></pre><h3 id="13-3-索引一条记录"><a href="#13-3-索引一条记录" class="headerlink" title="13.3 索引一条记录"></a>13.3 索引一条记录</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 创建索引(自动生成文档id)</span><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject()               .field(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;中国人&quot;</span>)               .field(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>)               .field(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>)               .field(<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;他是一个中国人,这个中国人怎么样,挺好的&quot;</span>).endObject();       IndexResponse indexResponse = transportClient.prepareIndex(<span class="hljs-string">&quot;dangdang&quot;</span>, <span class="hljs-string">&quot;book&quot;</span>).setSource(xContentBuilder).get();       System.out.println(indexResponse.status());   &#125;<span class="hljs-comment">/**</span><span class="hljs-comment">    * 创建索引(指定生成文档id)</span><span class="hljs-comment">    *</span><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().startObject()               .field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;中国人&quot;</span>)               .field(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">23</span>)               .field(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>)               .field(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;他是一个中国人,这个中国人怎么样,挺好的&quot;</span>).endObject();       IndexResponse indexResponse = transportClient.prepareIndex(<span class="hljs-string">&quot;dangdang&quot;</span>, <span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>).setSource(xContentBuilder).get();       System.out.println(indexResponse.status());   &#125;</code></pre><h3 id="13-3-更新一条索引"><a href="#13-3-更新一条索引" class="headerlink" title="13.3 更新一条索引"></a>13.3 更新一条索引</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 更新一条记录</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       XContentBuilder source = XContentFactory.jsonBuilder();       source.startObject().field(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;小黑是中国人&quot;</span>).endObject();       UpdateResponse updateResponse = transportClient.prepareUpdate(<span class="hljs-string">&quot;dangdang&quot;</span>, <span class="hljs-string">&quot;book&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)               .setDoc(source).get();       System.out.println(updateResponse.status());   &#125;</code></pre><h3 id="13-4-删除一条索引"><a href="#13-4-删除一条索引" class="headerlink" title="13.4 删除一条索引"></a>13.4 删除一条索引</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 删除一条索引记录</span><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> UnknownHostException</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       DeleteResponse deleteResponse = transportClient.prepareDelete(<span class="hljs-string">&quot;dangdang&quot;</span>, <span class="hljs-string">&quot;book&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>).get();       System.out.println(deleteResponse.status());   &#125;</code></pre><h3 id="13-5-批量更新"><a href="#13-5-批量更新" class="headerlink" title="13.5 批量更新"></a>13.5 批量更新</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 批量更新</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBulk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       <span class="hljs-comment">//添加第一条记录</span>       IndexRequest request1 = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;dangdang&quot;</span>,<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);       request1.source(XContentFactory.jsonBuilder().startObject().field(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;中国科技&quot;</span>).field(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>).field(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>).field(<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;这是个好人&quot;</span>).endObject());       <span class="hljs-comment">//添加第二条记录</span>       IndexRequest request2 = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;dangdang&quot;</span>,<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);       request2.source(XContentFactory.jsonBuilder().startObject().field(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;中国之声&quot;</span>).field(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>).field(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;男&quot;</span>).field(<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;这是一个好的声音&quot;</span>).endObject());       <span class="hljs-comment">//更新记录</span>       UpdateRequest updateRequest = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;dangdang&quot;</span>,<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);       updateRequest.doc(XContentFactory.jsonBuilder().startObject().field(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;中国力量&quot;</span>).endObject());       <span class="hljs-comment">//删除一条记录</span>       DeleteRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;dangdang&quot;</span>,<span class="hljs-string">&quot;book&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);       BulkResponse bulkItemResponses = transportClient.prepareBulk().add(request1).add(request2).add(updateRequest).add(deleteRequest).get();       BulkItemResponse[] items = bulkItemResponses.getItems();       <span class="hljs-keyword">for</span> (BulkItemResponse item : items) &#123;           System.out.println(item.status());       &#125;   &#125;</code></pre><h3 id="13-6-检索记录"><a href="#13-6-检索记录" class="headerlink" title="13.6 检索记录"></a>13.6 检索记录</h3><h4 id="查询所有并排序"><a href="#查询所有并排序" class="headerlink" title="查询所有并排序"></a>查询所有并排序</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询所有并排序</span><span class="hljs-comment">     *  ASC 升序  DESC 降序</span><span class="hljs-comment">     *  addSort(&quot;age&quot;, SortOrder.ASC)  指定排序字段以及使用哪种方式排序</span><span class="hljs-comment">     *  addSort(&quot;age&quot;, SortOrder.DESC) 指定排序字段以及使用哪种方式排序</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchAllQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;        TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));        SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(QueryBuilders.matchAllQuery()).addSort(<span class="hljs-string">&quot;age&quot;</span>, SortOrder.DESC).get();        SearchHits hits = searchResponse.getHits();        System.out.println(<span class="hljs-string">&quot;符合条件的记录数: &quot;</span>+hits.totalHits);        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;            System.out.print(<span class="hljs-string">&quot;当前索引的分数: &quot;</span>+hit.getScore());            System.out.print(<span class="hljs-string">&quot;, 对应结果:=====&gt;&quot;</span>+hit.getSourceAsString());            System.out.println(<span class="hljs-string">&quot;, 指定字段结果:&quot;</span>+hit.getSourceAsMap().get(<span class="hljs-string">&quot;name&quot;</span>));            System.out.println(<span class="hljs-string">&quot;=================================================&quot;</span>);        &#125;    &#125;</code></pre><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 分页查询</span><span class="hljs-comment">    *  From 从那条记录开始 默认从0 开始  form = (pageNow-1)*size</span><span class="hljs-comment">    *  Size 每次返回多少条符合条件的结果  默认10</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchAllQueryFormAndSize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(QueryBuilders.matchAllQuery()).setFrom(<span class="hljs-number">0</span>).setSize(<span class="hljs-number">2</span>).get();       SearchHits hits = searchResponse.getHits();       System.out.println(<span class="hljs-string">&quot;符合条件的记录数: &quot;</span>+hits.totalHits);       <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;           System.out.print(<span class="hljs-string">&quot;当前索引的分数: &quot;</span>+hit.getScore());           System.out.print(<span class="hljs-string">&quot;, 对应结果:=====&gt;&quot;</span>+hit.getSourceAsString());           System.out.println(<span class="hljs-string">&quot;, 指定字段结果:&quot;</span>+hit.getSourceAsMap().get(<span class="hljs-string">&quot;name&quot;</span>));           System.out.println(<span class="hljs-string">&quot;=================================================&quot;</span>);       &#125;   &#125;</code></pre><h4 id="查询返回字段"><a href="#查询返回字段" class="headerlink" title="查询返回字段"></a>查询返回字段</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    *  查询返回指定字段(source) 默认返回所有</span><span class="hljs-comment">    *      setFetchSource 参数1:包含哪些字段   参数2:排除哪些字段</span><span class="hljs-comment">    *      setFetchSource(&quot;*&quot;,&quot;age&quot;)  返回所有字段中排除age字段</span><span class="hljs-comment">    *      setFetchSource(&quot;name&quot;,&quot;&quot;)  只返回name字段</span><span class="hljs-comment">    *      setFetchSource(new String[]&#123;&#125;,new String[]&#123;&#125;)</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchAllQuerySource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(QueryBuilders.matchAllQuery()).setFetchSource(<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>).get();       SearchHits hits = searchResponse.getHits();       System.out.println(<span class="hljs-string">&quot;符合条件的记录数: &quot;</span>+hits.totalHits);       <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;           System.out.print(<span class="hljs-string">&quot;当前索引的分数: &quot;</span>+hit.getScore());           System.out.print(<span class="hljs-string">&quot;, 对应结果:=====&gt;&quot;</span>+hit.getSourceAsString());           System.out.println(<span class="hljs-string">&quot;, 指定字段结果:&quot;</span>+hit.getSourceAsMap().get(<span class="hljs-string">&quot;name&quot;</span>));           System.out.println(<span class="hljs-string">&quot;=================================================&quot;</span>);       &#125;   &#125;</code></pre><h4 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    *  term查询</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testTerm</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       TermQueryBuilder queryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;中国&quot;</span>);       SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(queryBuilder).get();   &#125;</code></pre><h4 id="range查询"><a href="#range查询" class="headerlink" title="range查询"></a>range查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    *  rang查询</span><span class="hljs-comment">    *     lt    小于</span><span class="hljs-comment">    *     lte   小于等于</span><span class="hljs-comment">    *     gt    大于</span><span class="hljs-comment">    *     gte   大于等于</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testRange</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(<span class="hljs-string">&quot;age&quot;</span>).lt(<span class="hljs-number">45</span>).gte(<span class="hljs-number">8</span>);       SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(rangeQueryBuilder).get(); &#125;</code></pre><h4 id="prefix查询"><a href="#prefix查询" class="headerlink" title="prefix查询"></a>prefix查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   *  prefix 前缀查询</span><span class="hljs-comment">   *</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@Test</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrefix</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;      TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));      PrefixQueryBuilder prefixQueryBuilder = QueryBuilders.prefixQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;中&quot;</span>);      SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(prefixQueryBuilder).get();  &#125;</code></pre><h4 id="wildcard查询"><a href="#wildcard查询" class="headerlink" title="wildcard查询"></a>wildcard查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    *  wildcardQuery 通配符查询</span><span class="hljs-comment">    *</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testwildcardQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       WildcardQueryBuilder wildcardQueryBuilder = QueryBuilders.wildcardQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;中*&quot;</span>);       SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(wildcardQueryBuilder).get();   &#125;</code></pre><h4 id="Ids查询"><a href="#Ids查询" class="headerlink" title="Ids查询"></a>Ids查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * ids 查询</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIds</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;       TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));       IdsQueryBuilder idsQueryBuilder = QueryBuilders.idsQuery().addIds(<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);       SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(idsQueryBuilder).get();   &#125;</code></pre><h4 id="fuzzy模糊查询"><a href="#fuzzy模糊查询" class="headerlink" title="fuzzy模糊查询"></a>fuzzy模糊查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">  * fuzzy 查询</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFuzzy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;     TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));     FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(<span class="hljs-string">&quot;content&quot;</span>, <span class="hljs-string">&quot;国人&quot;</span>);     SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(fuzzyQueryBuilder).get(); &#125;</code></pre><h4 id="bool-查询"><a href="#bool-查询" class="headerlink" title="bool 查询"></a>bool 查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">  * bool 查询</span><span class="hljs-comment">  */</span> <span class="hljs-meta">@Test</span> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBool</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;     TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));     BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();         boolQueryBuilder.should(QueryBuilders.matchAllQuery());         boolQueryBuilder.mustNot(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;age&quot;</span>).lte(<span class="hljs-number">8</span>));         boolQueryBuilder.must(QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;中国&quot;</span>));     SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).setQuery(boolQueryBuilder).get(); &#125;</code></pre><h4 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 高亮查询</span><span class="hljs-comment">     *  .highlighter(highlightBuilder) 用来指定高亮设置</span><span class="hljs-comment">     *  requireFieldMatch(false) 开启多个字段高亮</span><span class="hljs-comment">     *  field 用来定义高亮字段</span><span class="hljs-comment">     *  preTags(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;)  用来指定高亮前缀</span><span class="hljs-comment">     *  postTags(&quot;&lt;/span&gt;&quot;) 用来指定高亮后缀</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHighlight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;        TransportClient transportClient = <span class="hljs-keyword">new</span> PreBuiltTransportClient(Settings.EMPTY).addTransportAddress(<span class="hljs-keyword">new</span> TransportAddress(InetAddress.getByName(<span class="hljs-string">&quot;172.16.251.142&quot;</span>), <span class="hljs-number">9300</span>));        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;中国&quot;</span>);        HighlightBuilder highlightBuilder = <span class="hljs-keyword">new</span> HighlightBuilder();        highlightBuilder.requireFieldMatch(<span class="hljs-keyword">false</span>).field(<span class="hljs-string">&quot;name&quot;</span>).field(<span class="hljs-string">&quot;content&quot;</span>).preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);        SearchResponse searchResponse = transportClient.prepareSearch(<span class="hljs-string">&quot;dangdang&quot;</span>).setTypes(<span class="hljs-string">&quot;book&quot;</span>).highlighter(highlightBuilder).highlighter(highlightBuilder).setQuery(termQueryBuilder).get();        SearchHits hits = searchResponse.getHits();        System.out.println(<span class="hljs-string">&quot;符合条件的记录数: &quot;</span>+hits.totalHits);        <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();            System.out.println(<span class="hljs-string">&quot;================高亮之前==========&quot;</span>);            <span class="hljs-keyword">for</span>(Map.Entry&lt;String,Object&gt; entry:sourceAsMap.entrySet())&#123;                System.out.println(<span class="hljs-string">&quot;key: &quot;</span>+entry.getKey() +<span class="hljs-string">&quot;   value: &quot;</span>+entry.getValue());            &#125;            System.out.println(<span class="hljs-string">&quot;================高亮之后==========&quot;</span>);            <span class="hljs-keyword">for</span> (Map.Entry&lt;String,Object&gt; entry:sourceAsMap.entrySet())&#123;                HighlightField highlightField = highlightFields.get(entry.getKey());                <span class="hljs-keyword">if</span> (highlightField!=<span class="hljs-keyword">null</span>)&#123;                    System.out.println(<span class="hljs-string">&quot;key: &quot;</span>+entry.getKey() +<span class="hljs-string">&quot;   value: &quot;</span>+ highlightField.fragments()[<span class="hljs-number">0</span>]);                &#125;<span class="hljs-keyword">else</span>&#123;                    System.out.println(<span class="hljs-string">&quot;key: &quot;</span>+entry.getKey() +<span class="hljs-string">&quot;   value: &quot;</span>+entry.getValue());                &#125;            &#125;        &#125;    &#125;</code></pre><h4 id="多字段查询"><a href="#多字段查询" class="headerlink" title="多字段查询"></a>多字段查询</h4><pre><code class="hljs java">MultiMatchQueryBuilder queryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;框架&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>);</code></pre><h4 id="多字段分词查询"><a href="#多字段分词查询" class="headerlink" title="多字段分词查询"></a>多字段分词查询</h4><pre><code class="hljs java">QueryStringQueryBuilder queryStringQueryBuilder =     QueryBuilders.queryStringQuery(<span class="hljs-string">&quot;框架张无忌&quot;</span>)    .analyzer(<span class="hljs-string">&quot;ik_max_word&quot;</span>) <span class="hljs-comment">//定义分词器</span>    .field(<span class="hljs-string">&quot;name&quot;</span>)<span class="hljs-comment">//定义字段</span>    .field(<span class="hljs-string">&quot;content&quot;</span>);<span class="hljs-comment">//字段</span></code></pre><hr><h3 id="14-SpringBoot-Data操作ES"><a href="#14-SpringBoot-Data操作ES" class="headerlink" title="14. SpringBoot Data操作ES"></a>14. SpringBoot Data操作ES</h3><h4 id="14-1-引入依赖"><a href="#14-1-引入依赖" class="headerlink" title="14.1 引入依赖"></a>14.1 引入依赖</h4><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注意:升级原有项目中springboot版本--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><span class="hljs-comment">&lt;!--springboot web --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--通过spring data 操作Es--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--springboot 继承test--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入lombook--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="14-2-编写yml配置"><a href="#14-2-编写yml配置" class="headerlink" title="14.2 编写yml配置"></a>14.2 编写yml配置</h4><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">data:</span>    <span class="hljs-attr">elasticsearch:</span>      <span class="hljs-attr">cluster-nodes:</span> <span class="hljs-number">172.16</span><span class="hljs-number">.251</span><span class="hljs-number">.142</span><span class="hljs-string">:9300</span></code></pre><h4 id="14-3-编写entity"><a href="#14-3-编写entity" class="headerlink" title="14.3 编写entity"></a>14.3 编写entity</h4><pre><code class="hljs java"><span class="hljs-meta">@Document(indexName = &quot;dangdang&quot;,type = &quot;book&quot;)</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-keyword">private</span> String id;    <span class="hljs-meta">@Field(type = FieldType.Text,analyzer =&quot;ik_max_word&quot;)</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@Field(type = FieldType.Date)</span>    <span class="hljs-keyword">private</span> Date createDate;    <span class="hljs-meta">@Field(type = FieldType.Keyword)</span>    <span class="hljs-keyword">private</span> String author;    <span class="hljs-meta">@Field(type = FieldType.Text,analyzer =&quot;ik_max_word&quot;)</span>    <span class="hljs-keyword">private</span> String content;&#125;</code></pre><blockquote><p><code>@Document</code>: 代表一个文档记录 </p><p>​    <code>indexName</code>:  用来指定索引名称</p><p>​    <code>type</code>:        用来指定索引类型</p><p><code>@Id</code>: 用来将对象中id和ES中_id映射</p><p><code>@Field</code>: 用来指定ES中的字段对应Mapping</p><p>​    <code>type</code>: 用来指定ES中存储类型</p><p>​    <code>analyzer</code>: 用来指定使用哪种分词器</p></blockquote><h4 id="14-4-编写BookRepository"><a href="#14-4-编写BookRepository" class="headerlink" title="14.4 编写BookRepository"></a>14.4 编写BookRepository</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">Book</span>,<span class="hljs-title">String</span>&gt; </span>&#123;&#125;</code></pre><h4 id="14-5-索引or更新一条记录"><a href="#14-5-索引or更新一条记录" class="headerlink" title="14.5 索引or更新一条记录"></a>14.5 索引or更新一条记录</h4><blockquote><p><strong>NOTE:这种方式根据实体类中中配置自动在ES创建索引,类型以及映射</strong></p></blockquote><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpringBootDataEs</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> BookRepository bookRespistory;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 添加索引和更新索引 id 存在更新 不存在添加</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSaveOrUpdate</span><span class="hljs-params">()</span></span>&#123;        Book book = <span class="hljs-keyword">new</span> Book();        book.setId(<span class="hljs-string">&quot;21&quot;</span>);        book.setName(<span class="hljs-string">&quot;小陈&quot;</span>);        book.setCreateDate(<span class="hljs-keyword">new</span> Date());        book.setAuthor(<span class="hljs-string">&quot;李白&quot;</span>);        book.setContent(<span class="hljs-string">&quot;这是中国的好人,这真的是一个很好的人,李白很狂&quot;</span>);        bookRespistory.save(book);    &#125;&#125;</code></pre><h4 id="14-6-删除一条记录"><a href="#14-6-删除一条记录" class="headerlink" title="14.6 删除一条记录"></a>14.6 删除一条记录</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 删除一条索引</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span></span>&#123;    Book book = <span class="hljs-keyword">new</span> Book();    book.setId(<span class="hljs-string">&quot;21&quot;</span>);    bookRespistory.delete(book);&#125;</code></pre><h4 id="14-7-查询"><a href="#14-7-查询" class="headerlink" title="14.7 查询"></a>14.7 查询</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询所有</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;    Iterable&lt;Book&gt; books = bookRespistory.findAll();    <span class="hljs-keyword">for</span> (Book book : books) &#123;        System.out.println(book);    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询一个</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOne</span><span class="hljs-params">()</span></span>&#123;    Optional&lt;Book&gt; byId = bookRespistory.findById(<span class="hljs-string">&quot;21&quot;</span>);    System.out.println(byId.get());&#125;</code></pre><h4 id="14-8-查询排序"><a href="#14-8-查询排序" class="headerlink" title="14.8 查询排序"></a>14.8 查询排序</h4><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    * 排序查询</span><span class="hljs-comment">    */</span>   <span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAllOrder</span><span class="hljs-params">()</span></span>&#123;       Iterable&lt;Book&gt; books = bookRespistory.findAll(Sort.by(Sort.Order.asc(<span class="hljs-string">&quot;createDate&quot;</span>)));       books.forEach(book -&gt; System.out.println(book) );   &#125;</code></pre><h4 id="14-9-自定义基本查询"><a href="#14-9-自定义基本查询" class="headerlink" title="14.9 自定义基本查询"></a>14.9 自定义基本查询</h4><table><thead><tr><th>Keyword</th><th>Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByNameAndPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Or</code></td><td><code>findByNameOrPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Is</code></td><td><code>findByName</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Not</code></td><td><code>findByNameNot</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Between</code></td><td><code>findByPriceBetween</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByPriceLessThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByPriceGreaterThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Before</code></td><td><code>findByPriceBefore</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>After</code></td><td><code>findByPriceAfter</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Like</code></td><td><code>findByNameLike</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByNameStartingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>EndingWith</code></td><td><code>findByNameEndingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Contains/Containing</code></td><td><code>findByNameContaining</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>In</code></td><td><code>findByNameIn</code><br><code>(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByNameNotIn</code><br/><code>(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Near</code></td><td><code>findByStoreNear</code></td><td><code>Not Supported Yet !</code></td></tr><tr><td><code>True</code></td><td><code>findByAvailableTrue</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>False</code></td><td><code>findByAvailableFalse</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : false&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByAvailable</code><br><code>TrueOrderByNameDesc</code></td><td><code>&#123;&quot;sort&quot; : [&#123; &quot;name&quot; : &#123;&quot;order&quot; : &quot;desc&quot;&#125; &#125;],&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr></tbody></table><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ElasticsearchRepository</span>&lt;<span class="hljs-title">Book</span>,<span class="hljs-title">String</span>&gt; </span>&#123;    <span class="hljs-comment">//根据作者查询</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByAuthor</span><span class="hljs-params">(String keyword)</span></span>;    <span class="hljs-comment">//根据内容查询</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByContent</span><span class="hljs-params">(String keyword)</span></span>;    <span class="hljs-comment">//根据内容和名字查</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByNameAndContent</span><span class="hljs-params">(String name,String content)</span></span>;    <span class="hljs-comment">//根据内容或名称查询</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByNameOrContent</span><span class="hljs-params">(String name,String content)</span></span>;    <span class="hljs-comment">//范围查询</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByPriceBetween</span><span class="hljs-params">(Double start,Double end)</span></span>;    <span class="hljs-comment">//查询名字以xx开始的</span>    <span class="hljs-function">List&lt;Book&gt;  <span class="hljs-title">findByNameStartingWith</span><span class="hljs-params">(String name)</span></span>;    <span class="hljs-comment">//查询某个字段值是否为false</span>    <span class="hljs-function">List&lt;Book&gt;  <span class="hljs-title">findByNameFalse</span><span class="hljs-params">()</span></span>;        <span class="hljs-comment">//.......</span>&#125;</code></pre><h4 id="14-10-实现复杂查询"><a href="#14-10-实现复杂查询" class="headerlink" title="14.10 实现复杂查询"></a>14.10 实现复杂查询</h4><h5 id="自定义接口"><a href="#自定义接口" class="headerlink" title="自定义接口"></a>自定义接口</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CustomerBookRepository</span>  </span>&#123;    <span class="hljs-comment">//实现分页的方法</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByPageable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page,<span class="hljs-keyword">int</span> size)</span></span>;    <span class="hljs-comment">//term查询高亮</span>    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">findByNameAndHighlightAdnPageable</span><span class="hljs-params">(String name,<span class="hljs-keyword">int</span> page,<span class="hljs-keyword">int</span> size,String filter)</span></span>;&#125;</code></pre><h5 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baizhi.es.dao;<span class="hljs-keyword">import</span> com.baizhi.es.entity.Book;<span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;<span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHit;<span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHits;<span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;<span class="hljs-keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightField;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.data.domain.PageRequest;<span class="hljs-keyword">import</span> org.springframework.data.domain.Pageable;<span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchTemplate;<span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.SearchResultMapper;<span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.aggregation.AggregatedPage;<span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.aggregation.impl.AggregatedPageImpl;<span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.query.NativeSearchQuery;<span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.elasticsearch.index.query.QueryBuilders.*;<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerBookRepositoryImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CustomerBookRepository</span></span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">findByNameAndHighlightAdnPageable</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size,String filter)</span> </span>&#123;        HighlightBuilder.Field nameField = <span class="hljs-keyword">new</span> HighlightBuilder                .Field(<span class="hljs-string">&quot;*&quot;</span>)                .preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>)                .postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>).requireFieldMatch(<span class="hljs-keyword">false</span>);        NativeSearchQuery nativeSearchQuery = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder()                .withQuery(QueryBuilders.multiMatchQuery(name,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;content&quot;</span>))                .withPageable(PageRequest.of(page,size))                .withHighlightFields(nameField)                .withFilter(boolQuery().mustNot(termQuery(<span class="hljs-string">&quot;name&quot;</span>,filter)))                .build();        AggregatedPage&lt;Book&gt; books = elasticsearchTemplate.queryForPage(nativeSearchQuery, Book.class, <span class="hljs-keyword">new</span> SearchResultMapper() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">AggregatedPage&lt;T&gt; <span class="hljs-title">mapResults</span><span class="hljs-params">(SearchResponse response, Class&lt;T&gt; clazz, Pageable pageable)</span> </span>&#123;                SearchHits searchHits = response.getHits();                SearchHit[] hits = searchHits.getHits();                ArrayList&lt;Book&gt; books = <span class="hljs-keyword">new</span> ArrayList&lt;Book&gt;();                <span class="hljs-keyword">for</span> (SearchHit hit : hits) &#123;                    Book book = <span class="hljs-keyword">new</span> Book();                    <span class="hljs-comment">//原始map</span>                    Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();                    book.setId(sourceAsMap.get(<span class="hljs-string">&quot;id&quot;</span>).toString());                    book.setAuthor(sourceAsMap.get(<span class="hljs-string">&quot;author&quot;</span>).toString());       book.setPrice(Double.parseDouble(sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>).toString()));book.setCreateDate(<span class="hljs-keyword">new</span> Date(Long.valueOf(sourceAsMap.get(<span class="hljs-string">&quot;createDate&quot;</span>).toString())));                    book.setName(sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>).toString());                    book.setContent(sourceAsMap.get(<span class="hljs-string">&quot;content&quot;</span>).toString());                    <span class="hljs-comment">//高亮</span>                    Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();                    System.out.println(highlightFields);                    <span class="hljs-keyword">if</span> (highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>) != <span class="hljs-keyword">null</span>) &#123;                        String nameHighlight = highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>).getFragments()[<span class="hljs-number">0</span>].toString();                        book.setName(nameHighlight);                    &#125;                    <span class="hljs-keyword">if</span> (highlightFields.get(<span class="hljs-string">&quot;content&quot;</span>) != <span class="hljs-keyword">null</span>) &#123;                        String contentHighlight = highlightFields.get(<span class="hljs-string">&quot;content&quot;</span>).getFragments()[<span class="hljs-number">0</span>].toString();                        book.setContent(contentHighlight);                    &#125;                    books.add(book);                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AggregatedPageImpl&lt;T&gt;((List&lt;T&gt;)books);            &#125;        &#125;);        <span class="hljs-keyword">return</span> books.getContent();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">findByPageable</span><span class="hljs-params">(<span class="hljs-keyword">int</span> page, <span class="hljs-keyword">int</span> size)</span> </span>&#123;        NativeSearchQuery searchQuery = <span class="hljs-keyword">new</span> NativeSearchQueryBuilder()                .withIndices(<span class="hljs-string">&quot;dangdang&quot;</span>)                .withTypes(<span class="hljs-string">&quot;book&quot;</span>)                .withQuery(matchAllQuery())                .withPageable(PageRequest.of(page,size))                .build();        <span class="hljs-keyword">return</span> elasticsearchTemplate.queryForList(searchQuery,Book.class);    &#125;&#125;</code></pre><hr><h2 id="15-ES中集群"><a href="#15-ES中集群" class="headerlink" title="15. ES中集群"></a>15. ES中集群</h2><h3 id="15-1-相关概念"><a href="#15-1-相关概念" class="headerlink" title="15.1 相关概念"></a>15.1 相关概念</h3><h4 id="集群-cluster"><a href="#集群-cluster" class="headerlink" title="集群(cluster)"></a>集群(cluster)</h4><blockquote><p>一个集群就是由一个或多个节点组织在一起，它们共同持有你整个的数据，并一起提供索引和搜索功能。一个集群 由一个唯一的名字标识，这个名字默认就是<code>elasticsearch</code>。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。在产品环境中显式地设定这个名字是一个好习惯，但是使用默认值来进行测试/开发也是不错的。 </p></blockquote><h4 id="节点-node"><a href="#节点-node" class="headerlink" title="节点(node)"></a>节点(node)</h4><blockquote><p>一个节点是你集群中的一个服务器，作为集群的一部分，它存储你的数据，参与集群的索引和搜索功能。和集群类似，一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于Elasticsearch集群中的哪些节点。 </p></blockquote><blockquote><p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫 做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。 </p></blockquote><blockquote><p>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点， 这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。 </p></blockquote><h4 id="分片和复制-shards-amp-replicas"><a href="#分片和复制-shards-amp-replicas" class="headerlink" title="分片和复制(shards &amp; replicas)"></a>分片和复制(shards &amp; replicas)</h4><blockquote><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任一节点都没有这样大的磁盘空间;或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置 到集群中的任何节点上。 分片之所以重要，主要有两方面的原因: </p></blockquote><blockquote><p>允许你水平分割/扩展你的内容容量允许你在分片(潜在地，位于多个节点上)之上进行分布式的、并行的操作，进而提高性能/吞吐量 至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，这些都是透明的。 </p></blockquote><blockquote><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因消失了。这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。复制之所以重要，主要有两方面的原因: </p></blockquote><blockquote><p> 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原/主要 (original/primary)分片置于同一节点上是非常重要的。 扩展你的搜索量/吞吐量，因为搜索可以在所有的复制上并行运行 </p></blockquote><blockquote><p>总之，每个索引可以被分成多个分片。一个索引也可以被复制0次(意思是没有复制)或多次。一旦复制了，每个 索引就有了主分片(作为复制源的原来的分片)和复制分片(主分片的拷贝)之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制数量，但是不能改变分片的数量。 </p></blockquote><blockquote><p>默认情况下，<code>Elasticsearch中的每个索引被分片5个主分片和1个复制</code>，这意味着，如果你的集群中至少有两个节点，你的索引将会有5个主分片和另外5个复制分片(1个完全拷贝)，这样的话每个索引总共就有10个分片。一个索引的多个分片可以存放在集群中的一台主机上，也可以存放在多台主机上，这取决于你的集群机器数量。主分片和复制分片的具体位置是由ES内在的策略所决定的。 </p></blockquote><h3 id="15-2-快速搭建集群"><a href="#15-2-快速搭建集群" class="headerlink" title="15.2 快速搭建集群"></a>15.2 快速搭建集群</h3><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 将原有ES安装包复制三份<span class="hljs-code">cp -r elasticsearch-6.2.4/ master/</span><span class="hljs-code">cp -r elasticsearch-6.2.4/ slave1/</span><span class="hljs-code">cp -r elasticsearch-6.2.4/ slave2/</span><span class="hljs-code"></span><span class="hljs-code">2. 删除复制目录中data目录 </span><span class="hljs-code">#注意:由于复制目录之前使用过因此需要在创建集群时将原来数据删除</span><span class="hljs-code">rm -rf master/data</span><span class="hljs-code">rm -rf slave1/data</span><span class="hljs-code">rm -rf slave2/data</span><span class="hljs-code"></span><span class="hljs-code">3. 编辑没有文件夹中config目录中jvm.options文件跳转启动内存</span><span class="hljs-code">vim master/config/jvm.options  </span><span class="hljs-code">vim slave1/config/jvm.options</span><span class="hljs-code">vim slave2/config/jvm.options</span><span class="hljs-code">#分别加入: -Xms512m -Xmx512m</span><span class="hljs-code"></span><span class="hljs-code">4. 分别修改三个文件夹中config目录中elasticsearch.yml文件</span><span class="hljs-code">vim master/config/elasticsearch.yml</span><span class="hljs-code">vim salve1/config/elasticsearch.yml</span><span class="hljs-code">vim slave2/config/elasticsearch.yml</span><span class="hljs-code">#分别修改如下配置:</span><span class="hljs-code">cluster.name: my-es                       #集群名称(集群名称必须一致)</span><span class="hljs-code">node.name: es-03                          #节点名称(节点名称不能一致)</span><span class="hljs-code">network.host: 0.0.0.0                     #监听地址(必须开启远程权限,并关闭防火墙)</span><span class="hljs-code">http.port: 9200                           #监听端口(在一台机器时服务端口不能一致)</span><span class="hljs-code">discovery.zen.ping.unicast.hosts: [&quot;172.30.2.175:9301&quot;, &quot;172.30.2.201:9302&quot;] #另外两个节点的ip</span><span class="hljs-code">gateway.recover_after_nodes: 3            #集群可做master的最小节点数</span><span class="hljs-code">transport.tcp.port: 9300  #集群TCP端口(在一台机器搭建必须修改)</span><span class="hljs-code">5.启动多个es</span><span class="hljs-code">./master/bin/elasticsearch</span><span class="hljs-code">./slave1/bin/elasticsearch</span><span class="hljs-code">./slave2/bin/elasticsearch</span><span class="hljs-code"></span><span class="hljs-code">6. 查看节点状态</span><span class="hljs-code">curl  http://10.102.115.3:9200</span><span class="hljs-code">curl  http://10.102.115.3:8200</span><span class="hljs-code">curl  http://10.102.115.3:7200</span><span class="hljs-code"></span><span class="hljs-code">7. 查看集群健康</span><span class="hljs-code">http://10.102.115.3:9200/_cat/health?v</span></code></pre><h3 id="15-3-安装head插件"><a href="#15-3-安装head插件" class="headerlink" title="15.3 安装head插件"></a>15.3 安装head插件</h3><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 访问github网站<span class="hljs-code">搜索: elasticsearch-head 插件</span><span class="hljs-code"></span><span class="hljs-code">2. 安装git</span><span class="hljs-code">yum install git</span><span class="hljs-code"></span><span class="hljs-code">3. 将elasticsearch-head下载到本地</span><span class="hljs-code">git clone git://github.com/mobz/elasticsearch-head.git</span><span class="hljs-code"></span><span class="hljs-code">4. 安装nodejs</span><span class="hljs-code">#注意: 没有wget的请先安装yum install -y wget</span><span class="hljs-code">wget http://cdn.npm.taobao.org/dist/node/latest-v8.x/node-v8.1.2-linux-x64.tar.xz</span><span class="hljs-code"></span><span class="hljs-code">5. 解压缩nodejs</span><span class="hljs-code">xz -d node-v10.15.3-linux-arm64.tar.xz</span><span class="hljs-code">tar -xvf node-v10.15.3-linux-arm64.tar</span><span class="hljs-code"></span><span class="hljs-code">6. 配置环境变量</span><span class="hljs-code">mv node-v10.15.3-linux-arm64 nodejs</span><span class="hljs-code">mv nodejs /usr/nodejs</span><span class="hljs-code">vim /etc/profile</span><span class="hljs-code">export NODE_HOME=/usr/nodejs</span><span class="hljs-code">export PATH=$PATH:$JAVA_HOME/bin:$NODE_HOME/bin</span><span class="hljs-code">source /etc/profile</span><span class="hljs-code">7.进入elasticsearch-head的目录</span><span class="hljs-code">npm config set registry https://registry.npm.taobao.org</span><span class="hljs-code">npm install</span><span class="hljs-code">npm run start</span><span class="hljs-code"></span><span class="hljs-code">8.  编写elastsearch.yml配置文件开启head插件的访问</span><span class="hljs-code">http.cors.enabled: true</span><span class="hljs-code">http.cors.allow-origin: &quot;*&quot;</span><span class="hljs-code"></span><span class="hljs-code">9.  启动访问head插件 默认端口9100</span><span class="hljs-code">http://ip:9100  查看集群状态</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot</title>
    <link href="/2021/01/07/springboot/"/>
    <url>/2021/01/07/springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-微框架"><a href="#Spring-Boot-微框架" class="headerlink" title="Spring Boot 微框架"></a>Spring Boot 微框架</h1><h2 id="1-springboot的引言"><a href="#1-springboot的引言" class="headerlink" title="1. springboot的引言"></a>1. springboot的引言</h2><p>Spring Boot是由<code>Pivotal团队提供的全新框架</code>，其设计目的是用来<code>简化Spring应用的 初始搭建以及开发过程</code>。该框架使用了<code>特定的方式来进行配置</code>，从而使开发人员不 再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应 用开发领域(rapid application development)成为领导者。</p><p><code>springboot(微框架) = springmvc(控制器) + spring core(项目管理)</code></p><p>SSM Spring springmvc  mybatis    &lt;—-   SSM Spring  stauts2|struts1  mybatis  &lt;— SSH Spring Struts  Hibernate </p><hr><h2 id="2-springboot的特点"><a href="#2-springboot的特点" class="headerlink" title="2. springboot的特点"></a>2. springboot的特点</h2><ol><li><code>创建独立的Spring应用程序  </code></li><li><code>嵌入的Tomcat，无需部署WAR文件</code></li><li><code>简化Maven配置</code></li><li><code>自动配置Spring,没有XML配置</code></li></ol><hr><h2 id="3-springboot-的约定大于配置"><a href="#3-springboot-的约定大于配置" class="headerlink" title="3. springboot 的约定大于配置"></a>3. springboot 的约定大于配置</h2><p>项目目录结构:</p><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2f2.png" alt="image-20200321091519423"></p><ul><li><code>springboot 项目中必须在src/main/resources中放入application.yml(.properties)核心配置文件  名字必须为:application</code></li><li><code>springboot 项目中必须在src/main/java中所有子包之外构建全局入口类型,xxApplication,入口类一个springboot项目只能有一个</code></li></ul><h2 id="4-springboot的环境搭建"><a href="#4-springboot的环境搭建" class="headerlink" title="4. springboot的环境搭建"></a>4. springboot的环境搭建</h2><p>环境要求:</p><pre><code class="hljs markdown"><span class="hljs-section"># 1.System Requirements</span><span class="hljs-code">JDK18.+</span><span class="hljs-code">MAVEN3.3  or  Gradle 5.x and 6.x (4.10 is also supported but in a deprecated form)</span><span class="hljs-code">Spring Framework 5.2.4.RELEASE </span><span class="hljs-code"></span><span class="hljs-code"># 2.ServletContainers: </span><span class="hljs-code">Tomcat 9.0 </span><span class="hljs-code">    Jetty 9.4 </span><span class="hljs-code">    Undertow 2.0</span><span class="hljs-code"></span><span class="hljs-code"># 3.开发工具</span><span class="hljs-code">IDEA 2018版本 </span><span class="hljs-code">Eclipse 版本  17版本之后</span></code></pre><h5 id="4-1-项目中引入依赖"><a href="#4-1-项目中引入依赖" class="headerlink" title="4.1 项目中引入依赖"></a>4.1 项目中引入依赖</h5><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--继承springboot的父项目--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>     <span class="hljs-comment">&lt;!--引入springboot的web支持--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h5 id="4-2-引入配置文件"><a href="#4-2-引入配置文件" class="headerlink" title="4.2 引入配置文件"></a>4.2 引入配置文件</h5><p>​        <code>项目中src/main/resources/application.yml</code></p><h5 id="4-3-建包并创建控制器"><a href="#4-3-建包并创建控制器" class="headerlink" title="4.3 建包并创建控制器"></a>4.3 建包并创建控制器</h5><pre><code class="hljs java"><span class="hljs-comment">//在项目中创建指定的包结构</span><span class="hljs-comment">/*</span><span class="hljs-comment"> com</span><span class="hljs-comment">    +| baizhi</span><span class="hljs-comment">    +| controller */</span>                 <span class="hljs-meta">@Controller</span>                    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>                    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;                        <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>                        <span class="hljs-meta">@ResponseBody</span>                        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;                            System.out.println(<span class="hljs-string">&quot;======hello world=======&quot;</span>);                            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;                        &#125;                    &#125;</code></pre><h5 id="4-4-编写入口类"><a href="#4-4-编写入口类" class="headerlink" title="4.4 编写入口类"></a>4.4 编写入口类</h5><pre><code class="hljs java"><span class="hljs-comment">//在项目中如下的包结构中创建入口类 Application</span><span class="hljs-comment">/*</span><span class="hljs-comment">com</span><span class="hljs-comment">+| baizhi                  */</span>            <span class="hljs-meta">@SpringBootApplication</span>            <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;                    SpringApplication.run(Application.class,args);                &#125;            &#125;</code></pre><h5 id="4-5-运行main启动项目"><a href="#4-5-运行main启动项目" class="headerlink" title="4.5 运行main启动项目"></a>4.5 运行main启动项目</h5><pre><code class="hljs java">o.s.j.e.a.AnnotationMBeanExporter        : Registering beans <span class="hljs-keyword">for</span> JMX exposure on startups.b.c.e.t.TomcatEmbeddedServletContainer : <span class="hljs-function">Tomcat started on <span class="hljs-title">port</span><span class="hljs-params">(s)</span>: 8989 <span class="hljs-params">(http)</span></span><span class="hljs-function">com.baizhi.Application : Started Application in 2.152 <span class="hljs-title">seconds</span> <span class="hljs-params">(JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">2.611</span>)</span></span><span class="hljs-function"></span><span class="hljs-function"><span class="hljs-comment">//说明:  出现以上日志说明启动成功</span></span></code></pre><h5 id="4-6-访问项目"><a href="#4-6-访问项目" class="headerlink" title="4.6 访问项目"></a>4.6 访问项目</h5><pre><code class="hljs java"><span class="hljs-comment">//注意: springboot的项目默认没有项目名</span><span class="hljs-comment">//访问路径:  http://localhost:8080/hello/hello</span></code></pre><hr><h2 id="5-启动tomcat端口占用问题"><a href="#5-启动tomcat端口占用问题" class="headerlink" title="5. 启动tomcat端口占用问题"></a>5. 启动tomcat端口占用问题</h2><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span>                 <span class="hljs-comment">#用来指定内嵌服务器端口号</span>  <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span>  <span class="hljs-comment">#用来指定项目的访问路径</span></code></pre><hr><h2 id="6-springboot相关注解说明"><a href="#6-springboot相关注解说明" class="headerlink" title="6. springboot相关注解说明"></a>6. springboot相关注解说明</h2><pre><code class="hljs markdown"><span class="hljs-section"># Spring boot通常有一个名为 xxxApplication的类,入口类中有一个main方法, 在main方法中使用SpringApplication.run(xxxApplication.class,args)启动springboot应用的项目。</span><span class="hljs-section"># @RestController: 就是@Controller+@ResponseBody组合，支持RESTful访问方 式，返回结果都是json字符串。</span><span class="hljs-section"># @SpringBootApplication 注解等价于: </span><span class="hljs-code">@SpringBootConfiguration           标识注解,标识这是一个springboot的配置类</span><span class="hljs-code">@EnableAutoConfiguration 自动与项目中集成的第三方技术进行集成</span><span class="hljs-code">@ComponentScan 扫描入口类所在子包以及子包后代包中注解</span><span class="hljs-code">   </span></code></pre><hr><h2 id="7-springboot中配置文件的拆分"><a href="#7-springboot中配置文件的拆分" class="headerlink" title="7. springboot中配置文件的拆分"></a>7. springboot中配置文件的拆分</h2><pre><code class="hljs yml"><span class="hljs-comment">#说明: 在实际开发过程中生产环境和测试环境有可能是不一样的 因此将生产中的配置和测试中的配置拆分开,是非常必要的在springboot中也提供了配置文件拆分的方式. 这里以生产中项名名称不一致为例:</span><span class="hljs-string">生产中项目名为:</span> <span class="hljs-string">cmfz</span><span class="hljs-string">测试中项目名为:</span> <span class="hljs-string">springboot</span><span class="hljs-string">端口同时为:</span>   <span class="hljs-number">8080</span><span class="hljs-string">拆分如下:</span><span class="hljs-comment">#主配置文件:</span><span class="hljs-string">application.yml</span><span class="hljs-comment">#用来书写相同的的配置</span><span class="hljs-attr">server:</span><span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> <span class="hljs-comment">#生产和测试为同一个端口</span>                       <span class="hljs-comment">#生产配置文件:</span>    <span class="hljs-string">application-pord.yml</span>    <span class="hljs-attr">server:</span>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/cmfz</span>    <span class="hljs-comment">#测试配置文件:</span>    <span class="hljs-string">application-dev.yml</span>    <span class="hljs-attr">server:</span>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span></code></pre><hr><h2 id="8-springboot中创建自定义简单对象"><a href="#8-springboot中创建自定义简单对象" class="headerlink" title="8.springboot中创建自定义简单对象"></a>8.springboot中创建自定义简单对象</h2><h3 id="8-1-管理单个对象"><a href="#8-1-管理单个对象" class="headerlink" title="8.1 管理单个对象"></a>8.1 管理单个对象</h3><blockquote><p>在springboot中可以管理自定义的<code>简单组件</code>对象的创建可以直接使用注解形式创建。</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 1.使用 @Repository  @Service @Controller 以及@Component管理不同简单对象</span><span class="hljs-code">如: 比如要通过工厂创建自定义User对象:</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> String id;  <span class="hljs-keyword">private</span> String name;  ......&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.通过工厂创建之后可以在使用处任意注入该对象</span><span class="hljs-code">如:在控制器中使用自定义简单对象创建</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> User user;  ......&#125;</code></pre><h3 id="8-2-管理多个对象"><a href="#8-2-管理多个对象" class="headerlink" title="8.2 管理多个对象"></a>8.2 管理多个对象</h3><blockquote><p>在springboot中如果要管理<code>复杂对象</code>必须使用<code>@Configuration + @Bean</code>注解进行管理</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 1.管理复杂对象的创建</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Configuration(推荐)</span>|<span class="hljs-meta">@Component(不推荐)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Beans</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Calendar <span class="hljs-title">getCalendar</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> Calendar.getInstance();    &#125;&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.使用复杂对象</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Calendar calendar;    ......&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 注意: </span><span class="hljs-code">1.@Configuration 配置注解主要用来生产多个组件交给工厂管理  (注册形式)</span><span class="hljs-code">  2.@Component     用来管理单个组件                      (包扫描形式)</span></code></pre><hr><h2 id="9-springboot中注入"><a href="#9-springboot中注入" class="headerlink" title="9.springboot中注入"></a>9.springboot中注入</h2><blockquote><p>​    springboot中提供了三种注入方式: <code>注入基本属性</code>,<code>对象注入</code></p></blockquote><h5 id="9-1-基本属性注入"><a href="#9-1-基本属性注入" class="headerlink" title="9.1 基本属性注入"></a>9.1 基本属性注入</h5><pre><code class="hljs markdown"><span class="hljs-section"># 1.@Value 属性注入   [重点]</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;      <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.在配置文件中注入</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">xiaohei</span></code></pre><h5 id="9-2-对象方式注入"><a href="#9-2-对象方式注入" class="headerlink" title="9.2 对象方式注入"></a>9.2 对象方式注入</h5><pre><code class="hljs markdown"><span class="hljs-section"># 1. @ConfigurationProperties(prefix=&quot;前缀&quot;)</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> String  bir;    .....&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2. 编写配置文件</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">user:</span>  <span class="hljs-attr">id:</span> <span class="hljs-number">24</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">xiaohei</span>  <span class="hljs-attr">age:</span> <span class="hljs-number">23</span>  <span class="hljs-attr">bir:</span> <span class="hljs-number">2012</span><span class="hljs-string">/12/12</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 3. 引入依赖构建自定义注入元数据</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><hr><h2 id="10-springboot中两种模板配置"><a href="#10-springboot中两种模板配置" class="headerlink" title="10. springboot中两种模板配置"></a>10. springboot中两种模板配置</h2><h3 id="10-1-集成jsp模板"><a href="#10-1-集成jsp模板" class="headerlink" title="10.1 集成jsp模板"></a>10.1 集成jsp模板</h3><h5 id="10-1-1-引入jsp的集成jar包"><a href="#10-1-1-引入jsp的集成jar包" class="headerlink" title="10.1.1 引入jsp的集成jar包"></a>10.1.1 引入jsp的集成jar包</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="10-1-2-引入jsp运行插件"><a href="#10-1-2-引入jsp运行插件" class="headerlink" title="10.1.2 引入jsp运行插件"></a>10.1.2 引入jsp运行插件</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>springboot_day1<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>    <span class="hljs-comment">&lt;!--引入jsp运行插件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h5 id="10-1-3-配置视图解析器"><a href="#10-1-3-配置视图解析器" class="headerlink" title="10.1.3 配置视图解析器"></a>10.1.3 配置视图解析器</h5><pre><code class="hljs yml"><span class="hljs-comment">#在配置文件中引入视图解析器</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">mvc:</span>    <span class="hljs-attr">view:</span>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/</span>   <span class="hljs-comment"># /代表访问项目中webapp中页面</span>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span></code></pre><h5 id="10-1-4-第一种方式使用插件启动"><a href="#10-1-4-第一种方式使用插件启动" class="headerlink" title="10.1.4 第一种方式使用插件启动"></a>10.1.4 第一种方式使用插件启动</h5><p> <img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2ec.png" alt="image-20191129124602959"></p><h5 id="10-1-5-第二种方式使用idea中指定工作目录启动-推荐"><a href="#10-1-5-第二种方式使用idea中指定工作目录启动-推荐" class="headerlink" title="10.1.5 第二种方式使用idea中指定工作目录启动  [推荐]"></a>10.1.5 第二种方式使用idea中指定工作目录启动  [推荐]</h5><p> <img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2ef.png" alt="image-20191129124727562"></p><h5 id="10-1-6-启动访问jsp页面"><a href="#10-1-6-启动访问jsp页面" class="headerlink" title="10.1.6 启动访问jsp页面"></a>10.1.6 启动访问jsp页面</h5><pre><code class="hljs markdown">http://localhost:8989/cmfz/index.jsp</code></pre><h5 id="10-1-7-修改jsp无须重启应用"><a href="#10-1-7-修改jsp无须重启应用" class="headerlink" title="10.1.7 修改jsp无须重启应用"></a>10.1.7 修改jsp无须重启应用</h5><pre><code class="hljs properties"><span class="hljs-meta">server.servlet.jsp.init-parameters.development</span>=<span class="hljs-string">true</span></code></pre><h3 id="10-2-集成thymelaf模板"><a href="#10-2-集成thymelaf模板" class="headerlink" title="10.2 集成thymelaf模板"></a>10.2 集成thymelaf模板</h3><blockquote><p>Thymeleaf是一个用于web和独立环境的现代服务器端Java模板引擎。  –摘自官网<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p></blockquote><p><code>Thymeleaf</code>是跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎相比, Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。</p><h5 id="10-2-1-引入依赖"><a href="#10-2-1-引入依赖" class="headerlink" title="10.2.1 引入依赖"></a>10.2.1 引入依赖</h5><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用thymelaf--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="10-2-2-编写配置"><a href="#10-2-2-编写配置" class="headerlink" title="10.2.2 编写配置"></a>10.2.2 编写配置</h5><pre><code class="hljs properties"><span class="hljs-meta">spring.thymeleaf.prefix</span>=<span class="hljs-string">classpath:/templates/      #使用模板目录</span><span class="hljs-meta">spring.thymeleaf.suffix</span>=<span class="hljs-string">.html                      #使用模板后缀</span><span class="hljs-meta">spring.thymeleaf.encoding</span>=<span class="hljs-string">UTF-8                    #使用模板编码</span><span class="hljs-meta">spring.thymeleaf.enabled</span>=<span class="hljs-string">true                      #开始thymelaf模板</span><span class="hljs-meta">spring.thymeleaf.servlet.content-type</span>=<span class="hljs-string">text/html    #使用模板响应类型</span></code></pre><h5 id="10-2-3-编写控制器测试"><a href="#10-2-3-编写控制器测试" class="headerlink" title="10.2.3 编写控制器测试"></a>10.2.3 编写控制器测试</h5><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>    <span class="hljs-comment">//一定要是@Controller 不能再使用@RestController注解</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;测试与 thymeleaf 的集成&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;    &#125;&#125;</code></pre><h5 id="10-2-4-在templates目录中定义模板"><a href="#10-2-4-在templates目录中定义模板" class="headerlink" title="10.2.4 在templates目录中定义模板"></a>10.2.4 在templates目录中定义模板</h5><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2f5.png" alt="image-20200323085834206"></p><h5 id="10-2-5-测试访问"><a href="#10-2-5-测试访问" class="headerlink" title="10.2.5 测试访问"></a>10.2.5 测试访问</h5><pre><code class="hljs http"><span class="hljs-attribute">http://localhost:8989/springboot_day3/hello/hello</span></code></pre><h5 id="10-2-6-查看结果"><a href="#10-2-6-查看结果" class="headerlink" title="10.2.6 查看结果"></a>10.2.6 查看结果</h5><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2fb.png" alt="image-20200323085948499"></p><h5 id="10-2-7-开启直接访问html页面"><a href="#10-2-7-开启直接访问html页面" class="headerlink" title="10.2.7 开启直接访问html页面"></a>10.2.7 开启直接访问html页面</h5><pre><code class="hljs properties"><span class="hljs-meta">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/templates/,classpath:/static/</span></code></pre><h5 id="10-2-8-测试结果"><a href="#10-2-8-测试结果" class="headerlink" title="10.2.8 测试结果"></a>10.2.8 测试结果</h5><pre><code class="hljs http"><span class="hljs-attribute">http://localhost:8989/springboot_day3/index.html</span></code></pre><p>![image-20200323090142705](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323090142705.png)</p><h3 id="10-3-Thymeleaf基本使用"><a href="#10-3-Thymeleaf基本使用" class="headerlink" title="10.3 Thymeleaf基本使用"></a>10.3 Thymeleaf基本使用</h3><p><code>使用时必须在页面中加入thymeleaf如下命名空间:</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></code></pre><h5 id="10-3-1-展示单个数据"><a href="#10-3-1-展示单个数据" class="headerlink" title="10.3.1 展示单个数据"></a>10.3.1 展示单个数据</h5><h6 id="a-设置数据"><a href="#a-设置数据" class="headerlink" title="a. 设置数据"></a>a. 设置数据</h6><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>); 或 request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>);</code></pre><h6 id="b-获取数据"><a href="#b-获取数据" class="headerlink" title="b. 获取数据"></a>b. 获取数据</h6><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>  ---&gt;获取数据</code></pre><p><code>注意:在springboot2.x版本中必须加入国际化配置文件才能正常展示:</code></p><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f301.png" alt="image-20200323100724749"></p><p>![image-20200323100747881](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323100747881.png)</p><h6 id="c-获取并解析含有html标签数据"><a href="#c-获取并解析含有html标签数据" class="headerlink" title="c. 获取并解析含有html标签数据"></a>c. 获取并解析含有html标签数据</h6><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;&lt;a href=&#x27;&#x27;&gt;张三&lt;/a&gt;&quot;</span>);model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小陈&quot;</span>);</code></pre><ul><li>直接获取原样输出</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></code></pre><p>![image-20200323100956740](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323100956740.png)</p><ul><li>获取并解析</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></code></pre><p>![image-20200323101457134](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323101457134.png)</p><ul><li><p>将数据赋值给表单元素</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></code></pre><p>![image-20200323103452620](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323103452620.png)</p></li></ul><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.使用 th:text=&quot;$&#123;属性名&#125;&quot;  获取对应数据,获取数据时会将对应标签中数据清空,因此最好是空标签</span><span class="hljs-code">2.使用 th:utext=&quot;$&#123;属性名&#125;&quot; 获取对应的数据,可以将数据中html先解析在渲染到页面</span><span class="hljs-code">3.使用 th:value=&quot;$&#123;属性名&#125;&quot; 获取数据直接作为表单元素value属性</span></code></pre><h5 id="10-3-2-展示对象数据"><a href="#10-3-2-展示对象数据" class="headerlink" title="10.3.2 展示对象数据"></a>10.3.2 展示对象数据</h5><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;21&quot;</span>,<span class="hljs-string">&quot;xiaochen&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-keyword">new</span> Date()));</code></pre><pre><code class="hljs html">id:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>name:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>age:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>bir: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.bir&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  ====  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(user.bir, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 日期格式化</code></pre><h5 id="10-3-3-条件展示数据"><a href="#10-3-3-条件展示数据" class="headerlink" title="10.3.3 条件展示数据"></a>10.3.3 条件展示数据</h5><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;21&quot;</span>,<span class="hljs-string">&quot;xiaochen&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-keyword">new</span> Date()));</code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.age&#125; eq 23&quot;</span>&gt;</span>  青年<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 运算符</span><span class="hljs-code">    gt：great than（大于）&gt;</span><span class="hljs-code">    ge：great equal（大于等于）&gt;=</span><span class="hljs-code">    eq：equal（等于）==</span><span class="hljs-code">    lt：less than（小于）&lt;</span><span class="hljs-code">    le：less equal（小于等于）&lt;=</span><span class="hljs-code">    ne：not equal（不等于）!=</span></code></pre><h5 id="10-3-4-展示多条数据"><a href="#10-3-4-展示多条数据" class="headerlink" title="10.3.4 展示多条数据"></a>10.3.4 展示多条数据</h5><ul><li>直接遍历集合</li></ul><pre><code class="hljs java"></code></pre><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(user.bir,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre><ul><li>遍历时获取遍历状态</li></ul><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.count&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取遍历次数  count 从1开始 index 从0开始   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.odd&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取当前遍历是否是奇数行   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.even&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取当前遍历是否是偶数行   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.size&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取当前集合的总条数<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre><h5 id="10-3-5-引入静态资源"><a href="#10-3-5-引入静态资源" class="headerlink" title="10.3.5 引入静态资源"></a>10.3.5 引入静态资源</h5><p><code>使用thymeleaf模板项目中静态资源默认放在resources路径小static目录中</code></p><ul><li><p>项目中放入对应静态资源</p><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2e4.png" alt="image-20200323142307411"></p></li><li><p>页面中引入</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/index.css&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></li></ul><h2 id="11-springboot集成mybatis"><a href="#11-springboot集成mybatis" class="headerlink" title="11. springboot集成mybatis"></a>11. springboot集成mybatis</h2><h5 id="11-1-引入依赖"><a href="#11-1-引入依赖" class="headerlink" title="11.1 引入依赖"></a>11.1 引入依赖</h5><pre><code class="hljs markdown"><span class="xml"><span class="hljs-comment">&lt;!--整合mybatis--&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="hljs-code">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><span class="hljs-code">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><span class="hljs-code">    &lt;version&gt;1.3.3&lt;/version&gt;</span><span class="hljs-code">&lt;/dependency&gt;</span><span class="hljs-code"></span><span class="hljs-code">&lt;dependency&gt;</span><span class="hljs-code">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><span class="hljs-code">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><span class="hljs-code">&lt;version&gt;1.1.12&lt;/version&gt;</span><span class="hljs-code">&lt;/dependency&gt;</span><span class="hljs-code"></span><span class="hljs-code">&lt;dependency&gt;</span><span class="hljs-code">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><span class="hljs-code">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><span class="hljs-code">    &lt;version&gt;5.1.38&lt;/version&gt;</span><span class="hljs-code">&lt;/dependency&gt;</span><span class="hljs-code"></span><span class="hljs-code">&gt;说明:由于springboot整合mybatis版本中默认依赖mybatis 因此不需要额外引入mybati版本,否则会出现冲突</span></code></pre><h5 id="11-2-配置配置文件"><a href="#11-2-配置配置文件" class="headerlink" title="11.2 配置配置文件"></a>11.2 配置配置文件</h5><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">mvc:</span>    <span class="hljs-attr">view:</span>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/</span>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">org.apache.commons.dbcp.BasicDataSource</span>   <span class="hljs-comment">#指定连接池类型</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span>        <span class="hljs-comment">#指定驱动</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/cmfz</span>           <span class="hljs-comment">#指定url</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><span class="hljs-comment">#指定用户名</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span> <span class="hljs-comment">#指定密码</span></code></pre><h5 id="11-3-加入mybatis配置"><a href="#11-3-加入mybatis配置" class="headerlink" title="11.3 加入mybatis配置"></a>11.3 加入mybatis配置</h5><pre><code class="hljs yml"><span class="hljs-comment">#配置文件中加入如下配置:</span><span class="hljs-attr">mybatis:</span>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:com/baizhi/mapper/*.xml</span>  <span class="hljs-comment">#指定mapper配置文件位置</span>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.baizhi.entity</span>              <span class="hljs-comment">#指定起别名来的类</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">//入口类中加入如下配置:</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span>   <span class="hljs-comment">//必须在入口类中加入这个配置</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(Application.class,args);    &#125;&#125;</code></pre><h5 id="11-4-建表"><a href="#11-4-建表" class="headerlink" title="11.4 建表"></a>11.4 建表</h5><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`t_clazz`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`no`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">90</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;</code></pre><h5 id="11-5-开发实体类"><a href="#11-5-开发实体类" class="headerlink" title="11.5 开发实体类"></a>11.5 开发实体类</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clazz</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String no;    <span class="hljs-comment">//get set 方法省略....</span>&#125;</code></pre><h5 id="11-6-开发DAO接口以及Mapper"><a href="#11-6-开发DAO接口以及Mapper" class="headerlink" title="11.6 开发DAO接口以及Mapper"></a>11.6 开发DAO接口以及Mapper</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ClazzDAO</span> </span>&#123;    <span class="hljs-function">List&lt;Clazz&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.baizhi.dao.ClazzDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Clazz&quot;</span>&gt;</span>        select * from t_clazz     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h5 id="11-7-开发Service以及实现"><a href="#11-7-开发Service以及实现" class="headerlink" title="11.7 开发Service以及实现"></a>11.7 开发Service以及实现</h5><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ClazzService</span> </span>&#123;    <span class="hljs-function">List&lt;Clazz&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//实现</span><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClazzServiceImpl</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">ClazzService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ClazzDAO clazzDAO;        <span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Clazz&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> clazzDAO.findAll();    &#125;&#125;</code></pre><h5 id="11-8-引入测试依赖"><a href="#11-8-引入测试依赖" class="headerlink" title="11.8 引入测试依赖"></a>11.8 引入测试依赖</h5><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="11-9-编写测试类"><a href="#11-9-编写测试类" class="headerlink" title="11.9 编写测试类"></a>11.9 编写测试类</h5><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClazzService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ClazzService clazzService;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        List&lt;Clazz&gt; all = clazzService.findAll();        <span class="hljs-keyword">for</span> (Clazz clazz : all) &#123;            System.out.println(clazz);        &#125;    &#125;&#125;</code></pre><h2 id="12-开启jsp页面热部署"><a href="#12-开启jsp页面热部署" class="headerlink" title="12.开启jsp页面热部署"></a>12.开启jsp页面热部署</h2><h5 id="12-1-引言"><a href="#12-1-引言" class="headerlink" title="12.1 引言"></a>12.1 引言</h5><blockquote><p><code>在springboot中默认对jsp运行为生产模式,不允许修改内容保存后立即生效,因此在开发过程需要调试jsp页面每次需要重新启动服务器这样极大影响了我们的效率,为此springboot中提供了可以将默认的生产模式修改为调试模式,改为调试模式后就可以保存立即生效,如何配置为测试模式需要在配置文件中加入如下配置即可修改为开发模式。</code></p></blockquote><h5 id="12-2-配置开启测试模式"><a href="#12-2-配置开启测试模式" class="headerlink" title="12.2 配置开启测试模式"></a>12.2 配置开启测试模式</h5><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span>  <span class="hljs-attr">jsp-servlet:</span>    <span class="hljs-attr">init-parameters:</span>      <span class="hljs-attr">development:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启jsp页面的调试模式</span></code></pre><hr><h2 id="13-springboot中devtools热部署"><a href="#13-springboot中devtools热部署" class="headerlink" title="13.springboot中devtools热部署"></a>13.springboot中devtools热部署</h2><h5 id="13-1-引言"><a href="#13-1-引言" class="headerlink" title="13.1  引言"></a>13.1  引言</h5><blockquote><p>​    <code>为了进一步提高开发效率,springboot为我们提供了全局项目热部署,日后在开发过程中修改了部分代码以及相关配置文件后,不需要每次重启使修改生效,在项目中开启了springboot全局热部署之后只需要在修改之后等待几秒即可使修改生效。</code></p></blockquote><h5 id="13-2-开启热部署"><a href="#13-2-开启热部署" class="headerlink" title="13.2 开启热部署"></a>13.2 开启热部署</h5><h6 id="13-2-1-项目中引入依赖"><a href="#13-2-1-项目中引入依赖" class="headerlink" title="13.2.1 项目中引入依赖"></a>13.2.1 项目中引入依赖</h6><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h6 id="13-2-2-设置idea中支持自动编译"><a href="#13-2-2-设置idea中支持自动编译" class="headerlink" title="13.2.2 设置idea中支持自动编译"></a>13.2.2 设置idea中支持自动编译</h6><pre><code class="hljs markdown"><span class="hljs-section"># 1.开启自动编译</span><span class="hljs-code">Preferences | Build, Execution, Deployment | Compiler -&gt; 勾选上 Build project automatically 这个选项</span><span class="hljs-code"></span><span class="hljs-code"># 2.开启允许在运行过程中修改文件</span><span class="hljs-code">ctrl + alt + shift + / ----&gt;选择1.Registry ---&gt; 勾选 compiler.automake.allow.when.app.running 这个选项</span></code></pre><h6 id="13-2-3-启动项目检测热部署是否生效"><a href="#13-2-3-启动项目检测热部署是否生效" class="headerlink" title="13.2.3 启动项目检测热部署是否生效"></a>13.2.3 启动项目检测热部署是否生效</h6><pre><code class="hljs markdown"><span class="hljs-section"># 1.启动出现如下日志代表生效</span></code></pre><pre><code class="hljs verilog"><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span><span class="hljs-variable">.566</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] com<span class="hljs-variable">.baizhi</span><span class="hljs-variable">.InitApplication</span>               : Starting InitApplication on chenyannandeMacBook-Pro<span class="hljs-variable">.local</span> <span class="hljs-keyword">with</span> PID <span class="hljs-number">4496</span> (/Users/chenyannan/IdeaProjects/ideacode/springboot_day1/target/classes started by chenyannan in /Users/chenyannan/IdeaProjects/ideacode/springboot_day1)<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span><span class="hljs-variable">.567</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] com<span class="hljs-variable">.baizhi</span><span class="hljs-variable">.InitApplication</span>               : The following profiles are active: dev<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span><span class="hljs-variable">.612</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.context</span><span class="hljs-variable">.embedded</span><span class="hljs-variable">.AnnotationConfigEmbeddedWebApplicationContext</span>@<span class="hljs-number">66</span>d799c5: startup date [Wed Jul <span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span> CST <span class="hljs-number">2019</span>]; root of <span class="hljs-keyword">context</span> hierarchy<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">18</span><span class="hljs-variable">.782</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] s<span class="hljs-variable">.b</span><span class="hljs-variable">.c</span><span class="hljs-variable">.e</span><span class="hljs-variable">.t</span><span class="hljs-variable">.TomcatEmbeddedServletContainer</span> : Tomcat initialized <span class="hljs-keyword">with</span> port(s): <span class="hljs-number">8989</span> (http)<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">18</span><span class="hljs-variable">.796</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] o<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardService</span>   : Starting service [Tomcat]<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">18</span><span class="hljs-variable">.797</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardEngine</span>  : Starting Servlet Engine: Apache Tomcat/<span class="hljs-number">8</span><span class="hljs-variable">.5</span><span class="hljs-variable">.20</span></code></pre><blockquote><p><code>注意:日志出现restartedMain代表已经生效,在使用热部署时如果遇到修改之后不能生效,请重试重启项目在试</code></p></blockquote><h2 id="14-logback日志的集成"><a href="#14-logback日志的集成" class="headerlink" title="14. logback日志的集成"></a>14. logback日志的集成</h2><h5 id="14-1-logback简介"><a href="#14-1-logback简介" class="headerlink" title="14.1 logback简介"></a>14.1 logback简介</h5><blockquote><p>Logback是由<a href="https://baike.baidu.com/item/log4j/480673">log4j</a>创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access。是对log4j日志展示进一步改进</p></blockquote><h5 id="14-2-日志的级别"><a href="#14-2-日志的级别" class="headerlink" title="14.2 日志的级别"></a>14.2 日志的级别</h5><pre><code>&gt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; OFF&gt;&gt; 日志级别由低到高:  `日志级别越高输出的日志信息越少`</code></pre><h5 id="14-3-项目中日志分类"><a href="#14-3-项目中日志分类" class="headerlink" title="14.3 项目中日志分类"></a>14.3 项目中日志分类</h5><pre><code>&gt; 日志分为两类&gt;&gt;  一种是rootLogger :     用来监听项目中所有的运行日志 包括引入依赖jar中的日志 &gt;&gt;  一种是logger :         用来监听项目中指定包中的日志信息</code></pre><h5 id="14-4-java项目中使用"><a href="#14-4-java项目中使用" class="headerlink" title="14.4 java项目中使用"></a>14.4 java项目中使用</h5><h6 id="14-4-1-logback配置文件"><a href="#14-4-1-logback配置文件" class="headerlink" title="14.4.1 logback配置文件"></a>14.4.1 logback配置文件</h6><pre><code>    &gt; logback的配置文件必须放在项目根目录中 且名字必须为logback.xml</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义项目中日志输出位置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--定义项目的日志输出格式--&gt;</span>        <span class="hljs-comment">&lt;!--定义项目的日志输出格式--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span> [%p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %m %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!--项目中跟日志控制--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;stdout&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>    <span class="hljs-comment">&lt;!--项目中指定包日志控制--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.baizhi.dao&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="14-4-2-具体类中使用日志"><a href="#14-4-2-具体类中使用日志" class="headerlink" title="14.4.2 具体类中使用日志"></a>14.4.2 具体类中使用日志</h6><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">//声明日志成员</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(HelloController.class);    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;======hello world=======&quot;</span>);        logger.debug(<span class="hljs-string">&quot;DEBUG&quot;</span>);        logger.info(<span class="hljs-string">&quot;INFO&quot;</span>);        logger.warn(<span class="hljs-string">&quot;WARN&quot;</span>);        logger.error(<span class="hljs-string">&quot;ERROR&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><h6 id="14-4-3-使用默认日志配置"><a href="#14-4-3-使用默认日志配置" class="headerlink" title="14.4.3 使用默认日志配置"></a>14.4.3 使用默认日志配置</h6><pre><code class="hljs yml"><span class="hljs-attr">logging:</span>  <span class="hljs-attr">level:</span>    <span class="hljs-attr">root:</span> <span class="hljs-string">debug</span>    <span class="hljs-attr">com.baizhi.dao:</span> <span class="hljs-string">debug</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">/Users/chenyannan/aa.log</span>  <span class="hljs-attr">file:</span> <span class="hljs-string">bbb.log</span></code></pre><hr><h2 id="15-切面编程"><a href="#15-切面编程" class="headerlink" title="15. 切面编程"></a>15. 切面编程</h2><h5 id="15-1-引言"><a href="#15-1-引言" class="headerlink" title="15.1 引言"></a>15.1 引言</h5><blockquote><p>springboot是对原有项目中spring框架和springmvc的进一步封装,因此在springboot中同样支持spring框架中AOP切面编程,不过在springboot中为了快速开发仅仅提供了注解方式的切面编程.</p></blockquote><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2e6.png" alt="image-20200327115039033"></p><h5 id="15-2-使用"><a href="#15-2-使用" class="headerlink" title="15.2 使用"></a>15.2 使用</h5><h6 id="15-2-1-引入依赖"><a href="#15-2-1-引入依赖" class="headerlink" title="15.2.1 引入依赖"></a>15.2.1 引入依赖</h6><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h6 id="15-2-2-相关注解"><a href="#15-2-2-相关注解" class="headerlink" title="15.2.2 相关注解"></a>15.2.2 相关注解</h6><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    <span class="hljs-doctag">@Aspect</span> 用来类上,代表这个类是一个切面</span><span class="hljs-comment">    <span class="hljs-doctag">@Before</span> 用在方法上代表这个方法是一个前置通知方法 </span><span class="hljs-comment">    <span class="hljs-doctag">@After</span> 用在方法上代表这个方法是一个后置通知方法 <span class="hljs-doctag">@Around</span> 用在方法上代表这个方法是一个环绕的方法</span><span class="hljs-comment">    <span class="hljs-doctag">@Around</span> 用在方法上代表这个方法是一个环绕的方法</span><span class="hljs-comment">**/</span></code></pre><h6 id="15-2-3-前置切面"><a href="#15-2-3-前置切面" class="headerlink" title="15.2.3 前置切面"></a>15.2.3 前置切面</h6><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-meta">@Before(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);        joinPoint.getTarget();<span class="hljs-comment">//目标对象</span>        joinPoint.getSignature();<span class="hljs-comment">//方法签名</span>        joinPoint.getArgs();<span class="hljs-comment">//方法参数</span>    &#125;&#125;</code></pre><h6 id="15-2-4-后置切面"><a href="#15-2-4-后置切面" class="headerlink" title="15.2.4 后置切面"></a>15.2.4 后置切面</h6><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-meta">@After(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);        joinPoint.getTarget();<span class="hljs-comment">//目标对象</span>        joinPoint.getSignature();<span class="hljs-comment">//方法签名</span>        joinPoint.getArgs();<span class="hljs-comment">//方法参数</span>    &#125;&#125;</code></pre><pre><code>&gt; **注意: 前置通知和后置通知都没有返回值,方法参数都为joinpoint**</code></pre><h6 id="15-2-5-环绕切面"><a href="#15-2-5-环绕切面" class="headerlink" title="15.2.5 环绕切面"></a>15.2.5 环绕切面</h6><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-meta">@Around(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">before</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(<span class="hljs-string">&quot;进入环绕通知&quot;</span>);        proceedingJoinPoint.getTarget();<span class="hljs-comment">//目标对象</span>        proceedingJoinPoint.getSignature();<span class="hljs-comment">//方法签名</span>        proceedingJoinPoint.getArgs();<span class="hljs-comment">//方法参数</span>        Object proceed = proceedingJoinPoint.proceed();<span class="hljs-comment">//放行执行目标方法</span>        System.out.println(<span class="hljs-string">&quot;目标方法执行之后回到环绕通知&quot;</span>);        <span class="hljs-keyword">return</span> proceed;<span class="hljs-comment">//返回目标方法返回值</span>    &#125;&#125;</code></pre><blockquote><p><strong><code>注意: 环绕通知存在返回值,参数为ProceedingJoinPoint,如果执行放行,不会执行目标方法,一旦放行必须将目标方法的返回值返回,否则调用者无法接受返回数据</code></strong></p></blockquote><hr><h2 id="13-文件上传下载"><a href="#13-文件上传下载" class="headerlink" title="13. 文件上传下载"></a>13. 文件上传下载</h2><h5 id="13-1-文件上传"><a href="#13-1-文件上传" class="headerlink" title="13.1 文件上传"></a>13.1 文件上传</h5><p>定义:<code>用户访问当前系统,将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</code></p><h6 id="13-1-1-准备上传页面"><a href="#13-1-1-准备上传页面" class="headerlink" title="13.1.1 准备上传页面"></a>13.1.1 准备上传页面</h6><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;路径....&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">1. 表单提交方式必须是post</span><span class="hljs-comment">2. 表单的enctype属性必须为multipart/form-data</span><span class="hljs-comment">3. 后台接受变量名字要与文件选择name属性一致</span><span class="hljs-comment">--&gt;</span></code></pre><h6 id="13-1-2-编写控制器"><a href="#13-1-2-编写控制器" class="headerlink" title="13.1.2 编写控制器"></a>13.1.2 编写控制器</h6><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;  <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(MultipartFile aa, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        String realPath = request.getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);        aa.transferTo(<span class="hljs-keyword">new</span> File(realPath,aa.getOriginalFilename()));<span class="hljs-comment">//文件上传</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;  &#125;&#125;</code></pre><h6 id="13-1-3-修改文件上传大小"><a href="#13-1-3-修改文件上传大小" class="headerlink" title="13.1.3 修改文件上传大小"></a>13.1.3 修改文件上传大小</h6><pre><code class="hljs yml"><span class="hljs-comment">#上传时出现如下异常:  上传文件的大小超出默认配置  默认10M</span><span class="hljs-attr">nested exception is java.lang.IllegalStateException:</span> <span class="hljs-string">org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException:</span> <span class="hljs-string">the</span> <span class="hljs-string">request</span> <span class="hljs-string">was</span> <span class="hljs-string">rejected</span> <span class="hljs-string">because</span> <span class="hljs-string">its</span> <span class="hljs-string">size</span> <span class="hljs-string">(38443713)</span> <span class="hljs-string">exceeds</span> <span class="hljs-string">the</span> <span class="hljs-string">configured</span> <span class="hljs-string">maximum</span> <span class="hljs-string">(10485760)</span><span class="hljs-comment">#修改上传文件大小:</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">http:</span>    <span class="hljs-attr">multipart:</span>       <span class="hljs-attr">max-request-size:</span> <span class="hljs-number">209715200</span>  <span class="hljs-comment">#用来控制文件上传大小的限制</span>       <span class="hljs-attr">max-file-size:</span> <span class="hljs-number">209715200</span> <span class="hljs-comment">#用来指定服务端最大文件大小   </span><span class="hljs-string">spring.servlet.multipart.max-file-size=500MB</span><span class="hljs-string">spring.servlet.multipart.max-request-size=500MB</span></code></pre><h5 id="13-2-文件下载"><a href="#13-2-文件下载" class="headerlink" title="13.2 文件下载"></a>13.2 文件下载</h5><h6 id="13-2-1-提供下载文件链接"><a href="#13-2-1-提供下载文件链接" class="headerlink" title="13.2.1 提供下载文件链接"></a>13.2.1 提供下载文件链接</h6><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../file/download?fileName=corejava.txt&quot;</span>&gt;</span>corejava.txt<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h6 id="13-2-2-开发控制器"><a href="#13-2-2-开发控制器" class="headerlink" title="13.2.2 开发控制器"></a>13.2.2 开发控制器</h6><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(String fileName, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        String realPath = request.getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);        FileInputStream is = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(realPath, fileName));        ServletOutputStream os = response.getOutputStream();        response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>,<span class="hljs-string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));        IOUtils.copy(is,os);        IOUtils.closeQuietly(is);        IOUtils.closeQuietly(os);    &#125;</code></pre><hr><h2 id="14-拦截器"><a href="#14-拦截器" class="headerlink" title="14. 拦截器"></a>14. 拦截器</h2><h5 id="14-1-开发拦截器"><a href="#14-1-开发拦截器" class="headerlink" title="14.1 开发拦截器"></a>14.1 开发拦截器</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;======1=====&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//返回true 放行  返回false阻止</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;=====2=====&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;=====3=====&quot;</span>);    &#125;&#125;</code></pre><h5 id="14-2-配置拦截器"><a href="#14-2-配置拦截器" class="headerlink" title="14.2 配置拦截器"></a>14.2 配置拦截器</h5><pre><code class="hljs java"><span class="hljs-comment">//1.x中拦截器配置</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        <span class="hljs-comment">//添加拦截器</span>        registry.addInterceptor(<span class="hljs-keyword">new</span> MyInterceptor())            .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<span class="hljs-comment">//定义拦截路径</span>            .excludePathPatterns(<span class="hljs-string">&quot;/hello/**&quot;</span>); <span class="hljs-comment">//排除拦截路径</span>    &#125;&#125;<span class="hljs-comment">//2.x中拦截器配置</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="hljs-keyword">new</span> MyInterceptor())<span class="hljs-comment">//添加拦截器</span>                .addPathPatterns(<span class="hljs-string">&quot;/hello/**&quot;</span>)<span class="hljs-comment">//添加拦截的请求路径</span>                .excludePathPatterns(<span class="hljs-string">&quot;/hello/world&quot;</span>);<span class="hljs-comment">//添加排除那些请求路径不经过拦截器</span>    &#125;&#125;</code></pre><p><code>注意:在springboot2.x版本中自定义拦截器之后出现项目中静态资源 404情况,需要在自定义拦截器的配置中加入如下配置即可:</code></p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="hljs-keyword">new</span> LoginInterceptor())                .addPathPatterns(<span class="hljs-string">&quot;/file/**&quot;</span>)                .excludePathPatterns(<span class="hljs-string">&quot;/js/**&quot;</span>, <span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/files/**&quot;</span>);<span class="hljs-comment">//放行静态资源 静态资源被认为是一个控制器请求</span>    &#125;<span class="hljs-comment">//springboot2.x 静态资源在自定义拦截器之后无法访问的解决方案</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>) <span class="hljs-comment">//代表以什么样的请求路径访问静态资源</span>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>)                .addResourceLocations(<span class="hljs-string">&quot;classpath:/templates/&quot;</span>);    &#125;&#125;</code></pre><hr><h2 id="15-war包部署"><a href="#15-war包部署" class="headerlink" title="15. war包部署"></a>15. war包部署</h2><h5 id="15-1-设置打包方式为war"><a href="#15-1-设置打包方式为war" class="headerlink" title="15.1 设置打包方式为war"></a>15.1 设置打包方式为war</h5><blockquote><p>​    <strong><packaging>war</packaging></strong></p></blockquote><h5 id="15-2-在插件中指定入口类"><a href="#15-2-在插件中指定入口类" class="headerlink" title="15.2 在插件中指定入口类"></a>15.2 在插件中指定入口类</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-comment">&lt;!--使用热部署出现中文乱码解决方案--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span>          <span class="hljs-comment">&lt;!--增加jvm参数--&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">jvmArguments</span>&gt;</span>          <span class="hljs-comment">&lt;!--指定入口类--&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.baizhi.Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h5 id="15-3-排除内嵌的tomcat"><a href="#15-3-排除内嵌的tomcat" class="headerlink" title="15.3 排除内嵌的tomcat"></a>15.3 排除内嵌的tomcat</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>   <span class="hljs-comment">&lt;!--去掉内嵌tomcat--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <span class="hljs-comment">&lt;!--去掉使用内嵌tomcat解析jsp--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="15-4-配置入口类"><a href="#15-4-配置入口类" class="headerlink" title="15.4 配置入口类"></a>15.4 配置入口类</h5><pre><code class="hljs java"><span class="hljs-comment">//1.继承SpringBootServletInitializer</span><span class="hljs-comment">//2.覆盖configure方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(Application.class,args);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;        <span class="hljs-keyword">return</span> builder.sources(Application.class);    &#125;&#125;</code></pre><h5 id="15-5-打包测试"><a href="#15-5-打包测试" class="headerlink" title="15.5 打包测试"></a>15.5 打包测试</h5><pre><code class="hljs java"><span class="hljs-comment">/* 一旦使用war包部署注意:</span><span class="hljs-comment">1. application.yml 中配置port context-path 失效</span><span class="hljs-comment">2. 访问时使用打成war包的名字和外部tomcat端口号进行访问项目</span><span class="hljs-comment">*/</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2021/01/07/Vue/"/>
    <url>/2021/01/07/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue实战"><a href="#Vue实战" class="headerlink" title="Vue实战"></a>Vue实战</h1><h2 id="1-Vue-引言"><a href="#1-Vue-引言" class="headerlink" title="1. Vue 引言"></a>1. Vue 引言</h2><blockquote><p><code>渐进式</code> JavaScript 框架   –摘自官网</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 渐进式</span><span class="hljs-bullet">   1.</span> 易用  html css javascript<span class="hljs-bullet">   2.</span> 高效  开发前端页面 非常高效 <span class="hljs-bullet">   3.</span> 灵活  开发灵活 多样性<span class="hljs-section"># 总结</span><span class="hljs-code">Vue 是一个javascript 框架</span><span class="hljs-code"></span><span class="hljs-code"># 后端服务端开发人员: </span><span class="hljs-code">Vue 渐进式javascript框架: 让我们通过操作很少的DOM,甚至不需要操作页面中任何DOM元素,就很容易的完成数据和视图绑定  双向绑定 MVVM  </span><span class="hljs-code"></span><span class="hljs-code">注意: 日后在使用Vue过程中页面中不要在引入Jquery框架</span><span class="hljs-code"></span><span class="hljs-code">htmlcss---&gt;javascript -----&gt;jquery----&gt;angularjs -----&gt; Vue</span><span class="hljs-code"> </span><span class="hljs-code"> # Vue 作者</span><span class="hljs-code">  尤雨溪   国内的    </span></code></pre><hr><h2 id="2-Vue入门"><a href="#2-Vue入门" class="headerlink" title="2. Vue入门"></a>2. Vue入门</h2><h3 id="2-1-下载Vuejs"><a href="#2-1-下载Vuejs" class="headerlink" title="2.1    下载Vuejs"></a>2.1    下载Vuejs</h3><pre><code class="hljs js"><span class="hljs-comment">//开发版本:</span>&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<span class="hljs-comment">//生产版本:</span>&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</code></pre><h3 id="2-2-Vue第一个入门应用"><a href="#2-2-Vue第一个入门应用" class="headerlink" title="2.2 Vue第一个入门应用"></a>2.2 Vue第一个入门应用</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>       &#123;&#123; msg &#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;       <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>           &#123;&#123; username &#125;&#125;           <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">       <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">           el:<span class="hljs-string">&quot;#app&quot;</span>,  <span class="hljs-comment">//element 用来给Vue实例定义一个作用范围</span></span><span class="javascript">           data:&#123;      <span class="hljs-comment">//用来给Vue实例定义一些相关数据</span></span><span class="javascript">               msg:<span class="hljs-string">&quot;百知欢迎你,期待你的加入!&quot;</span>,</span><span class="javascript">               username:<span class="hljs-string">&quot;hello Vue!&quot;</span>,</span><span class="javascript">               pwd :<span class="hljs-string">&quot;12345&quot;</span>,</span>           &#125;,       &#125;);   <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.vue实例(对象)中el属性: 代表Vue的作用范围  日后在Vue的作用范围内都可以使用Vue的语法</span><span class="hljs-code">2.vue实例(对象)中data属性: 用来给Vue实例绑定一些相关数据, 绑定的数据可以通过&#123;&#123;变量名&#125;&#125;在Vue作用范围内取出</span><span class="hljs-code">3.在使用&#123;&#123;&#125;&#125;进行获取data中数据时,可以在&#123;&#123;&#125;&#125;中书写表达式,运算符,调用相关方法,以及逻辑运算等</span><span class="hljs-code">4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是推荐使用 id选择器</span></code></pre><hr><h2 id="3-v-text和v-html"><a href="#3-v-text和v-html" class="headerlink" title="3. v-text和v-html"></a>3. v-text和v-html</h2><h3 id="3-1-v-text"><a href="#3-1-v-text" class="headerlink" title="3.1 v-text"></a>3.1 v-text</h3><blockquote><p><code>v-text</code>:用来获取data中数据将数据以文本的形式渲染到指定标签内部             类似于javascript 中 innerText</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">          el:<span class="hljs-string">&quot;#app&quot;</span>,</span>          data:&#123;<span class="javascript">              message:<span class="hljs-string">&quot;百知欢迎您&quot;</span></span>          &#125;      &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.&#123;&#123;&#125;&#125;(插值表达式)和v-text获取数据的区别在于 </span><span class="hljs-code">a.使用v-text取值会将标签中原有的数据覆盖 使用插值表达式的形式不会覆盖标签原有的数据</span><span class="hljs-code">b.使用v-text可以避免在网络环境较差的情况下出现插值闪烁</span></code></pre><h3 id="3-2-v-html"><a href="#3-2-v-html" class="headerlink" title="3.2 v-html"></a>3.2 v-html</h3><blockquote><p><code>v-html</code>:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似于javascript中 innerHTML</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span>            data:&#123;<span class="handlebars"><span class="xml">                message:&quot;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#x27;</span>&gt;</span>百知欢迎您<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&quot;</span></span>            &#125;        &#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><hr><h2 id="4-vue中事件绑定-v-on"><a href="#4-vue中事件绑定-v-on" class="headerlink" title="4.vue中事件绑定(v-on)"></a>4.vue中事件绑定(v-on)</h2><h3 id="4-1-绑定事件基本语法"><a href="#4-1-绑定事件基本语法" class="headerlink" title="4.1 绑定事件基本语法"></a>4.1 绑定事件基本语法</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄:&#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我改变年龄&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;changeage&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">          el:<span class="hljs-string">&quot;#app&quot;</span>,</span>          data:&#123;<span class="javascript">              message:<span class="hljs-string">&quot;hello 欢迎来到百知课堂!&quot;</span>,</span>              age:23,          &#125;,<span class="javascript">          methods:&#123;  <span class="hljs-comment">//methods 用来定义vue中时间</span></span><span class="javascript">              changeage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                  alert(<span class="hljs-string">&#x27;点击触发&#x27;</span>);</span>              &#125;          &#125;      &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">事件  事件源:发生事件dom元素  事件: 发生特定的动作  click....  监听器  发生特定动作之后的事件处理程序 通常是js中函数</span><span class="hljs-code">1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如  v-on:click</span><span class="hljs-code">2.在v-on:事件名的赋值语句中是当前时间触发调用的函数名</span><span class="hljs-code">3.在vue中事件的函数统一定义在Vue实例的methods属性中</span><span class="hljs-code">4.在vue定义的事件中this指的就是当前的Vue实例,日后可以在事件中通过使用this获取Vue实例中相关数据</span></code></pre><h3 id="4-2-Vue中事件的简化语法"><a href="#4-2-Vue中事件的简化语法" class="headerlink" title="4.2 Vue中事件的简化语法"></a>4.2 Vue中事件的简化语法</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;通过v-on事件修改年龄每次+1&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;changeage&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;通过@绑定时间修改年龄每次-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;editage&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">         el:<span class="hljs-string">&quot;#app&quot;</span>,  <span class="hljs-comment">//element: 用来指定vue作用范围</span></span>         data:&#123;             age:23,<span class="javascript">         &#125;,    <span class="hljs-comment">//data   : 用来定义vue实例中相关数据</span></span>         methods:&#123;<span class="javascript">             changeage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                 <span class="hljs-built_in">this</span>.age++;</span>             &#125;,<span class="javascript">             editage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                 <span class="hljs-built_in">this</span>.age--;</span>             &#125;<span class="javascript">         &#125;  <span class="hljs-comment">//methods: 用来定义事件的处理函数</span></span>      &#125;);  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.日后在vue中绑定事件时可以通过@符号形式 简化  v-on 的事件绑定</span></code></pre><h3 id="4-3-Vue事件函数两种写法"><a href="#4-3-Vue事件函数两种写法" class="headerlink" title="4.3 Vue事件函数两种写法"></a>4.3 Vue事件函数两种写法</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变count的值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changecount&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">         el:<span class="hljs-string">&quot;#app&quot;</span>,</span>         data:&#123;             count:1,         &#125;,         methods:&#123;             /*changecount:function()&#123;<span class="javascript">                 <span class="hljs-built_in">this</span>.count++;</span>             &#125;*/             changecount()&#123;<span class="javascript">                 <span class="hljs-built_in">this</span>.count++;</span>             &#125;         &#125;      &#125;);  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.在Vue中事件定义存在两种写法  一种是 函数名:function()&#123;&#125;  推荐    一种是  函数名()&#123;&#125; 推荐</span></code></pre><h3 id="4-4-Vue事件参数传递"><a href="#4-4-Vue事件参数传递" class="headerlink" title="4.4 Vue事件参数传递"></a>4.4 Vue事件参数传递</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变count为指定的值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changecount(23,&#x27;xiaohei&#x27;)&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">         el:<span class="hljs-string">&quot;#app&quot;</span>,</span>         data:&#123;             count:1,         &#125;,         methods:&#123;<span class="javascript">             <span class="hljs-comment">//定义changecount</span></span>             changecount(count,name)&#123;<span class="javascript">                 <span class="hljs-built_in">this</span>.count = count;</span>                 alert(name);             &#125;         &#125;      &#125;);  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.在使用事件时,可以直接在事件调用出给事件进行参数传递,在事件定义出通过定义对应变量接收传递的参数</span></code></pre><hr><h2 id="5-v-show-v-if-v-bind"><a href="#5-v-show-v-if-v-bind" class="headerlink" title="5.v-show v-if v-bind"></a>5.v-show v-if v-bind</h2><h3 id="5-1-v-show"><a href="#5-1-v-show" class="headerlink" title="5.1 v-show"></a>5.1 v-show</h3><blockquote><p><code>v-show</code>:用来控制页面中某个标签元素是否展示        底层使用控制是 display 属性</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        v-show: 用来控制标签展示还是隐藏的</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>百知教育欢迎你的加入!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>百知教育欢迎你的加入这是vue中定义变量true!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;展示隐藏标签&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showmsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            show:<span class="hljs-literal">false</span>,</span>        &#125;,        methods:&#123;<span class="javascript">            <span class="hljs-comment">//定义时间</span></span>            showmsg()&#123;<span class="javascript">               <span class="hljs-built_in">this</span>.show =  !<span class="hljs-built_in">this</span>.show;</span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.在使用v-show时可以直接书写boolean值控制元素展示,也可以通过变量控制标签展示和隐藏</span><span class="hljs-code">2.在v-show中可以通过boolean表达式控制标签的展示课隐藏</span></code></pre><h3 id="5-2-v-if"><a href="#5-2-v-if" class="headerlink" title="5.2 v-if"></a>5.2 v-if</h3><blockquote><p><code>v-if</code>: 用来控制页面元素是否展示                底层控制是DOM元素    操作DOM</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>百知教育<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>百知教育欢迎你的加入<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            show:<span class="hljs-literal">false</span></span>        &#125;,        methods:&#123;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="5-3-v-bind"><a href="#5-3-v-bind" class="headerlink" title="5.3 v-bind"></a>5.3 v-bind</h3><blockquote><p><code>v-bind</code>: 用来绑定标签的属性从而通过vue动态修改标签的属性</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;aa:showCss&#125;&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;baizhilogo.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            msg:<span class="hljs-string">&quot;百知教育官方logo!!!!&quot;</span>,</span><span class="javascript">            showCss:<span class="hljs-literal">true</span>,</span>        &#125;,        methods:&#123;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="5-4-v-bind-简化写法"><a href="#5-4-v-bind-简化写法" class="headerlink" title="5.4 v-bind 简化写法"></a>5.4 v-bind 简化写法</h3><blockquote><p>​    vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 <code>v-bind:属性名</code> 简化之后 <code>:属性名</code></p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;aa:showCss&#125;&quot;</span>  <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;动态控制加入样式&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCss&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变图片&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeSrc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            msg:<span class="hljs-string">&quot;百知教育官方logo!!!!&quot;</span>,</span><span class="javascript">            showCss:<span class="hljs-literal">true</span>,</span><span class="javascript">            src:<span class="hljs-string">&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1583490365568&amp;di=52a82bd614cd4030f97ada9441bb2d0e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Flogo%2F20160714%2F820a68f65b4e4a3634085055779c000c.jpg&quot;</span></span>        &#125;,        methods:&#123;            addCss()&#123;<span class="javascript">                <span class="hljs-built_in">this</span>.showCss= !<span class="hljs-built_in">this</span>.showCss;</span>            &#125;,            changeSrc()&#123;<span class="javascript">                <span class="hljs-built_in">this</span>.src = <span class="hljs-string">&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1925088662,1336364220&amp;fm=26&amp;gp=0.jpg&quot;</span>;</span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><hr><h2 id="6-v-for的使用"><a href="#6-v-for的使用" class="headerlink" title="6.v-for的使用"></a>6.v-for的使用</h2><blockquote><p><code>v-for</code>: 作用就是用来对对象进行遍历的(数组也是对象的一种)</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; user.name &#125;&#125; &#123;&#123; user.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">       通过v-for遍历对象</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key,index) in user&quot;</span>&gt;</span>        &#123;&#123;index&#125;&#125; : &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        通过v-for遍历数组</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;a,index in arr&quot;</span> &gt;</span>            &#123;&#123;index&#125;&#125; &#123;&#123;a&#125;&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        通过v-for遍历数组中对象</span><span class="hljs-comment">        :key 便于vue内部做重用和排序</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user,index in users&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span>            &#123;&#123;index+1&#125;&#125; &#123;&#123; user.name &#125;&#125;  === &#123;&#123; user.age &#125;&#125; ==== &#123;&#123; user.content &#125;&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span>        data: &#123;<span class="javascript">            user:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小陈&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">23</span>&#125;,</span><span class="javascript">            arr:[<span class="hljs-string">&quot;北京校区&quot;</span>, <span class="hljs-string">&quot;天津校区&quot;</span>, <span class="hljs-string">&quot;河南校区&quot;</span>],</span>            users:[<span class="javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;xiaochen&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&quot;我曾经也是一个单纯的少年!&quot;</span>&#125;,</span><span class="javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&quot;我曾经是一个邪恶的少年!&quot;</span>&#125;,</span>            ]        &#125;,        methods: &#123;&#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.在使用v-for的时候一定要注意加入:key 用来给vue内部提供重用和排序的唯一key </span></code></pre><hr><h2 id="7-v-model-双向绑定"><a href="#7-v-model-双向绑定" class="headerlink" title="7 .v-model 双向绑定"></a>7 .v-model 双向绑定</h2><blockquote><p><code>v-model</code>: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变Data中值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeValue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span>        data: &#123;<span class="javascript">            message:<span class="hljs-string">&quot;&quot;</span></span>        &#125;,        methods: &#123;            changeValue()&#123;<span class="javascript">                <span class="hljs-built_in">this</span>.message=<span class="hljs-string">&#x27;百知教育!&#x27;</span>;</span>            &#125;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.使用v-model指令可以实现数据的双向绑定 </span><span class="hljs-code">2.所谓双向绑定 表单中数据变化导致vue实例data数据变化   vue实例中data数据的变化导致表单中数据变化 称之为双向绑定</span><span class="hljs-code"></span><span class="hljs-code"># MVVM架构  双向绑定机制</span><span class="hljs-code">Model: 数据  Vue实例中绑定数据</span><span class="hljs-code"></span><span class="hljs-code">VM:   ViewModel  监听器</span><span class="hljs-code"></span><span class="hljs-code">View:  页面  页面展示的数据</span></code></pre><hr><h2 id="8-事件修饰符"><a href="#8-事件修饰符" class="headerlink" title="8. 事件修饰符"></a>8. 事件修饰符</h2><blockquote><p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 1.常用的事件修饰符</span><span class="hljs-code">.stop</span><span class="hljs-code">.prevent</span><span class="hljs-code">.capture</span><span class="hljs-code">.self</span><span class="hljs-code">.once</span><span class="hljs-code">.passive</span></code></pre><h3 id="8-1-stop事件修饰符"><a href="#8-1-stop事件修饰符" class="headerlink" title="8.1 stop事件修饰符"></a>8.1 stop事件修饰符</h3><blockquote><p>用来阻止事件冒泡</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;divClick&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--用来阻止事件冒泡--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span>        data: &#123;&#125;,        methods: &#123;            btnClick()&#123;<span class="javascript">                alert(<span class="hljs-string">&#x27;button被点击了&#x27;</span>);</span>            &#125;,            divClick()&#123;<span class="javascript">                alert(<span class="hljs-string">&#x27;div被点击了&#x27;</span>);</span>            &#125;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="8-2-prevent-事件修饰符"><a href="#8-2-prevent-事件修饰符" class="headerlink" title="8.2 prevent 事件修饰符"></a>8.2 prevent 事件修饰符</h3><blockquote><p>用来阻止标签的默认行为</p></blockquote><pre><code class="hljs html"><span class="hljs-comment">&lt;!--用来阻止事件的默认行为--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baizhibest.com/&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;aClick&quot;</span>&gt;</span>百知教育<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h3 id="8-3-self-事件修饰符"><a href="#8-3-self-事件修饰符" class="headerlink" title="8.3 self 事件修饰符"></a>8.3 self 事件修饰符</h3><blockquote><p>用来针对于当前标签的事件触发     ===========&gt; 只触发自己标签的上特定动作的事件     只关心自己标签上触发的事件 不监听事件冒泡</p></blockquote><pre><code class="hljs html"><span class="hljs-comment">&lt;!--只触发标签自身的事件--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;divClick&quot;</span>&gt;</span>      <span class="hljs-comment">&lt;!--用来阻止事件冒泡--&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick1&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h3 id="8-4-once-事件修饰符"><a href="#8-4-once-事件修饰符" class="headerlink" title="8.4 once 事件修饰符"></a>8.4 once 事件修饰符</h3><blockquote><p>once 一次 作用:  就是让指定事件只触发一次</p></blockquote><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">.prevent : 用来阻止事件的默认行为</span><span class="hljs-comment">.once    : 用来只执行一次特定的事件</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baizhibest.com/&quot;</span> @<span class="hljs-attr">click.prevent.once</span>=<span class="hljs-string">&quot;aClick&quot;</span>&gt;</span>百知教育<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><hr><h2 id="9-按键修饰符"><a href="#9-按键修饰符" class="headerlink" title="9. 按键修饰符"></a>9. 按键修饰符</h2><blockquote><p>作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 按键修饰符</span><span class="hljs-code">.enter</span><span class="hljs-code">.tab</span><span class="hljs-code">.delete (捕获“删除”和“退格”键)</span><span class="hljs-code">.esc</span><span class="hljs-code">.space</span><span class="hljs-code">.up</span><span class="hljs-code">.down</span><span class="hljs-code">.left</span><span class="hljs-code">.right</span></code></pre><h3 id="9-1-enter-回车键"><a href="#9-1-enter-回车键" class="headerlink" title="9.1 enter 回车键"></a>9.1 enter 回车键</h3><blockquote><p>用来在触发回车按键之后触发的事件</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;keyups&quot;</span>&gt;</span></code></pre><h3 id="9-2-tab-键"><a href="#9-2-tab-键" class="headerlink" title="9.2 tab 键"></a>9.2 tab 键</h3><blockquote><p>用来捕获到tab键执行到当前标签是才会触发</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.tab</span>=<span class="hljs-string">&quot;keytabs&quot;</span>&gt;</span></code></pre><hr><h2 id="10-Axios-基本使用"><a href="#10-Axios-基本使用" class="headerlink" title="10. Axios 基本使用"></a>10. Axios 基本使用</h2><h3 id="10-1-引言"><a href="#10-1-引言" class="headerlink" title="10.1 引言"></a>10.1 引言</h3><blockquote><p><code>Axios</code> 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染       页面局部更新技术  Ajax</p></blockquote><h3 id="10-2-Axios-第一个程序"><a href="#10-2-Axios-第一个程序" class="headerlink" title="10.2 Axios 第一个程序"></a>10.2 Axios 第一个程序</h3><p>中文网站:<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>安装: <a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p><h4 id="10-2-1-GET方式的请求"><a href="#10-2-1-GET方式的请求" class="headerlink" title="10.2.1 GET方式的请求"></a>10.2.1 GET方式的请求</h4><pre><code class="hljs js"><span class="hljs-comment">//发送GET方式请求</span> axios.get(<span class="hljs-string">&quot;http://localhost:8989/user/findAll?name=xiaochen&quot;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;     <span class="hljs-built_in">console</span>.log(response.data); &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;     <span class="hljs-built_in">console</span>.log(err); &#125;);</code></pre><h4 id="10-2-2-POST方式请求"><a href="#10-2-2-POST方式请求" class="headerlink" title="10.2.2 POST方式请求"></a>10.2.2 POST方式请求</h4><pre><code class="hljs javascript"><span class="hljs-comment">//发送POST方式请求</span>  axios.post(<span class="hljs-string">&quot;http://localhost:8989/user/save&quot;</span>,&#123;      username:<span class="hljs-string">&quot;xiaochen&quot;</span>,      age:<span class="hljs-number">23</span>,      email:<span class="hljs-string">&quot;xiaochen@zparkhr.com&quot;</span>,      phone:<span class="hljs-number">13260426185</span>  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(response.data);  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(err);  &#125;);</code></pre><h4 id="10-2-3-axios并发请求"><a href="#10-2-3-axios并发请求" class="headerlink" title="10.2.3 axios并发请求"></a>10.2.3 axios并发请求</h4><blockquote><p><code>并发请求</code>:  将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">//1.创建一个查询所有请求</span>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findAll</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">&quot;http://localhost:8989/user/findAll?name=xiaochen&quot;</span>);   &#125;   <span class="hljs-comment">//2.创建一个保存的请求</span>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-keyword">return</span> axios.post(<span class="hljs-string">&quot;http://localhost:8989/user/save&quot;</span>,&#123;           username:<span class="hljs-string">&quot;xiaochen&quot;</span>,           age:<span class="hljs-number">23</span>,           email:<span class="hljs-string">&quot;xiaochen@zparkhr.com&quot;</span>,           phone:<span class="hljs-number">13260426185</span>       &#125;);   &#125;   <span class="hljs-comment">//3.并发执行</span>   axios.all([findAll(),save()]).then(       axios.spread(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res1,res2</span>)</span>&#123;  <span class="hljs-comment">//用来将一组函数的响应结果汇总处理</span>           <span class="hljs-built_in">console</span>.log(res1.data);           <span class="hljs-built_in">console</span>.log(res2.data);       &#125;)   );<span class="hljs-comment">//用来发送一组并发请求</span></code></pre><hr><h2 id="11-Vue-生命周期"><a href="#11-Vue-生命周期" class="headerlink" title="11. Vue 生命周期"></a>11. Vue 生命周期</h2><blockquote><p><code>生命周期钩子</code>   ====&gt;  <code>生命周期函数</code></p></blockquote><p><img src="https://pic.downk.cc/item/5ff68f6b3ffa7d37b3f1ac0e.png" alt="img"></p><pre><code class="hljs markdown"><span class="hljs-section"># Vue生命周期总结</span><span class="hljs-code">1.初始化阶段</span><span class="hljs-code">beforeCreate()&#123; //1.生命周期中第一个函数,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,Vue实例中还没有 Data el methods相关属性</span><span class="hljs-code">            console.log(&quot;beforeCreate: &quot;+this.msg);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        created()&#123; //2.生命周期中第二个函数,该函数在执行时Vue实例已经初始化了data属性和methods中相关方法</span><span class="hljs-code">            console.log(&quot;created: &quot;+this.msg);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        beforeMount()&#123;//3.生命周期中第三个函数,该函数在执行时Vue将El中指定作用范围作为模板编译</span><span class="hljs-code">            console.log(&quot;beforeMount: &quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        mounted()&#123;//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面</span><span class="hljs-code">            console.log(&quot;Mounted: &quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;</span><span class="hljs-code">        </span><span class="hljs-code">2.运行阶段</span><span class="hljs-code"> beforeUpdate()&#123;//5.生命周期中第五个函数,该函数是data中数据发生变化时执行 这个事件执行时仅仅是Vue实例中data数据变化页面显示的依然是原始数据</span><span class="hljs-code">            console.log(&quot;beforeUpdate:&quot;+this.msg);</span><span class="hljs-code">            console.log(&quot;beforeUpdate:&quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        updated()&#123;    //6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化  页面中数据已经和data中数据一致</span><span class="hljs-code">            console.log(&quot;updated:&quot;+this.msg);</span><span class="hljs-code">            console.log(&quot;updated:&quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        </span><span class="hljs-code">3.销毁阶段</span><span class="hljs-code"> beforeDestory()&#123;//7.生命周期第七个函数,该函数执行时,Vue中所有数据 methods componet 都没销毁</span><span class="hljs-code"></span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        destoryed()&#123; //8.生命周期的第八个函数,该函数执行时,Vue实例彻底销毁</span><span class="hljs-code"></span><span class="hljs-code">        &#125;</span></code></pre><hr><h2 id="12-Vue中组件-Component"><a href="#12-Vue中组件-Component" class="headerlink" title="12. Vue中组件(Component)"></a>12. Vue中组件(Component)</h2><h3 id="12-1-组件作用"><a href="#12-1-组件作用" class="headerlink" title="12.1 组件作用"></a>12.1 组件作用</h3><p>组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不能业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。</p><h3 id="12-2-组件使用"><a href="#12-2-组件使用" class="headerlink" title="12.2 组件使用"></a>12.2 组件使用</h3><h4 id="12-2-1-全局组件注册"><a href="#12-2-1-全局组件注册" class="headerlink" title="12.2.1 全局组件注册"></a>12.2.1 全局组件注册</h4><p><code>说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件</code></p><pre><code class="hljs js"><span class="hljs-comment">//1.开发全局组件</span>Vue.component(<span class="hljs-string">&#x27;login&#x27;</span>,&#123;        template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h1&gt;用户登录&lt;/h1&gt;&lt;/div&gt;&#x27;</span>    &#125;);<span class="hljs-comment">//2.使用全局组件  在Vue实例范围内</span>&lt;login&gt;&lt;/login&gt;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 注意:</span><span class="hljs-code">1.Vue.component用来开发全局组件 参数1: 组件的名称  参数2: 组件配置&#123;&#125;  template:&#x27;&#x27;用来书写组件的html代码  template中必须有且只有一个root元素</span><span class="hljs-code">2.使用时需要在Vue的作用范围内根据组件名使用全局组件</span><span class="hljs-code">3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用</span></code></pre><h4 id="12-2-2-局部组件注册"><a href="#12-2-2-局部组件注册" class="headerlink" title="12.2.2 局部组件注册"></a>12.2.2 局部组件注册</h4><p><code>说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加</code></p><ul><li>第一种开发方式</li></ul><pre><code class="hljs js"><span class="hljs-comment">//局部组件登录模板声明</span>  <span class="hljs-keyword">let</span> login =&#123;   <span class="hljs-comment">//具体局部组件名称</span>      template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h2&gt;用户登录&lt;/h2&gt;&lt;/div&gt;&#x27;</span>  &#125;;    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;      el: <span class="hljs-string">&quot;#app&quot;</span>,      data: &#123;&#125;,      methods: &#123;&#125;,      components:&#123;  <span class="hljs-comment">//用来注册局部组件</span>          login:login  <span class="hljs-comment">//注册局部组件</span>      &#125;  &#125;);<span class="hljs-comment">//局部组件使用 在Vue实例范围内</span>&lt;login&gt;&lt;/login&gt;</code></pre><ul><li><p>第二种开发方式</p><pre><code class="hljs js"><span class="hljs-comment">//1.声明局部组件模板  template 标签 注意:在Vue实例作用范围外声明</span>  &lt;template id=<span class="hljs-string">&quot;loginTemplate&quot;</span>&gt;      &lt;h1&gt;用户登录&lt;/h1&gt;  &lt;/template&gt;<span class="hljs-comment">//2.定义变量用来保存模板配置对象</span>    <span class="hljs-keyword">let</span> login =&#123;   <span class="hljs-comment">//具体局部组件名称</span>        template:<span class="hljs-string">&#x27;#loginTemplate&#x27;</span>  <span class="hljs-comment">//使用自定义template标签选择器即可</span>    &#125;;<span class="hljs-comment">//3.注册组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;&#125;,        methods: &#123;&#125;,        components:&#123;  <span class="hljs-comment">//用来注册局部组件</span>            login:login  <span class="hljs-comment">//注册局部组件</span>        &#125;    &#125;); <span class="hljs-comment">//4.局部组件使用 在Vue实例范围内</span> &lt;login&gt;&lt;/login&gt;</code></pre></li></ul><h3 id="12-3-Prop的使用"><a href="#12-3-Prop的使用" class="headerlink" title="12.3 Prop的使用"></a>12.3 Prop的使用</h3><p><code>作用:props用来给组件传递相应静态数据或者是动态数据的</code></p><h4 id="12-3-1-通过在组件上声明静态数据传递给组件内部"><a href="#12-3-1-通过在组件上声明静态数据传递给组件内部" class="headerlink" title="12.3.1 通过在组件上声明静态数据传递给组件内部"></a>12.3.1 通过在组件上声明静态数据传递给组件内部</h4><pre><code class="hljs js"><span class="hljs-comment">//1.声明组件模板配置对象</span>    <span class="hljs-keyword">let</span> login = &#123;        template:<span class="hljs-string">&quot;&lt;div&gt;&lt;h1&gt;欢迎:&#123;&#123; userName &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h1&gt;&lt;/div&gt;&quot;</span>,        props:[<span class="hljs-string">&#x27;userName&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]  <span class="hljs-comment">//props作用 用来接收使用组件时通过组件标签传递的数据</span>    &#125;<span class="hljs-comment">//2.注册组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;&#125;,        methods: &#123;&#125;,        components:&#123;            login <span class="hljs-comment">//组件注册</span>        &#125;    &#125;);<span class="hljs-comment">//3.通过组件完成数据传递</span>&lt;login user-name=<span class="hljs-string">&quot;小陈&quot;</span> age=<span class="hljs-string">&quot;23&quot;</span>&gt;&lt;/login&gt;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.使用组件时可以在组件上定义多个属性以及对应数据</span><span class="hljs-code">2.在组件内部可以使用props数组生命多个定义在组件上的属性名 日后可以在组件中通过&#123;&#123; 属性名 &#125;&#125; 方式获取组件中属性值</span></code></pre><h4 id="12-3-2-通过在组件上声明动态数据传递给组件内部"><a href="#12-3-2-通过在组件上声明动态数据传递给组件内部" class="headerlink" title="12.3.2 通过在组件上声明动态数据传递给组件内部"></a>12.3.2 通过在组件上声明动态数据传递给组件内部</h4><pre><code class="hljs js"><span class="hljs-comment">//1.声明组件模板对象</span>    <span class="hljs-keyword">const</span> login = &#123;        template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h2&gt;欢迎: &#123;&#123; name &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h2&gt;&lt;/div&gt;&#x27;</span>,        props:[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]    &#125; <span class="hljs-comment">//2.注册局部组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;            username:<span class="hljs-string">&quot;小陈陈&quot;</span>,            age:<span class="hljs-number">23</span>        &#125;,        methods: &#123;&#125;,        components:&#123;            login <span class="hljs-comment">//注册组件</span>        &#125;    &#125;);<span class="hljs-comment">//3.使用组件</span> &lt;login :name=<span class="hljs-string">&quot;username&quot;</span> :age=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;<span class="hljs-regexp">/login&gt;  /</span><span class="hljs-regexp">/使用v-bind形式将数据绑定Vue实例中data属性,日后data属性发生变化,组件内部数据跟着变化</span></code></pre><h4 id="12-3-3-prop的单向数据流"><a href="#12-3-3-prop的单向数据流" class="headerlink" title="12.3.3 prop的单向数据流"></a>12.3.3 prop的单向数据流</h4><p><code>单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个**单向下行绑定**：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</code></p><blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。—摘自官网</p></blockquote><h3 id="12-4-组件中定义数据和事件使用"><a href="#12-4-组件中定义数据和事件使用" class="headerlink" title="12.4 组件中定义数据和事件使用"></a>12.4 组件中定义数据和事件使用</h3><h5 id="1-组件中定义属于组件的数据"><a href="#1-组件中定义属于组件的数据" class="headerlink" title="1. 组件中定义属于组件的数据"></a>1. 组件中定义属于组件的数据</h5><pre><code class="hljs js"><span class="hljs-comment">//组件声明的配置对象</span>    <span class="hljs-keyword">const</span> login = &#123;        template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h1&gt;&#123;&#123; msg &#125;&#125; 百知教育&lt;/h1&gt;&lt;ul&gt;&lt;li v-for=&quot;item,index in lists&quot;&gt;&#123;&#123; index &#125;&#125;&#123;&#123; item &#125;&#125;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&#x27;</span>,        data()&#123;   <span class="hljs-comment">//使用data函数方式定义组件的数据   在templatehtml代码中通过插值表达式直接获取</span>            <span class="hljs-keyword">return</span> &#123;                msg:<span class="hljs-string">&quot;hello&quot;</span>,                lists:[<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;spring&#x27;</span>,<span class="hljs-string">&#x27;springboot&#x27;</span>]            &#125;<span class="hljs-comment">//组件自己内部数据</span>        &#125;    &#125;</code></pre><h5 id="2-组件中事件定义"><a href="#2-组件中事件定义" class="headerlink" title="2.组件中事件定义"></a>2.组件中事件定义</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> login=&#123;       template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我触发组件中事件&quot; @click=&quot;change&quot;&gt;&lt;/div&gt;&#x27;</span>,       data()&#123;           <span class="hljs-keyword">return</span> &#123;               name:<span class="hljs-string">&#x27;小陈&#x27;</span>           &#125;;       &#125;,       methods:&#123;           change()&#123;               alert(<span class="hljs-built_in">this</span>.name)               alert(<span class="hljs-string">&#x27;触发事件&#x27;</span>);           &#125;       &#125;   &#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.组件中定义事件和直接在Vue中定义事件基本一致 直接在组件内部对应的html代码上加入@事件名=函数名方式即可</span><span class="hljs-code">2.在组件内部使用methods属性用来定义对应的事件函数即可,事件函数中this 指向的是当前组件的实例</span></code></pre><h3 id="12-5-向子组件中传递事件并在子组件中调用改事件"><a href="#12-5-向子组件中传递事件并在子组件中调用改事件" class="headerlink" title="12.5 向子组件中传递事件并在子组件中调用改事件"></a>12.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用 this.$emit(&#39;函数名&#39;) 方式调用</code></p><pre><code class="hljs js"><span class="hljs-comment">//1.声明组件</span>    <span class="hljs-keyword">const</span> login = &#123;        template:<span class="hljs-string">&quot;&lt;div&gt;&lt;h1&gt;百知教育 &#123;&#123; uname &#125;&#125;&lt;/h1&gt; &lt;input type=&#x27;button&#x27; value=&#x27;点我&#x27; @click=&#x27;change&#x27;&gt;&lt;/div&gt;&quot;</span>,        data()&#123;            <span class="hljs-keyword">return</span> &#123;                uname:<span class="hljs-built_in">this</span>.name            &#125;        &#125;,        props:[<span class="hljs-string">&#x27;name&#x27;</span>],        methods:&#123;            change()&#123;                <span class="hljs-comment">//调用vue实例中函数</span>                <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;aaa&#x27;</span>);  <span class="hljs-comment">//调用组件传递过来的其他函数时需要使用 this.$emit(&#x27;函数名调用&#x27;)</span>            &#125;        &#125;    &#125;     <span class="hljs-comment">//2.注册组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;            username:<span class="hljs-string">&quot;小陈&quot;</span>        &#125;,        methods: &#123;            findAll()&#123;  <span class="hljs-comment">//一个事件函数  将这个函数传递给子组件</span>                alert(<span class="hljs-string">&#x27;Vue 实例中定义函数&#x27;</span>);            &#125;        &#125;,        components:&#123;            login,<span class="hljs-comment">//组件的注册</span>        &#125;    &#125;);<span class="hljs-comment">//3.使用组件</span>&lt;login  @find=<span class="hljs-string">&quot;findAll&quot;</span>&gt;&lt;<span class="hljs-regexp">/login&gt;    /</span><span class="hljs-regexp">/=====&gt; 在组件内部使用  this.$emit(&#x27;find&#x27;)</span></code></pre><hr><h2 id="13-Vue中路由-VueRouter"><a href="#13-Vue中路由-VueRouter" class="headerlink" title="13.Vue中路由(VueRouter)"></a>13.Vue中路由(VueRouter)</h2><h4 id="13-1-路由"><a href="#13-1-路由" class="headerlink" title="13.1 路由"></a>13.1 路由</h4><p><code>路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理</code></p><h4 id="13-2-作用"><a href="#13-2-作用" class="headerlink" title="13.2 作用"></a>13.2 作用</h4><p><code>用来在vue中实现组件之间的动态切换</code></p><h4 id="13-3-使用路由"><a href="#13-3-使用路由" class="headerlink" title="13.3 使用路由"></a>13.3 使用路由</h4><ol><li><h5 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h5><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;&lt;script src=<span class="hljs-string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;&lt;<span class="hljs-regexp">/script&gt;  /</span><span class="hljs-regexp">/vue 路由js</span></code></pre></li><li><h5 id="创建组件对象"><a href="#创建组件对象" class="headerlink" title="创建组件对象"></a>创建组件对象</h5><pre><code class="hljs js"><span class="hljs-comment">//声明组件模板</span><span class="hljs-keyword">const</span> login = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;登录&lt;/h1&gt;&#x27;</span>&#125;;<span class="hljs-keyword">const</span> register = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;注册&lt;/h1&gt;&#x27;</span>&#125;;</code></pre></li><li><h5 id="定义路由对象的规则"><a href="#定义路由对象的规则" class="headerlink" title="定义路由对象的规则"></a>定义路由对象的规则</h5><pre><code class="hljs js"> <span class="hljs-comment">//创建路由对象</span><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-attr">component</span>:login&#125;,   <span class="hljs-comment">//path: 路由的路径  component:路径对应的组件</span>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register&#x27;</span>,<span class="hljs-attr">component</span>:register&#125;  ]&#125;);</code></pre></li></ol><ol start="4"><li><h5 id="将路由对象注册到vue实例"><a href="#将路由对象注册到vue实例" class="headerlink" title="将路由对象注册到vue实例"></a>将路由对象注册到vue实例</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">&quot;#app&quot;</span>,  data: &#123;    username:<span class="hljs-string">&quot;小陈&quot;</span>,  &#125;,  methods: &#123;&#125;,  router:router   <span class="hljs-comment">//设置路由对象</span>&#125;);</code></pre></li></ol><ol start="5"><li><h5 id="在页面中显示路由的组件"><a href="#在页面中显示路由的组件" class="headerlink" title="在页面中显示路由的组件"></a>在页面中显示路由的组件</h5><pre><code class="hljs html"><span class="hljs-comment">&lt;!--显示路由的组件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></code></pre></li><li><h5 id="根据连接切换路由"><a href="#根据连接切换路由" class="headerlink" title="根据连接切换路由"></a>根据连接切换路由</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/login&quot;</span>&gt;</span>点我登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/register&quot;</span>&gt;</span>点我注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></li></ol><h3 id="13-4-router-link使用"><a href="#13-4-router-link使用" class="headerlink" title="13.4 router-link使用"></a>13.4 router-link使用</h3><p><code>作用:用来替换我们在切换路由时使用a标签切换路由</code></p><p><code>好处:就是可以自动给路由路径加入#不需要手动加入</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>我要登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>点我注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.router-link 用来替换使用a标签实现路由切换 好处是不需要书写#号直接书写路由路径</span><span class="hljs-code">2.router-link to属性用来书写路由路径   tag属性:用来将router-link渲染成指定的标签</span></code></pre><h3 id="13-5-默认路由"><a href="#13-5-默认路由" class="headerlink" title="13.5 默认路由"></a>13.5 默认路由</h3><p><code>作用:用来在第一次进入界面是显示一个默认的组件</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[    <span class="hljs-comment">//&#123; path:&#x27;/&#x27;,component:login&#125;,</span>    &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/login&#x27;</span>&#125;,  <span class="hljs-comment">//redirect: 用来当访问的是默认路由 &quot;/&quot; 时 跳转到指定的路由展示  推荐使用</span>    &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>:login&#125;,    &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>:register&#125;,  ]&#125;);</code></pre><h3 id="13-6-路由中参数传递"><a href="#13-6-路由中参数传递" class="headerlink" title="13.6 路由中参数传递"></a>13.6 路由中参数传递</h3><ul><li>第一种方式传递参数 传统方式</li></ul><ol><li><p>通过?号形式拼接参数</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login?id=21&amp;name=zhangsan&quot;</span>&gt;</span>我要登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></code></pre></li><li><p>组件中获取参数</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> login = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;用户登录&lt;/h1&gt;&#x27;</span>,  data()&#123;<span class="hljs-keyword">return</span> &#123;&#125;&#125;,  methods:&#123;&#125;,  created()&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=============&gt;&quot;</span>+<span class="hljs-built_in">this</span>.$route.query.id+<span class="hljs-string">&quot;======&gt;&quot;</span>+<span class="hljs-built_in">this</span>.$route.query.name);  &#125;&#125;;</code></pre></li></ol><ul><li>第二种方式传递参数 restful</li></ul><ol><li><p>通过使用路径方式传递参数</p><pre><code class="hljs js">&lt;router-link to=<span class="hljs-string">&quot;/register/24/张三&quot;</span>&gt;我要注册&lt;/router-link&gt;<span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register/:id/:name&#x27;</span>,<span class="hljs-attr">component</span>:register&#125;   <span class="hljs-comment">//定义路径中获取对应参数</span>  ]&#125;);</code></pre></li></ol><ol start="2"><li><p>组件中获取参数</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> register = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;用户注册&#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;&#x27;</span>,  created()&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;注册组件中id:   &quot;</span>+<span class="hljs-built_in">this</span>.$route.params.id+<span class="hljs-built_in">this</span>.$route.params.name);  &#125;&#125;;</code></pre></li></ol><h3 id="13-7-嵌套路由"><a href="#13-7-嵌套路由" class="headerlink" title="13.7 嵌套路由"></a>13.7 嵌套路由</h3><ol><li><h5 id="声明最外层和内层路由"><a href="#声明最外层和内层路由" class="headerlink" title="声明最外层和内层路由"></a>声明最外层和内层路由</h5><pre><code class="hljs js">&lt;template id=<span class="hljs-string">&quot;product&quot;</span>&gt;    &lt;div&gt;        &lt;h1&gt;商品管理&lt;/h1&gt;        &lt;router-link to=<span class="hljs-string">&quot;/product/add&quot;</span>&gt;商品添加&lt;/router-link&gt;        &lt;router-link to=<span class="hljs-string">&quot;/product/edit&quot;</span>&gt;商品编辑&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;<span class="hljs-comment">//声明组件模板</span><span class="hljs-keyword">const</span> product=&#123;  template:<span class="hljs-string">&#x27;#product&#x27;</span>&#125;;<span class="hljs-keyword">const</span> add = &#123;  template:<span class="hljs-string">&#x27;&lt;h4&gt;商品添加&lt;/h4&gt;&#x27;</span>&#125;;<span class="hljs-keyword">const</span> edit = &#123;  template:<span class="hljs-string">&#x27;&lt;h4&gt;商品编辑&lt;/h4&gt;&#x27;</span>&#125;;</code></pre></li></ol><ol start="2"><li><h5 id="创建路由对象含有嵌套路由"><a href="#创建路由对象含有嵌套路由" class="headerlink" title="创建路由对象含有嵌套路由"></a>创建路由对象含有嵌套路由</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;        routes:[            &#123;                path:<span class="hljs-string">&#x27;/product&#x27;</span>,                component:product,                children:[                    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-attr">component</span>: add&#125;,                    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;edit&#x27;</span>,<span class="hljs-attr">component</span>: edit&#125;,                ]            &#125;,        ]    &#125;);</code></pre></li></ol><ol start="3"><li><h5 id="注册路由对象"><a href="#注册路由对象" class="headerlink" title="注册路由对象"></a>注册路由对象</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    el: <span class="hljs-string">&quot;#app&quot;</span>,    data: &#123;&#125;,    methods: &#123;&#125;,    router,<span class="hljs-comment">//定义路由对象</span>&#125;);</code></pre></li><li><p>测试路由</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product&quot;</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></code></pre><hr></li></ol><h2 id="14-Vue-CLI-脚手架"><a href="#14-Vue-CLI-脚手架" class="headerlink" title="14. Vue CLI 脚手架"></a>14. Vue CLI 脚手架</h2><h3 id="14-1-什么是CLI"><a href="#14-1-什么是CLI" class="headerlink" title="14.1 什么是CLI"></a>14.1 什么是CLI</h3><p>命令行界面（英语：command-line interface，缩写：<em>CLI</em>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）</p><h3 id="14-2-什么是Vue-CLI"><a href="#14-2-什么是Vue-CLI" class="headerlink" title="14.2 什么是Vue CLI"></a>14.2 什么是Vue CLI</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。</p><h3 id="14-3-Vue-CLI优势"><a href="#14-3-Vue-CLI优势" class="headerlink" title="14.3 Vue CLI优势"></a>14.3 Vue CLI优势</h3><ul><li>通过 <code>vue-cli</code> 搭建交互式的项目脚手架。bootstrap css js jquery js     通过执行命令方式下载相关依赖</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发    vue页面 vuejs  vuerouter        axios(一条命令)</li><li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：<ul><li>可升级；  一条命令</li><li>基于 webpack 构建，并带有合理的默认配置；  webpack  项目打包方式     编译好的项目源码===&gt;部署到服务器上直接使用</li><li>可以通过项目内的配置文件进行配置；               默认配置文件,通过修改默认配置文件达到自己想要的项目环境            </li><li>可以通过插件进行扩展。                                       vue v-charts  elementui </li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。Nodejs(tomcat)  Vue VueRouter webpack yarn</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li></ul><h3 id="14-4-Vue-CLI安装"><a href="#14-4-Vue-CLI安装" class="headerlink" title="14.4 Vue CLI安装"></a>14.4 Vue CLI安装</h3><h5 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h5><pre><code class="hljs markdown"><span class="hljs-section">#1.下载nodejs</span><span class="hljs-code">http://nodejs.cn/download/</span><span class="hljs-code">windows系统:   .msi  安装包(exe)指定安装位置   .zip(压缩包)直接解压缩指定目录</span><span class="hljs-code">  mac os 系统:   .pkg  安装包格式自动配置环境变量  .tar.gz(压缩包)解压缩安装到指定名</span><span class="hljs-code"></span><span class="hljs-code">#2.配置nodejs环境变量</span><span class="hljs-code">windows系统:</span><span class="hljs-code">1.计算上右键属性----&gt;  高级属性 ----&gt;环境变量 添加如下配置:</span><span class="hljs-code">NODE_HOME=  nodejs安装目录</span><span class="hljs-code">        PATH    = xxxx;%NODE_HOME%</span><span class="hljs-code">    2.macos 系统</span><span class="hljs-code">    推荐使用.pkg安装直接配置node环境</span><span class="hljs-code"> </span><span class="hljs-code">#3.验证nodejs环境是否成功</span><span class="hljs-code">node -v </span><span class="hljs-code"></span><span class="hljs-code">#4.npm介绍</span><span class="hljs-code">node package mangager    nodejs包管理工具       前端主流技术  npm 进行统一管理</span><span class="hljs-code">maven 管理java后端依赖   远程仓库(中心仓库)      阿里云镜像</span><span class="hljs-code">npm   管理前端系统依赖    远程仓库(中心仓库)      配置淘宝镜像</span><span class="hljs-code"></span><span class="hljs-code">#5.配置淘宝镜像</span><span class="hljs-code">  npm config set registry https://registry.npm.taobao.org</span><span class="hljs-code">  npm config get registry</span><span class="hljs-code"></span><span class="hljs-code">#6.配置npm下载依赖位置</span><span class="hljs-code"> windows:</span><span class="hljs-code">npm config set cache &quot;D:\nodereps\npm-cache&quot;</span><span class="hljs-code">npm config set prefix &quot;D:\nodereps\npm_global&quot;</span><span class="hljs-code"> mac os:</span><span class="hljs-code"> npm config set cache &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code">npm config set prefix &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code"></span><span class="hljs-code">#7.验证nodejs环境配置</span><span class="hljs-code">npm config ls</span><span class="hljs-code"></span><span class="hljs-code">    ; userconfig /Users/chenyannan/.npmrc</span><span class="hljs-code">    cache = &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code">    prefix = &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code">    registry = &quot;https://registry.npm.taobao.org/&quot;</span><span class="hljs-code"></span></code></pre><h5 id="2-安装脚手架"><a href="#2-安装脚手架" class="headerlink" title="2.安装脚手架"></a>2.安装脚手架</h5><pre><code class="hljs markdown"><span class="hljs-section">#0.卸载脚手架</span><span class="hljs-code">npm uninstall -g @vue/cli  //卸载3.x版本脚手架</span><span class="hljs-code">npm uninstall -g vue-cli  //卸载2.x版本脚手架</span><span class="hljs-code"></span><span class="hljs-code">#1.Vue Cli官方网站</span><span class="hljs-code">https://cli.vuejs.org/zh/guide/</span><span class="hljs-code"></span><span class="hljs-code">#2.安装vue Cli</span><span class="hljs-code">npm install -g vue-cli</span><span class="hljs-code"></span></code></pre><h5 id="3-第一个vue脚手架项目"><a href="#3-第一个vue脚手架项目" class="headerlink" title="3.第一个vue脚手架项目"></a>3.第一个vue脚手架项目</h5><pre><code class="hljs markdown"><span class="hljs-section"># 1.创建vue脚手架第一个项目</span><span class="hljs-code">vue init webpack 项目名</span><span class="hljs-code"># 2.创建第一个项目</span><span class="hljs-code">hello     -------------&gt;项目名</span><span class="hljs-code">    -build  -------------&gt;用来使用webpack打包使用build依赖</span><span class="hljs-code">    -config -------------&gt;用来做整个项目配置目录</span><span class="hljs-code">    -node_modules  ------&gt;用来管理项目中使用依赖</span><span class="hljs-code">    -src ------&gt;用来书写vue的源代码[重点]</span><span class="hljs-code">    +assets      ------&gt;用来存放静态资源 [重点]</span><span class="hljs-code">      components   ------&gt;用来书写Vue组件 [重点]</span><span class="hljs-code">      router ------&gt;用来配置项目中路由[重点]</span><span class="hljs-code">      App.vue      ------&gt;项目中根组件[重点]</span><span class="hljs-code">      main.js      ------&gt;项目中主入口[重点]</span><span class="hljs-code">    -static        ------&gt;其它静态</span><span class="hljs-code">    -.babelrc      ------&gt; 将es6语法转为es5运行</span><span class="hljs-code">    -.editorconfig ------&gt; 项目编辑配置</span><span class="hljs-code">    -.gitignore    ------&gt; git版本控制忽略文件</span><span class="hljs-code">    -.postcssrc.js ------&gt; 源码相关js</span><span class="hljs-code">    -index.html    ------&gt; 项目主页</span><span class="hljs-code">    -package.json  ------&gt; 类似与pom.xml 依赖管理  jquery 不建议手动修改</span><span class="hljs-code">    -package-lock.json ----&gt; 对package.json加锁</span><span class="hljs-code">    -README.md         ----&gt; 项目说明文件</span><span class="hljs-code"></span><span class="hljs-code"># 3.如何运行在项目的根目录中执行</span><span class="hljs-code">npm start 运行前端系统</span><span class="hljs-code"></span><span class="hljs-code"># 4.如何访问项目</span><span class="hljs-code">http://localhost:8081    </span><span class="hljs-code"></span><span class="hljs-code"># 5.Vue Cli中项目开发方式</span><span class="hljs-code"> 注意: 一切皆组件   一个组件中   js代码  html代码  css样式</span><span class="hljs-code"> </span><span class="hljs-code"> 1. VueCli开发方式是在项目中开发一个一个组件对应一个业务功能模块,日后可以将多个组件组合到一起形成一个前端系统</span><span class="hljs-code"> 2. 日后在使用vue Cli进行开发时不再书写html,编写的是一个个组件(组件后缀.vue结尾的文件),日后打包时vue cli会将组件编译成运行的html文件  </span></code></pre><h5 id="4-如何开发Vue脚手架"><a href="#4-如何开发Vue脚手架" class="headerlink" title="4.如何开发Vue脚手架"></a>4.如何开发Vue脚手架</h5><p><code>注意:在Vue cli 中一切皆组件</code></p><hr><h2 id="15-在脚手架中使用axios"><a href="#15-在脚手架中使用axios" class="headerlink" title="15.在脚手架中使用axios"></a>15.在脚手架中使用axios</h2><h3 id="15-1-安装axios"><a href="#15-1-安装axios" class="headerlink" title="15.1 安装axios"></a>15.1 安装axios</h3><pre><code class="hljs markdown"><span class="hljs-section"># 1.安装axios</span><span class="hljs-code">npm install axios --save-dev</span><span class="hljs-code"></span><span class="hljs-code"># 2.配置main.js中引入axios</span><span class="hljs-code">import axios from &#x27;axios&#x27;;</span><span class="hljs-code"></span><span class="hljs-code">Vue.prototype.$http=axios;</span><span class="hljs-code"></span><span class="hljs-code"># 3.使用axios</span><span class="hljs-code">在需要发送异步请求的位置:this.$http.get(&quot;url&quot;).then((res)=&gt;&#123;&#125;) this.$http.post(&quot;url&quot;).then((res)=&gt;&#123;&#125;)</span></code></pre><hr><h2 id="16-Vue-Cli脚手架项目打包和部署"><a href="#16-Vue-Cli脚手架项目打包和部署" class="headerlink" title="16.Vue Cli脚手架项目打包和部署"></a>16.Vue Cli脚手架项目打包和部署</h2><pre><code class="hljs markdown"><span class="hljs-section"># 1.在项目根目录中执行如下命令:</span><span class="hljs-code">  vue run build</span><span class="hljs-code"></span><span class="hljs-code">注意:vue脚手架打包的项目必须在服务器上运行不能直接双击运行</span><span class="hljs-code"></span><span class="hljs-code"># 2.打包之后当前项目中变化</span><span class="hljs-code"> 在打包之后项目中出现dist目录,dist目录就是vue脚手架项目生产目录或者说是直接部署目录</span><span class="hljs-code"></span><span class="hljs-code"># 3.</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swagger</title>
    <link href="/2021/01/07/Swagger/"/>
    <url>/2021/01/07/Swagger/</url>
    
    <content type="html"><![CDATA[<h2 id="Swagger-引言"><a href="#Swagger-引言" class="headerlink" title="Swagger 引言"></a>Swagger 引言</h2><p>​         相信无论是前端还是后端开发，都或多或少地被接口文档折磨过。<code>前端经常抱怨后端给的接口文档和实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。其实无论是前端调用后端，还是后端调用前端，都期望有一个好的接口文档。</code>但是这个接口文档对于程序员来说，就跟注释一样，经常还会抱怨别人写的代码没有写注释，然而自己写起代码来，最讨厌的也是写注释。所以仅仅只听过强制了来规范大家是不够的，随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了。</p><h2 id="1-什么是-Swagger"><a href="#1-什么是-Swagger" class="headerlink" title="1. 什么是 Swagger"></a>1. 什么是 Swagger</h2><p>​         发现了痛点就要去找解决方案。解决方案用的人多了，就成了标准的规范，这就是 Swagger 的由来。通过这套规范，你只需要按照它的规范去定义接口及接口相关信息。再通过 Swagger 衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多做语言的客户端和服务端的代码，以及在线接口调试页面等等。这样，如果按照新的开发木事，在开发新版本或者迭代版本的时候，只需要更新 Swagger 描述文件，就可以自动生成接口文档和客户端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p><p>​        但即便如此，对于许多开发来说，编写这个 yml 或 json 格式的描述文件，本身也是有一定负担的工作，特别是在后面持续迭代开发的时候，往往会忽略更新这个描述文件，直接更改代码。久而久之，这个描述文件也和实际项目渐行渐远，基于该描述文件生成的接口文档也失去了参考意义。<strong>所以作为 Java 界服务端的大一统框架 Spring，迅速将 Swagger 规范纳入自身的标准，建立了 Spring-swagger 项目，后面改成了现在的 Springfox。通过在项目中引入 Springfox，可以扫描相关的代码，生成该描述文件，进而生成与代码一致的接口文档和客户端代码。</strong>这种通过代码生成接口文档的形式，在后面需求持续迭代的项目中，显得尤为重要和高效。</p><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6aa.png" alt="image-20200907160045833"></p><ul><li>总结：<strong>Swagger 就是一个用来定义接口标准，接口规范，同时能根据你的代码自动生成接口说明文档的一个工具。</strong></li></ul><hr><h2 id="2-官方提供的工具"><a href="#2-官方提供的工具" class="headerlink" title="2. 官方提供的工具"></a>2. 官方提供的工具</h2><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6ad.png" alt="image-20200907160803871"></p><p>​        <code>Swagger Codegen</code>：通过Codegen 可以将描述文件生成 html 格式和 cwiki 形式的接口文档，同时也能生成多种语言的服务端和客户端代码。支持通过 jar 包、docker、node 等方式在本地化执行生成。也可以在后面的 Swagger Editor 中在线生成。</p><p>​        <code>Swagger UI</code>：提供了一个可视化的 UI 页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署 UI 项目。</p><p>​        <code>Swagger Editor</code>：类似于 Markdown 编辑器的编辑 Swagger 描述文件的编辑器，该编辑器支持实时预览描述文件的更新效果，也提供了在线编辑器和本地部署器俩种方式。</p><p>​        <code>Swagger Inspector</code>：感觉和 Postman 差不多，是一个可以对接口进行测试的在线版的 postman。比如在 Swagger UI 里面做接口请求，会返回更多的信息，也会保存你请求的实际请求参数等数据。</p><p>​        <code>Swagger Hub</code>：集成了上面所有项目的各个功能，你可以以项目和版本为单位，将你的描述文件上传到 Swagger Hub 中。在 Swagger Hub 中可以完成上面项目的所有工作，需要注册账号，分免费版和收费版。</p><p>​        <code>Springfox Swagger</code>：Spring 基于 Swagger 规范，可以将基于 SpringMVC 和 Spring Boot 项目的项目代码，自动生成 JSON 格式的描述文件。本身不是属于 Swagger 官网提供的，在这里列出来做个说明，方便后面作一个使用的展开。</p><hr><h2 id="3-构建-Swagger-与-Spring-Boot-环境"><a href="#3-构建-Swagger-与-Spring-Boot-环境" class="headerlink" title="3. 构建 Swagger 与 Spring Boot 环境"></a>3. 构建 Swagger 与 Spring Boot 环境</h2><h3 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="3-2-编写-Swagger-配置类"><a href="#3-2-编写-Swagger-配置类" class="headerlink" title="3.2 编写 Swagger 配置类"></a>3.2 编写 Swagger 配置类</h3><p>这个配置类基本都是不变的。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableSwagger2</span>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)                .select()                <span class="hljs-comment">// 扫描哪个接口的包</span>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.baiyi.controller&quot;</span>))                .paths(PathSelectors.any())                .build().apiInfo(<span class="hljs-keyword">new</span> ApiInfoBuilder()                        .title(<span class="hljs-string">&quot;标题: SpringBoot 整合 Swagger 使用&quot;</span>)                        .description(<span class="hljs-string">&quot;详细信息: SpringBoot 整合 Swagger,详细信息......&quot;</span>)                        <span class="hljs-comment">// 版本信息</span>                        .version(<span class="hljs-string">&quot;1.1&quot;</span>)                        <span class="hljs-comment">// 开发文档的联系人</span>                        .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;baiyi&quot;</span>, <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;1101293873@qq.com&quot;</span>))                        .license(<span class="hljs-string">&quot;This Baidu License&quot;</span>)                        .licenseUrl(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)                        .build());    &#125;&#125;</code></pre><h3 id="3-3-启动-SpringBoot-项目"><a href="#3-3-启动-SpringBoot-项目" class="headerlink" title="3.3 启动 SpringBoot 项目"></a>3.3 启动 SpringBoot 项目</h3><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6b0.png" alt="image-20200907164327757"></p><h3 id="3-4-访问-Swagger-的-UI-界面"><a href="#3-4-访问-Swagger-的-UI-界面" class="headerlink" title="3.4 访问 Swagger 的 UI 界面"></a>3.4 访问 Swagger 的 UI 界面</h3><p><strong>访问 Swagger 提供的 UI 界面：</strong><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6b3.png" alt="image-20200907165602060"></p><hr><h2 id="4-使用-Swagger-构建"><a href="#4-使用-Swagger-构建" class="headerlink" title="4. 使用 Swagger 构建"></a>4. 使用 Swagger 构建</h2><h3 id="4-1-开发-Controller-接口"><a href="#4-1-开发-Controller-接口" class="headerlink" title="4.1 开发 Controller 接口"></a>4.1 开发 Controller 接口</h3><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;查询所有数据成功&quot;</span>);        map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">true</span>);        <span class="hljs-keyword">return</span> map;    &#125;&#125;</code></pre><h3 id="4-2-重启项目访问接口界面"><a href="#4-2-重启项目访问接口界面" class="headerlink" title="4.2 重启项目访问接口界面"></a>4.2 重启项目访问接口界面</h3><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0324.png" alt="image-20200907165951426"></p><hr><h2 id="5-Swagger-注解"><a href="#5-Swagger-注解" class="headerlink" title="5. Swagger 注解"></a>5. Swagger 注解</h2><h3 id="5-1-Api"><a href="#5-1-Api" class="headerlink" title="5.1 @Api"></a>5.1 @Api</h3><ul><li>作用：用来指定接口的描述文字</li><li>修饰范围：用在类上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-meta">@Api(tags = &quot;用户服务相关接口描叙&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;....&#125;</code></pre><h3 id="5-2-ApiOperation"><a href="#5-2-ApiOperation" class="headerlink" title="5.2 @ApiOperation"></a>5.2 @ApiOperation</h3><ul><li>作用：用来对接口中具体方法做描叙</li><li>修饰范围：用在方法上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;查询所有用户接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来查询所有用户信息的接口&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;查询所有数据成功&quot;</span>);    map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">true</span>);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><h3 id="5-3-ApiImplicitParams"><a href="#5-3-ApiImplicitParams" class="headerlink" title="5.3 @ApiImplicitParams"></a>5.3 @ApiImplicitParams</h3><ul><li>作用：用来接口中参数进行说明</li><li>修饰范围：用在方法上</li></ul><h4 id="5-3-1-普通参数使用"><a href="#5-3-1-普通参数使用" class="headerlink" title="5.3.1 普通参数使用"></a>5.3.1 普通参数使用</h4><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;保存用户信息接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来保存用户信息的接口&quot;)</span><span class="hljs-meta">@ApiImplicitParams(&#123;</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户 id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;21&quot;),</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;白衣&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(String id, String name)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, id);    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0329.png" alt="image-20200907172500905"></p><h4 id="5-3-2-RestFul-风格使用"><a href="#5-3-2-RestFul-风格使用" class="headerlink" title="5.3.2 RestFul 风格使用"></a>5.3.2 RestFul 风格使用</h4><p>如果使用的是 RestFul 风格进行传参，必须再添加一个 <code>paramType=&quot;path&quot;</code></p><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save/&#123;id&#125;/&#123;name&#125;&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;保存用户信息接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来保存用户信息的接口&quot;)</span><span class="hljs-meta">@ApiImplicitParams(&#123;</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户 id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;21&quot;, paramType = &quot;path&quot;),</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;白衣&quot;, paramType = &quot;path&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id,<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, id);    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da032e.png" alt="image-20200907172950893"></p><h4 id="5-3-3-JSON-格式使用"><a href="#5-3-3-JSON-格式使用" class="headerlink" title="5.3.3 JSON 格式使用"></a>5.3.3 JSON 格式使用</h4><p>如果是 RequestBody 的方式，需要定义一个对象进行接收。</p><ol><li>定义一个 User 对象</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><ol start="2"><li>编写 Controller</li></ol><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + user.getId());    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + user.getName());    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId());    map.put(<span class="hljs-string">&quot;name&quot;</span>, user.getName());    <span class="hljs-keyword">return</span> map;&#125;</code></pre><ol start="3"><li>重启项目，打开 UI 界面</li></ol><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0331.png" alt="image-20200907174402323"></p><p>测试：</p><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0335.png" alt="image-20200907174538702"></p><h3 id="5-4-ApiResponses"><a href="#5-4-ApiResponses" class="headerlink" title="5.4 @ApiResponses"></a>5.4 @ApiResponses</h3><ul><li>作用：用在请求的方法上，表示一组响应</li><li>修饰范围：用在方法上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save2&quot;)</span><span class="hljs-meta">@ApiResponses(&#123;</span><span class="hljs-meta">        @ApiResponse(code = 404, message = &quot;请求路径不对&quot;),</span><span class="hljs-meta">        @ApiResponse(code = 400, message = &quot;程序不对&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + user.getId());    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + user.getName());    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId());    map.put(<span class="hljs-string">&quot;name&quot;</span>, user.getName());    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679bd3ffa7d37b3da0c05.png" alt="image-20200907175213481"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="/2021/01/07/Mybatis-plus/"/>
    <url>/2021/01/07/Mybatis-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><h2 id="1-什么是Mybatis-Plus"><a href="#1-什么是Mybatis-Plus" class="headerlink" title="1.什么是Mybatis-Plus"></a>1.什么是Mybatis-Plus</h2><h3 id="1-1-什么是mybatis-plus"><a href="#1-1-什么是mybatis-plus" class="headerlink" title="1.1 什么是mybatis-plus"></a>1.1 什么是mybatis-plus</h3><p><code>官网:</code><a href="https://mybatis.plus/guide/">https://mybatis.plus/guide/</a></p><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54d6e.png" alt="image-20200509110144062"></p><h3 id="1-2-官方愿景"><a href="#1-2-官方愿景" class="headerlink" title="1.2 官方愿景"></a>1.2 官方愿景</h3><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54db2.png" alt="image-20200509110309834"></p><h3 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a>1.3 特性</h3><ul><li><strong>无侵入</strong>：<code>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</code></li><li><strong>损耗小</strong>：<code>启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</code></li><li><strong>强大的 CRUD 操作</strong>：<code>内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</code></li><li><strong>支持 Lambda 形式调用</strong>：<code>通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</code></li><li><strong>支持主键自动生成</strong>：<code>支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</code></li><li><strong>支持 ActiveRecord 模式</strong>：<code>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</code></li><li><strong>支持自定义全局通用操作</strong>：<code>支持全局通用方法注入（ Write once, use anywhere ）</code></li><li><strong>内置代码生成器</strong>：<code>采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</code></li><li><strong>内置分页插件</strong>：<code>基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</code></li><li><strong>分页插件支持多种数据库</strong>：<code>支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</code></li><li><strong>内置性能分析插件</strong>：<code>可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</code></li><li><strong>内置全局拦截插件</strong>：<code>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</code></li></ul><h3 id="1-4-支持数据库"><a href="#1-4-支持数据库" class="headerlink" title="1.4 支持数据库"></a>1.4 支持数据库</h3><ul><li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li></ul><h3 id="1-5-框架结构"><a href="#1-5-框架结构" class="headerlink" title="1.5 框架结构"></a>1.5 框架结构</h3><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54dc5.jpg" alt="img"></p><hr><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><h3 id="2-1-创建springboot项目"><a href="#2-1-创建springboot项目" class="headerlink" title="2.1 创建springboot项目"></a>2.1 创建springboot项目</h3><h4 id="1-并引入依赖"><a href="#1-并引入依赖" class="headerlink" title="1.并引入依赖"></a>1.并引入依赖</h4><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li><strong>注意</strong>:<code>不需要在引入mybatis的相关依赖,只引入这一个即可,当然数据库相关的驱动还的显式引入</code></li></ul><h4 id="2-在入口类加入注解"><a href="#2-在入口类加入注解" class="headerlink" title="2.在入口类加入注解"></a>2.在入口类加入注解</h4><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(MybatisApplication.class, args);    &#125;&#125;</code></pre><h4 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h4><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">logging.level.root</span>=<span class="hljs-string">info</span><span class="hljs-meta">logging.level.com.baizhi.dao</span>=<span class="hljs-string">debug</span></code></pre><h3 id="2-2-创建数据库以及表结构"><a href="#2-2-创建数据库以及表结构" class="headerlink" title="2.2 创建数据库以及表结构"></a>2.2 创建数据库以及表结构</h3><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`age`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`bir`</span> <span class="hljs-built_in">timestamp</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">1</span>;</code></pre><h3 id="2-3-开发实体类"><a href="#2-3-开发实体类" class="headerlink" title="2.3 开发实体类"></a>2.3 开发实体类</h3><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-comment">//lombok的注解用来生成get set 等相关方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> Date bir;&#125;</code></pre><h3 id="2-4-开发mapper通用实现"><a href="#2-4-开发mapper通用实现" class="headerlink" title="2.4 开发mapper通用实现"></a>2.4 开发mapper通用实现</h3><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper; <span class="hljs-comment">//提供了各种CRUD方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDAO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;  &#125;</code></pre><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> UserDAO userDAO;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;  List&lt;User&gt; users = userDAO.selectList(<span class="hljs-keyword">null</span>);  System.out.println(users);&#125;</code></pre><hr><h2 id="3-常用注解说明"><a href="#3-常用注解说明" class="headerlink" title="3.常用注解说明"></a>3.常用注解说明</h2><ul><li><strong>@TableName</strong>  </li><li><strong>@TableId</strong></li><li><strong>@TableField</strong></li></ul><h3 id="3-1-TableName注解"><a href="#3-1-TableName注解" class="headerlink" title="3.1 @TableName注解"></a>3.1 @TableName注解</h3><ul><li><strong>描述:</strong><code>用来将实体对象与数据库表名完成映射</code></li><li><strong>修饰范围:</strong> <code>用在类上</code></li><li><strong>常见属性:</strong><ul><li><strong>value:</strong>  <code>String类型,指定映射的表名</code></li><li><strong>resultMap:</strong><code> String类型,用来指定XML配置中resultMap的id值</code></li></ul></li></ul><h3 id="3-2-TableId注解"><a href="#3-2-TableId注解" class="headerlink" title="3.2 @TableId注解"></a>3.2 @TableId注解</h3><ul><li><p><strong>描述</strong>：<code>主键注解</code></p></li><li><p><strong>修饰范围:</strong><code>用在属性上</code></p></li><li><p><strong>常见属性:</strong></p><ul><li><strong>value:</strong> <code>String类型,指定实体类中与表中对应的主键列名</code></li><li><strong>type:</strong>  <code>枚举类型,指定主键生成类型</code></li></ul><p><img src="https://pic.downk.cc/item/5ff6662d3ffa7d37b3c553bd.png" alt="image-20200509140855571"></p></li></ul><h3 id="3-3-TableField"><a href="#3-3-TableField" class="headerlink" title="3.3 @TableField"></a>3.3 @TableField</h3><ul><li><strong>描述</strong>：<code>字段注解(非主键)</code></li><li><strong>修饰范围:</strong><code>用在属性上</code></li><li><strong>常用属性:</strong><ul><li><strong>value:</strong>    <code>String类型,用来指定对应的数据库表中的字段名</code></li><li><strong>el:</strong>    <code>String类型,映射为原生 #&#123; ... &#125; 逻辑,相当于写在 xml 里的 #&#123; ... &#125; 部分</code> 3.0不存在</li><li>exist    <code>boolean是否为数据库表字段 true代表是数据库字段,false代表不是</code></li></ul></li></ul><hr><h2 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a>4.常用方法</h2><h3 id="4-1-查询方法"><a href="#4-1-查询方法" class="headerlink" title="4.1 查询方法"></a>4.1 查询方法</h3><ul><li><p>查询所有</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  List&lt;User&gt; users = userDAO.selectList(<span class="hljs-keyword">null</span>);  users.forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li><li><p>查询一个</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOne</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);&#125;</code></pre></li><li><p>条件查询</p><pre><code class="hljs java"><span class="hljs-comment">//条件查询</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFind</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  <span class="hljs-comment">//queryWrapper.eq(&quot;age&quot;,23);//设置等值查询</span>  <span class="hljs-comment">//queryWrapper.lt(&quot;age&quot;,23);//设置小于查询</span>  <span class="hljs-comment">//queryWrapper.ge(&quot;age&quot;,23);//小于等于查询 gt 大于  ge 大于等于</span>  List&lt;User&gt; users = userDAO.selectList(queryWrapper);  users.forEach(user-&gt; System.out.println(user));&#125;</code></pre></li><li><p>模糊查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  queryWrapper.likeRight(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小&quot;</span>);  List&lt;User&gt; users = userDAO.selectList(queryWrapper);  users.forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre><ul><li>like 相当于 %?%</li><li>likeLeft 相当于 %?</li><li>likeRight 相当于 ?%</li></ul></li></ul><h3 id="4-2-添加方法"><a href="#4-2-添加方法" class="headerlink" title="4.2 添加方法"></a>4.2 添加方法</h3><ul><li><p>​    添加方法</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;  User entity = <span class="hljs-keyword">new</span> User();  entity.setAge(<span class="hljs-number">23</span>).setName(<span class="hljs-string">&quot;小明明&quot;</span>).setBir(<span class="hljs-keyword">new</span> Date());  userDAO.insert(entity);&#125;</code></pre></li></ul><h3 id="4-3-修改方法"><a href="#4-3-修改方法" class="headerlink" title="4.3 修改方法"></a>4.3 修改方法</h3><ul><li><p>基于id修改</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateById</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  user.setAge(<span class="hljs-number">24</span>);  userDAO.updateById(user);&#125;</code></pre><p>基于条件修改</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  user.setName(<span class="hljs-string">&quot;小陈陈&quot;</span>);  QueryWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  updateWrapper.eq(<span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>);  userDAO.update(user, updateWrapper);&#125;</code></pre></li></ul><h3 id="4-4-删除方法"><a href="#4-4-删除方法" class="headerlink" title="4.4 删除方法"></a>4.4 删除方法</h3><ul><li><p>基于id删除</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span></span>&#123;  userDAO.deleteById(<span class="hljs-string">&quot;3&quot;</span>);&#125;</code></pre></li><li><p>基于条件删除</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  wrapper.lambda().eq(<span class="hljs-keyword">true</span>,User::getAge,<span class="hljs-number">23</span>);  userDAO.delete(wrapper);&#125;</code></pre></li></ul><hr><h2 id="5-Mybatis-Plus分页查询"><a href="#5-Mybatis-Plus分页查询" class="headerlink" title="5.Mybatis-Plus分页查询"></a>5.Mybatis-Plus分页查询</h2><h3 id="0-预先配置"><a href="#0-预先配置" class="headerlink" title="0.预先配置"></a>0.预先配置</h3><ul><li><p><strong>注意:</strong><code>使用分页查询必须设置mybatis-plus提供的分页插件,才能实现分页效果</code></p><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;        PaginationInterceptor paginationInterceptor = <span class="hljs-keyword">new</span> PaginationInterceptor();        <span class="hljs-keyword">return</span> paginationInterceptor;    &#125;&#125;</code></pre><p><code>注意事项:目前分页查询仅仅支持单表查询,不能再表连接时使用分页插件</code></p></li></ul><h3 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1.分页查询"></a>1.分页查询</h3><ul><li><p>非条件分页查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  page = userDAO.selectPage(page, <span class="hljs-keyword">null</span>);  page.getRecords().forEach(user -&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li><li><p>带条件分页查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  queryWrapper.eq(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>);  IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  page = userDAO.selectPage(page, queryWrapper);  page.getRecords().forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li></ul><hr><h2 id="6-Mybatis-Plus多数据源配置"><a href="#6-Mybatis-Plus多数据源配置" class="headerlink" title="6. Mybatis-Plus多数据源配置"></a>6. Mybatis-Plus多数据源配置</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。·</p><p><img src="https://pic.downk.cc/item/5ff6662d3ffa7d37b3c553c7.png" alt="image-20200510110005920"></p><h3 id="6-1-引入dynamic-datasource-spring-boot-starter"><a href="#6-1-引入dynamic-datasource-spring-boot-starter" class="headerlink" title="6.1 引入dynamic-datasource-spring-boot-starter"></a>6.1 引入dynamic-datasource-spring-boot-starter</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="6-2-配置数据源"><a href="#6-2-配置数据源" class="headerlink" title="6.2 配置数据源"></a>6.2 配置数据源</h3><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.primary</span>=<span class="hljs-string">master  #指定默认数据源</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus-1?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.password</span>=<span class="hljs-string">root</span></code></pre><h3 id="6-3-创建多个数据库模拟不同mysql服务"><a href="#6-3-创建多个数据库模拟不同mysql服务" class="headerlink" title="6.3 创建多个数据库模拟不同mysql服务"></a>6.3 创建多个数据库模拟不同mysql服务</h3><h3 id="6-4-DS注解"><a href="#6-4-DS注解" class="headerlink" title="6.4 @DS注解"></a>6.4 @DS注解</h3><ul><li><strong>作用:</strong> <code>用来切换数据源的注解 </code></li><li><strong>修饰范围:</strong> <code>方法上和类上</code>，<strong>同时存在方法注解优先于类上注解</strong>。</li><li><strong>Value属性:</strong> <code>切换数据源名称</code></li></ul><h3 id="6-5-开发业务层"><a href="#6-5-开发业务层" class="headerlink" title="6.5 开发业务层"></a>6.5 开发业务层</h3><ul><li><p>业务接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span></span>&#123;    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span></span>;&#125;</code></pre></li></ul><ul><li><p>业务实现类</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserDAO userDAO;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> userDAO.selectList(<span class="hljs-keyword">null</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span> </span>&#123;        userDAO.insert(user);    &#125;&#125;</code></pre></li></ul><h3 id="6-6-测试结果"><a href="#6-6-测试结果" class="headerlink" title="6.6 测试结果"></a>6.6 测试结果</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baizhi;<span class="hljs-keyword">import</span> com.baizhi.entity.User;<span class="hljs-keyword">import</span> com.baizhi.service.UserService;<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@SpringBootTest</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserService</span> </span>&#123;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;        <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;        userService.findAll().forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;        User user = <span class="hljs-keyword">new</span> User();        user.setName(<span class="hljs-string">&quot;aaa&quot;</span>).setAge(<span class="hljs-number">23</span>).setBir(<span class="hljs-keyword">new</span> Date());        userService.save(user);    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
