<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springboot</title>
    <link href="/2021/01/07/springboot/"/>
    <url>/2021/01/07/springboot/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-微框架"><a href="#Spring-Boot-微框架" class="headerlink" title="Spring Boot 微框架"></a>Spring Boot 微框架</h1><h2 id="1-springboot的引言"><a href="#1-springboot的引言" class="headerlink" title="1. springboot的引言"></a>1. springboot的引言</h2><p>Spring Boot是由<code>Pivotal团队提供的全新框架</code>，其设计目的是用来<code>简化Spring应用的 初始搭建以及开发过程</code>。该框架使用了<code>特定的方式来进行配置</code>，从而使开发人员不 再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应 用开发领域(rapid application development)成为领导者。</p><p><code>springboot(微框架) = springmvc(控制器) + spring core(项目管理)</code></p><p>SSM Spring springmvc  mybatis    &lt;—-   SSM Spring  stauts2|struts1  mybatis  &lt;— SSH Spring Struts  Hibernate </p><hr><h2 id="2-springboot的特点"><a href="#2-springboot的特点" class="headerlink" title="2. springboot的特点"></a>2. springboot的特点</h2><ol><li><code>创建独立的Spring应用程序  </code></li><li><code>嵌入的Tomcat，无需部署WAR文件</code></li><li><code>简化Maven配置</code></li><li><code>自动配置Spring,没有XML配置</code></li></ol><hr><h2 id="3-springboot-的约定大于配置"><a href="#3-springboot-的约定大于配置" class="headerlink" title="3. springboot 的约定大于配置"></a>3. springboot 的约定大于配置</h2><p>项目目录结构:</p><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2f2.png" alt="image-20200321091519423"></p><ul><li><code>springboot 项目中必须在src/main/resources中放入application.yml(.properties)核心配置文件  名字必须为:application</code></li><li><code>springboot 项目中必须在src/main/java中所有子包之外构建全局入口类型,xxApplication,入口类一个springboot项目只能有一个</code></li></ul><h2 id="4-springboot的环境搭建"><a href="#4-springboot的环境搭建" class="headerlink" title="4. springboot的环境搭建"></a>4. springboot的环境搭建</h2><p>环境要求:</p><pre><code class="hljs markdown"><span class="hljs-section"># 1.System Requirements</span><span class="hljs-code">JDK18.+</span><span class="hljs-code">MAVEN3.3  or  Gradle 5.x and 6.x (4.10 is also supported but in a deprecated form)</span><span class="hljs-code">Spring Framework 5.2.4.RELEASE </span><span class="hljs-code"></span><span class="hljs-code"># 2.ServletContainers: </span><span class="hljs-code">Tomcat 9.0 </span><span class="hljs-code">    Jetty 9.4 </span><span class="hljs-code">    Undertow 2.0</span><span class="hljs-code"></span><span class="hljs-code"># 3.开发工具</span><span class="hljs-code">IDEA 2018版本 </span><span class="hljs-code">Eclipse 版本  17版本之后</span></code></pre><h5 id="4-1-项目中引入依赖"><a href="#4-1-项目中引入依赖" class="headerlink" title="4.1 项目中引入依赖"></a>4.1 项目中引入依赖</h5><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--继承springboot的父项目--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>     <span class="hljs-comment">&lt;!--引入springboot的web支持--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h5 id="4-2-引入配置文件"><a href="#4-2-引入配置文件" class="headerlink" title="4.2 引入配置文件"></a>4.2 引入配置文件</h5><p>​        <code>项目中src/main/resources/application.yml</code></p><h5 id="4-3-建包并创建控制器"><a href="#4-3-建包并创建控制器" class="headerlink" title="4.3 建包并创建控制器"></a>4.3 建包并创建控制器</h5><pre><code class="hljs java"><span class="hljs-comment">//在项目中创建指定的包结构</span><span class="hljs-comment">/*</span><span class="hljs-comment"> com</span><span class="hljs-comment">    +| baizhi</span><span class="hljs-comment">    +| controller */</span>                 <span class="hljs-meta">@Controller</span>                    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>                    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;                        <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>                        <span class="hljs-meta">@ResponseBody</span>                        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;                            System.out.println(<span class="hljs-string">&quot;======hello world=======&quot;</span>);                            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;                        &#125;                    &#125;</code></pre><h5 id="4-4-编写入口类"><a href="#4-4-编写入口类" class="headerlink" title="4.4 编写入口类"></a>4.4 编写入口类</h5><pre><code class="hljs java"><span class="hljs-comment">//在项目中如下的包结构中创建入口类 Application</span><span class="hljs-comment">/*</span><span class="hljs-comment">com</span><span class="hljs-comment">+| baizhi                  */</span>            <span class="hljs-meta">@SpringBootApplication</span>            <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;                    SpringApplication.run(Application.class,args);                &#125;            &#125;</code></pre><h5 id="4-5-运行main启动项目"><a href="#4-5-运行main启动项目" class="headerlink" title="4.5 运行main启动项目"></a>4.5 运行main启动项目</h5><pre><code class="hljs java">o.s.j.e.a.AnnotationMBeanExporter        : Registering beans <span class="hljs-keyword">for</span> JMX exposure on startups.b.c.e.t.TomcatEmbeddedServletContainer : <span class="hljs-function">Tomcat started on <span class="hljs-title">port</span><span class="hljs-params">(s)</span>: 8989 <span class="hljs-params">(http)</span></span><span class="hljs-function">com.baizhi.Application : Started Application in 2.152 <span class="hljs-title">seconds</span> <span class="hljs-params">(JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">2.611</span>)</span></span><span class="hljs-function"></span><span class="hljs-function"><span class="hljs-comment">//说明:  出现以上日志说明启动成功</span></span></code></pre><h5 id="4-6-访问项目"><a href="#4-6-访问项目" class="headerlink" title="4.6 访问项目"></a>4.6 访问项目</h5><pre><code class="hljs java"><span class="hljs-comment">//注意: springboot的项目默认没有项目名</span><span class="hljs-comment">//访问路径:  http://localhost:8080/hello/hello</span></code></pre><hr><h2 id="5-启动tomcat端口占用问题"><a href="#5-启动tomcat端口占用问题" class="headerlink" title="5. 启动tomcat端口占用问题"></a>5. 启动tomcat端口占用问题</h2><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span>                 <span class="hljs-comment">#用来指定内嵌服务器端口号</span>  <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span>  <span class="hljs-comment">#用来指定项目的访问路径</span></code></pre><hr><h2 id="6-springboot相关注解说明"><a href="#6-springboot相关注解说明" class="headerlink" title="6. springboot相关注解说明"></a>6. springboot相关注解说明</h2><pre><code class="hljs markdown"><span class="hljs-section"># Spring boot通常有一个名为 xxxApplication的类,入口类中有一个main方法, 在main方法中使用SpringApplication.run(xxxApplication.class,args)启动springboot应用的项目。</span><span class="hljs-section"># @RestController: 就是@Controller+@ResponseBody组合，支持RESTful访问方 式，返回结果都是json字符串。</span><span class="hljs-section"># @SpringBootApplication 注解等价于: </span><span class="hljs-code">@SpringBootConfiguration           标识注解,标识这是一个springboot的配置类</span><span class="hljs-code">@EnableAutoConfiguration 自动与项目中集成的第三方技术进行集成</span><span class="hljs-code">@ComponentScan 扫描入口类所在子包以及子包后代包中注解</span><span class="hljs-code">   </span></code></pre><hr><h2 id="7-springboot中配置文件的拆分"><a href="#7-springboot中配置文件的拆分" class="headerlink" title="7. springboot中配置文件的拆分"></a>7. springboot中配置文件的拆分</h2><pre><code class="hljs yml"><span class="hljs-comment">#说明: 在实际开发过程中生产环境和测试环境有可能是不一样的 因此将生产中的配置和测试中的配置拆分开,是非常必要的在springboot中也提供了配置文件拆分的方式. 这里以生产中项名名称不一致为例:</span><span class="hljs-string">生产中项目名为:</span> <span class="hljs-string">cmfz</span><span class="hljs-string">测试中项目名为:</span> <span class="hljs-string">springboot</span><span class="hljs-string">端口同时为:</span>   <span class="hljs-number">8080</span><span class="hljs-string">拆分如下:</span><span class="hljs-comment">#主配置文件:</span><span class="hljs-string">application.yml</span><span class="hljs-comment">#用来书写相同的的配置</span><span class="hljs-attr">server:</span><span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> <span class="hljs-comment">#生产和测试为同一个端口</span>                       <span class="hljs-comment">#生产配置文件:</span>    <span class="hljs-string">application-pord.yml</span>    <span class="hljs-attr">server:</span>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/cmfz</span>    <span class="hljs-comment">#测试配置文件:</span>    <span class="hljs-string">application-dev.yml</span>    <span class="hljs-attr">server:</span>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/springboot</span></code></pre><hr><h2 id="8-springboot中创建自定义简单对象"><a href="#8-springboot中创建自定义简单对象" class="headerlink" title="8.springboot中创建自定义简单对象"></a>8.springboot中创建自定义简单对象</h2><h3 id="8-1-管理单个对象"><a href="#8-1-管理单个对象" class="headerlink" title="8.1 管理单个对象"></a>8.1 管理单个对象</h3><blockquote><p>在springboot中可以管理自定义的<code>简单组件</code>对象的创建可以直接使用注解形式创建。</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 1.使用 @Repository  @Service @Controller 以及@Component管理不同简单对象</span><span class="hljs-code">如: 比如要通过工厂创建自定义User对象:</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;  <span class="hljs-keyword">private</span> String id;  <span class="hljs-keyword">private</span> String name;  ......&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.通过工厂创建之后可以在使用处任意注入该对象</span><span class="hljs-code">如:在控制器中使用自定义简单对象创建</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> User user;  ......&#125;</code></pre><h3 id="8-2-管理多个对象"><a href="#8-2-管理多个对象" class="headerlink" title="8.2 管理多个对象"></a>8.2 管理多个对象</h3><blockquote><p>在springboot中如果要管理<code>复杂对象</code>必须使用<code>@Configuration + @Bean</code>注解进行管理</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 1.管理复杂对象的创建</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Configuration(推荐)</span>|<span class="hljs-meta">@Component(不推荐)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Beans</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Calendar <span class="hljs-title">getCalendar</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> Calendar.getInstance();    &#125;&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.使用复杂对象</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> Calendar calendar;    ......&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 注意: </span><span class="hljs-code">1.@Configuration 配置注解主要用来生产多个组件交给工厂管理  (注册形式)</span><span class="hljs-code">  2.@Component     用来管理单个组件                      (包扫描形式)</span></code></pre><hr><h2 id="9-springboot中注入"><a href="#9-springboot中注入" class="headerlink" title="9.springboot中注入"></a>9.springboot中注入</h2><blockquote><p>​    springboot中提供了三种注入方式: <code>注入基本属性</code>,<code>对象注入</code></p></blockquote><h5 id="9-1-基本属性注入"><a href="#9-1-基本属性注入" class="headerlink" title="9.1 基本属性注入"></a>9.1 基本属性注入</h5><pre><code class="hljs markdown"><span class="hljs-section"># 1.@Value 属性注入   [重点]</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;      <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2.在配置文件中注入</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">xiaohei</span></code></pre><h5 id="9-2-对象方式注入"><a href="#9-2-对象方式注入" class="headerlink" title="9.2 对象方式注入"></a>9.2 对象方式注入</h5><pre><code class="hljs markdown"><span class="hljs-section"># 1. @ConfigurationProperties(prefix=&quot;前缀&quot;)</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> String  bir;    .....&#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 2. 编写配置文件</span></code></pre><pre><code class="hljs yml"><span class="hljs-attr">user:</span>  <span class="hljs-attr">id:</span> <span class="hljs-number">24</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">xiaohei</span>  <span class="hljs-attr">age:</span> <span class="hljs-number">23</span>  <span class="hljs-attr">bir:</span> <span class="hljs-number">2012</span><span class="hljs-string">/12/12</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 3. 引入依赖构建自定义注入元数据</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><hr><h2 id="10-springboot中两种模板配置"><a href="#10-springboot中两种模板配置" class="headerlink" title="10. springboot中两种模板配置"></a>10. springboot中两种模板配置</h2><h3 id="10-1-集成jsp模板"><a href="#10-1-集成jsp模板" class="headerlink" title="10.1 集成jsp模板"></a>10.1 集成jsp模板</h3><h5 id="10-1-1-引入jsp的集成jar包"><a href="#10-1-1-引入jsp的集成jar包" class="headerlink" title="10.1.1 引入jsp的集成jar包"></a>10.1.1 引入jsp的集成jar包</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="10-1-2-引入jsp运行插件"><a href="#10-1-2-引入jsp运行插件" class="headerlink" title="10.1.2 引入jsp运行插件"></a>10.1.2 引入jsp运行插件</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>springboot_day1<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>    <span class="hljs-comment">&lt;!--引入jsp运行插件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h5 id="10-1-3-配置视图解析器"><a href="#10-1-3-配置视图解析器" class="headerlink" title="10.1.3 配置视图解析器"></a>10.1.3 配置视图解析器</h5><pre><code class="hljs yml"><span class="hljs-comment">#在配置文件中引入视图解析器</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">mvc:</span>    <span class="hljs-attr">view:</span>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/</span>   <span class="hljs-comment"># /代表访问项目中webapp中页面</span>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span></code></pre><h5 id="10-1-4-第一种方式使用插件启动"><a href="#10-1-4-第一种方式使用插件启动" class="headerlink" title="10.1.4 第一种方式使用插件启动"></a>10.1.4 第一种方式使用插件启动</h5><p> <img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2ec.png" alt="image-20191129124602959"></p><h5 id="10-1-5-第二种方式使用idea中指定工作目录启动-推荐"><a href="#10-1-5-第二种方式使用idea中指定工作目录启动-推荐" class="headerlink" title="10.1.5 第二种方式使用idea中指定工作目录启动  [推荐]"></a>10.1.5 第二种方式使用idea中指定工作目录启动  [推荐]</h5><p> <img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2ef.png" alt="image-20191129124727562"></p><h5 id="10-1-6-启动访问jsp页面"><a href="#10-1-6-启动访问jsp页面" class="headerlink" title="10.1.6 启动访问jsp页面"></a>10.1.6 启动访问jsp页面</h5><pre><code class="hljs markdown">http://localhost:8989/cmfz/index.jsp</code></pre><h5 id="10-1-7-修改jsp无须重启应用"><a href="#10-1-7-修改jsp无须重启应用" class="headerlink" title="10.1.7 修改jsp无须重启应用"></a>10.1.7 修改jsp无须重启应用</h5><pre><code class="hljs properties"><span class="hljs-meta">server.servlet.jsp.init-parameters.development</span>=<span class="hljs-string">true</span></code></pre><h3 id="10-2-集成thymelaf模板"><a href="#10-2-集成thymelaf模板" class="headerlink" title="10.2 集成thymelaf模板"></a>10.2 集成thymelaf模板</h3><blockquote><p>Thymeleaf是一个用于web和独立环境的现代服务器端Java模板引擎。  –摘自官网<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p></blockquote><p><code>Thymeleaf</code>是跟Velocity、FreeMarker类似的模板引擎，它可以完全替代JSP，相较与其他的模板引擎相比, Thymeleaf在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。</p><h5 id="10-2-1-引入依赖"><a href="#10-2-1-引入依赖" class="headerlink" title="10.2.1 引入依赖"></a>10.2.1 引入依赖</h5><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用thymelaf--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="10-2-2-编写配置"><a href="#10-2-2-编写配置" class="headerlink" title="10.2.2 编写配置"></a>10.2.2 编写配置</h5><pre><code class="hljs properties"><span class="hljs-meta">spring.thymeleaf.prefix</span>=<span class="hljs-string">classpath:/templates/      #使用模板目录</span><span class="hljs-meta">spring.thymeleaf.suffix</span>=<span class="hljs-string">.html                      #使用模板后缀</span><span class="hljs-meta">spring.thymeleaf.encoding</span>=<span class="hljs-string">UTF-8                    #使用模板编码</span><span class="hljs-meta">spring.thymeleaf.enabled</span>=<span class="hljs-string">true                      #开始thymelaf模板</span><span class="hljs-meta">spring.thymeleaf.servlet.content-type</span>=<span class="hljs-string">text/html    #使用模板响应类型</span></code></pre><h5 id="10-2-3-编写控制器测试"><a href="#10-2-3-编写控制器测试" class="headerlink" title="10.2.3 编写控制器测试"></a>10.2.3 编写控制器测试</h5><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>    <span class="hljs-comment">//一定要是@Controller 不能再使用@RestController注解</span><span class="hljs-meta">@RequestMapping(&quot;hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@GetMapping(&quot;hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;测试与 thymeleaf 的集成&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;    &#125;&#125;</code></pre><h5 id="10-2-4-在templates目录中定义模板"><a href="#10-2-4-在templates目录中定义模板" class="headerlink" title="10.2.4 在templates目录中定义模板"></a>10.2.4 在templates目录中定义模板</h5><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2f5.png" alt="image-20200323085834206"></p><h5 id="10-2-5-测试访问"><a href="#10-2-5-测试访问" class="headerlink" title="10.2.5 测试访问"></a>10.2.5 测试访问</h5><pre><code class="hljs http"><span class="hljs-attribute">http://localhost:8989/springboot_day3/hello/hello</span></code></pre><h5 id="10-2-6-查看结果"><a href="#10-2-6-查看结果" class="headerlink" title="10.2.6 查看结果"></a>10.2.6 查看结果</h5><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2fb.png" alt="image-20200323085948499"></p><h5 id="10-2-7-开启直接访问html页面"><a href="#10-2-7-开启直接访问html页面" class="headerlink" title="10.2.7 开启直接访问html页面"></a>10.2.7 开启直接访问html页面</h5><pre><code class="hljs properties"><span class="hljs-meta">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/templates/,classpath:/static/</span></code></pre><h5 id="10-2-8-测试结果"><a href="#10-2-8-测试结果" class="headerlink" title="10.2.8 测试结果"></a>10.2.8 测试结果</h5><pre><code class="hljs http"><span class="hljs-attribute">http://localhost:8989/springboot_day3/index.html</span></code></pre><p>![image-20200323090142705](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323090142705.png)</p><h3 id="10-3-Thymeleaf基本使用"><a href="#10-3-Thymeleaf基本使用" class="headerlink" title="10.3 Thymeleaf基本使用"></a>10.3 Thymeleaf基本使用</h3><p><code>使用时必须在页面中加入thymeleaf如下命名空间:</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></code></pre><h5 id="10-3-1-展示单个数据"><a href="#10-3-1-展示单个数据" class="headerlink" title="10.3.1 展示单个数据"></a>10.3.1 展示单个数据</h5><h6 id="a-设置数据"><a href="#a-设置数据" class="headerlink" title="a. 设置数据"></a>a. 设置数据</h6><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>); 或 request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;小黑&quot;</span>);</code></pre><h6 id="b-获取数据"><a href="#b-获取数据" class="headerlink" title="b. 获取数据"></a>b. 获取数据</h6><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span>  ---&gt;获取数据</code></pre><p><code>注意:在springboot2.x版本中必须加入国际化配置文件才能正常展示:</code></p><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f301.png" alt="image-20200323100724749"></p><p>![image-20200323100747881](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323100747881.png)</p><h6 id="c-获取并解析含有html标签数据"><a href="#c-获取并解析含有html标签数据" class="headerlink" title="c. 获取并解析含有html标签数据"></a>c. 获取并解析含有html标签数据</h6><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;&lt;a href=&#x27;&#x27;&gt;张三&lt;/a&gt;&quot;</span>);model.addAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小陈&quot;</span>);</code></pre><ul><li>直接获取原样输出</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></code></pre><p>![image-20200323100956740](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323100956740.png)</p><ul><li>获取并解析</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:utext</span>=<span class="hljs-string">&quot;$&#123;name&#125;&quot;</span>/&gt;</span></code></pre><p>![image-20200323101457134](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323101457134.png)</p><ul><li><p>将数据赋值给表单元素</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></code></pre><p>![image-20200323103452620](../../../../微服务/编程不良人/springboot新版资料/springboot新版笔记/Spring Boot-2020微框架.assets/image-20200323103452620.png)</p></li></ul><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.使用 th:text=&quot;$&#123;属性名&#125;&quot;  获取对应数据,获取数据时会将对应标签中数据清空,因此最好是空标签</span><span class="hljs-code">2.使用 th:utext=&quot;$&#123;属性名&#125;&quot; 获取对应的数据,可以将数据中html先解析在渲染到页面</span><span class="hljs-code">3.使用 th:value=&quot;$&#123;属性名&#125;&quot; 获取数据直接作为表单元素value属性</span></code></pre><h5 id="10-3-2-展示对象数据"><a href="#10-3-2-展示对象数据" class="headerlink" title="10.3.2 展示对象数据"></a>10.3.2 展示对象数据</h5><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;21&quot;</span>,<span class="hljs-string">&quot;xiaochen&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-keyword">new</span> Date()));</code></pre><pre><code class="hljs html">id:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>name:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>age:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>bir: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.bir&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  ====  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(user.bir, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 日期格式化</code></pre><h5 id="10-3-3-条件展示数据"><a href="#10-3-3-条件展示数据" class="headerlink" title="10.3.3 条件展示数据"></a>10.3.3 条件展示数据</h5><pre><code class="hljs java">model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;21&quot;</span>,<span class="hljs-string">&quot;xiaochen&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-keyword">new</span> Date()));</code></pre><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user.age&#125; eq 23&quot;</span>&gt;</span>  青年<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 运算符</span><span class="hljs-code">    gt：great than（大于）&gt;</span><span class="hljs-code">    ge：great equal（大于等于）&gt;=</span><span class="hljs-code">    eq：equal（等于）==</span><span class="hljs-code">    lt：less than（小于）&lt;</span><span class="hljs-code">    le：less equal（小于等于）&lt;=</span><span class="hljs-code">    ne：not equal（不等于）!=</span></code></pre><h5 id="10-3-4-展示多条数据"><a href="#10-3-4-展示多条数据" class="headerlink" title="10.3.4 展示多条数据"></a>10.3.4 展示多条数据</h5><ul><li>直接遍历集合</li></ul><pre><code class="hljs java"></code></pre><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(user.bir,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre><ul><li>遍历时获取遍历状态</li></ul><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user,userStat:$&#123;users&#125;&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.count&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取遍历次数  count 从1开始 index 从0开始   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.odd&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取当前遍历是否是奇数行   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.even&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.age&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取当前遍历是否是偶数行   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.size&#125;&quot;</span>/&gt;</span>-<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.bir&#125;&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   获取当前集合的总条数<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></code></pre><h5 id="10-3-5-引入静态资源"><a href="#10-3-5-引入静态资源" class="headerlink" title="10.3.5 引入静态资源"></a>10.3.5 引入静态资源</h5><p><code>使用thymeleaf模板项目中静态资源默认放在resources路径小static目录中</code></p><ul><li><p>项目中放入对应静态资源</p><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2e4.png" alt="image-20200323142307411"></p></li><li><p>页面中引入</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/css/index.css&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/js/jquery-min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></li></ul><h2 id="11-springboot集成mybatis"><a href="#11-springboot集成mybatis" class="headerlink" title="11. springboot集成mybatis"></a>11. springboot集成mybatis</h2><h5 id="11-1-引入依赖"><a href="#11-1-引入依赖" class="headerlink" title="11.1 引入依赖"></a>11.1 引入依赖</h5><pre><code class="hljs markdown"><span class="xml"><span class="hljs-comment">&lt;!--整合mybatis--&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><span class="hljs-code">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><span class="hljs-code">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><span class="hljs-code">    &lt;version&gt;1.3.3&lt;/version&gt;</span><span class="hljs-code">&lt;/dependency&gt;</span><span class="hljs-code"></span><span class="hljs-code">&lt;dependency&gt;</span><span class="hljs-code">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><span class="hljs-code">&lt;artifactId&gt;druid&lt;/artifactId&gt;</span><span class="hljs-code">&lt;version&gt;1.1.12&lt;/version&gt;</span><span class="hljs-code">&lt;/dependency&gt;</span><span class="hljs-code"></span><span class="hljs-code">&lt;dependency&gt;</span><span class="hljs-code">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><span class="hljs-code">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><span class="hljs-code">    &lt;version&gt;5.1.38&lt;/version&gt;</span><span class="hljs-code">&lt;/dependency&gt;</span><span class="hljs-code"></span><span class="hljs-code">&gt;说明:由于springboot整合mybatis版本中默认依赖mybatis 因此不需要额外引入mybati版本,否则会出现冲突</span></code></pre><h5 id="11-2-配置配置文件"><a href="#11-2-配置配置文件" class="headerlink" title="11.2 配置配置文件"></a>11.2 配置配置文件</h5><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">mvc:</span>    <span class="hljs-attr">view:</span>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">/</span>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">type:</span> <span class="hljs-string">org.apache.commons.dbcp.BasicDataSource</span>   <span class="hljs-comment">#指定连接池类型</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span>        <span class="hljs-comment">#指定驱动</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/cmfz</span>           <span class="hljs-comment">#指定url</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><span class="hljs-comment">#指定用户名</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span> <span class="hljs-comment">#指定密码</span></code></pre><h5 id="11-3-加入mybatis配置"><a href="#11-3-加入mybatis配置" class="headerlink" title="11.3 加入mybatis配置"></a>11.3 加入mybatis配置</h5><pre><code class="hljs yml"><span class="hljs-comment">#配置文件中加入如下配置:</span><span class="hljs-attr">mybatis:</span>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:com/baizhi/mapper/*.xml</span>  <span class="hljs-comment">#指定mapper配置文件位置</span>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.baizhi.entity</span>              <span class="hljs-comment">#指定起别名来的类</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">//入口类中加入如下配置:</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span>   <span class="hljs-comment">//必须在入口类中加入这个配置</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(Application.class,args);    &#125;&#125;</code></pre><h5 id="11-4-建表"><a href="#11-4-建表" class="headerlink" title="11.4 建表"></a>11.4 建表</h5><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`t_clazz`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`no`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">90</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;</code></pre><h5 id="11-5-开发实体类"><a href="#11-5-开发实体类" class="headerlink" title="11.5 开发实体类"></a>11.5 开发实体类</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clazz</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String no;    <span class="hljs-comment">//get set 方法省略....</span>&#125;</code></pre><h5 id="11-6-开发DAO接口以及Mapper"><a href="#11-6-开发DAO接口以及Mapper" class="headerlink" title="11.6 开发DAO接口以及Mapper"></a>11.6 开发DAO接口以及Mapper</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ClazzDAO</span> </span>&#123;    <span class="hljs-function">List&lt;Clazz&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.baizhi.dao.ClazzDAO&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Clazz&quot;</span>&gt;</span>        select * from t_clazz     <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h5 id="11-7-开发Service以及实现"><a href="#11-7-开发Service以及实现" class="headerlink" title="11.7 开发Service以及实现"></a>11.7 开发Service以及实现</h5><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ClazzService</span> </span>&#123;    <span class="hljs-function">List&lt;Clazz&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//实现</span><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClazzServiceImpl</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title">ClazzService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ClazzDAO clazzDAO;        <span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Clazz&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> clazzDAO.findAll();    &#125;&#125;</code></pre><h5 id="11-8-引入测试依赖"><a href="#11-8-引入测试依赖" class="headerlink" title="11.8 引入测试依赖"></a>11.8 引入测试依赖</h5><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="11-9-编写测试类"><a href="#11-9-编写测试类" class="headerlink" title="11.9 编写测试类"></a>11.9 编写测试类</h5><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-meta">@SpringBootTest(classes = Application.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClazzService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ClazzService clazzService;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        List&lt;Clazz&gt; all = clazzService.findAll();        <span class="hljs-keyword">for</span> (Clazz clazz : all) &#123;            System.out.println(clazz);        &#125;    &#125;&#125;</code></pre><h2 id="12-开启jsp页面热部署"><a href="#12-开启jsp页面热部署" class="headerlink" title="12.开启jsp页面热部署"></a>12.开启jsp页面热部署</h2><h5 id="12-1-引言"><a href="#12-1-引言" class="headerlink" title="12.1 引言"></a>12.1 引言</h5><blockquote><p><code>在springboot中默认对jsp运行为生产模式,不允许修改内容保存后立即生效,因此在开发过程需要调试jsp页面每次需要重新启动服务器这样极大影响了我们的效率,为此springboot中提供了可以将默认的生产模式修改为调试模式,改为调试模式后就可以保存立即生效,如何配置为测试模式需要在配置文件中加入如下配置即可修改为开发模式。</code></p></blockquote><h5 id="12-2-配置开启测试模式"><a href="#12-2-配置开启测试模式" class="headerlink" title="12.2 配置开启测试模式"></a>12.2 配置开启测试模式</h5><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8989</span>  <span class="hljs-attr">jsp-servlet:</span>    <span class="hljs-attr">init-parameters:</span>      <span class="hljs-attr">development:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#开启jsp页面的调试模式</span></code></pre><hr><h2 id="13-springboot中devtools热部署"><a href="#13-springboot中devtools热部署" class="headerlink" title="13.springboot中devtools热部署"></a>13.springboot中devtools热部署</h2><h5 id="13-1-引言"><a href="#13-1-引言" class="headerlink" title="13.1  引言"></a>13.1  引言</h5><blockquote><p>​    <code>为了进一步提高开发效率,springboot为我们提供了全局项目热部署,日后在开发过程中修改了部分代码以及相关配置文件后,不需要每次重启使修改生效,在项目中开启了springboot全局热部署之后只需要在修改之后等待几秒即可使修改生效。</code></p></blockquote><h5 id="13-2-开启热部署"><a href="#13-2-开启热部署" class="headerlink" title="13.2 开启热部署"></a>13.2 开启热部署</h5><h6 id="13-2-1-项目中引入依赖"><a href="#13-2-1-项目中引入依赖" class="headerlink" title="13.2.1 项目中引入依赖"></a>13.2.1 项目中引入依赖</h6><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h6 id="13-2-2-设置idea中支持自动编译"><a href="#13-2-2-设置idea中支持自动编译" class="headerlink" title="13.2.2 设置idea中支持自动编译"></a>13.2.2 设置idea中支持自动编译</h6><pre><code class="hljs markdown"><span class="hljs-section"># 1.开启自动编译</span><span class="hljs-code">Preferences | Build, Execution, Deployment | Compiler -&gt; 勾选上 Build project automatically 这个选项</span><span class="hljs-code"></span><span class="hljs-code"># 2.开启允许在运行过程中修改文件</span><span class="hljs-code">ctrl + alt + shift + / ----&gt;选择1.Registry ---&gt; 勾选 compiler.automake.allow.when.app.running 这个选项</span></code></pre><h6 id="13-2-3-启动项目检测热部署是否生效"><a href="#13-2-3-启动项目检测热部署是否生效" class="headerlink" title="13.2.3 启动项目检测热部署是否生效"></a>13.2.3 启动项目检测热部署是否生效</h6><pre><code class="hljs markdown"><span class="hljs-section"># 1.启动出现如下日志代表生效</span></code></pre><pre><code class="hljs verilog"><span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span><span class="hljs-variable">.566</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] com<span class="hljs-variable">.baizhi</span><span class="hljs-variable">.InitApplication</span>               : Starting InitApplication on chenyannandeMacBook-Pro<span class="hljs-variable">.local</span> <span class="hljs-keyword">with</span> PID <span class="hljs-number">4496</span> (/Users/chenyannan/IdeaProjects/ideacode/springboot_day1/target/classes started by chenyannan in /Users/chenyannan/IdeaProjects/ideacode/springboot_day1)<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span><span class="hljs-variable">.567</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] com<span class="hljs-variable">.baizhi</span><span class="hljs-variable">.InitApplication</span>               : The following profiles are active: dev<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span><span class="hljs-variable">.612</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] ationConfigEmbeddedWebApplicationContext : Refreshing org<span class="hljs-variable">.springframework</span><span class="hljs-variable">.boot</span><span class="hljs-variable">.context</span><span class="hljs-variable">.embedded</span><span class="hljs-variable">.AnnotationConfigEmbeddedWebApplicationContext</span>@<span class="hljs-number">66</span>d799c5: startup date [Wed Jul <span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">17</span> CST <span class="hljs-number">2019</span>]; root of <span class="hljs-keyword">context</span> hierarchy<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">18</span><span class="hljs-variable">.782</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] s<span class="hljs-variable">.b</span><span class="hljs-variable">.c</span><span class="hljs-variable">.e</span><span class="hljs-variable">.t</span><span class="hljs-variable">.TomcatEmbeddedServletContainer</span> : Tomcat initialized <span class="hljs-keyword">with</span> port(s): <span class="hljs-number">8989</span> (http)<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">18</span><span class="hljs-variable">.796</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] o<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardService</span>   : Starting service [Tomcat]<span class="hljs-number">2019</span>-<span class="hljs-number">07</span>-<span class="hljs-number">17</span> <span class="hljs-number">21</span>:<span class="hljs-number">23</span>:<span class="hljs-number">18</span><span class="hljs-variable">.797</span>  INFO <span class="hljs-number">4496</span> --- [  restartedMain] org<span class="hljs-variable">.apache</span><span class="hljs-variable">.catalina</span><span class="hljs-variable">.core</span><span class="hljs-variable">.StandardEngine</span>  : Starting Servlet Engine: Apache Tomcat/<span class="hljs-number">8</span><span class="hljs-variable">.5</span><span class="hljs-variable">.20</span></code></pre><blockquote><p><code>注意:日志出现restartedMain代表已经生效,在使用热部署时如果遇到修改之后不能生效,请重试重启项目在试</code></p></blockquote><h2 id="14-logback日志的集成"><a href="#14-logback日志的集成" class="headerlink" title="14. logback日志的集成"></a>14. logback日志的集成</h2><h5 id="14-1-logback简介"><a href="#14-1-logback简介" class="headerlink" title="14.1 logback简介"></a>14.1 logback简介</h5><blockquote><p>Logback是由<a href="https://baike.baidu.com/item/log4j/480673">log4j</a>创始人设计的又一个开源日志组件。目前，logback分为三个模块：logback-core，logback-classic和logback-access。是对log4j日志展示进一步改进</p></blockquote><h5 id="14-2-日志的级别"><a href="#14-2-日志的级别" class="headerlink" title="14.2 日志的级别"></a>14.2 日志的级别</h5><pre><code>&gt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; OFF&gt;&gt; 日志级别由低到高:  `日志级别越高输出的日志信息越少`</code></pre><h5 id="14-3-项目中日志分类"><a href="#14-3-项目中日志分类" class="headerlink" title="14.3 项目中日志分类"></a>14.3 项目中日志分类</h5><pre><code>&gt; 日志分为两类&gt;&gt;  一种是rootLogger :     用来监听项目中所有的运行日志 包括引入依赖jar中的日志 &gt;&gt;  一种是logger :         用来监听项目中指定包中的日志信息</code></pre><h5 id="14-4-java项目中使用"><a href="#14-4-java项目中使用" class="headerlink" title="14.4 java项目中使用"></a>14.4 java项目中使用</h5><h6 id="14-4-1-logback配置文件"><a href="#14-4-1-logback配置文件" class="headerlink" title="14.4.1 logback配置文件"></a>14.4.1 logback配置文件</h6><pre><code>    &gt; logback的配置文件必须放在项目根目录中 且名字必须为logback.xml</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义项目中日志输出位置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--定义项目的日志输出格式--&gt;</span>        <span class="hljs-comment">&lt;!--定义项目的日志输出格式--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span> [%p] %d&#123;yyyy-MM-dd HH:mm:ss&#125; %m %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!--项目中跟日志控制--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;stdout&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>    <span class="hljs-comment">&lt;!--项目中指定包日志控制--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.baizhi.dao&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h6 id="14-4-2-具体类中使用日志"><a href="#14-4-2-具体类中使用日志" class="headerlink" title="14.4.2 具体类中使用日志"></a>14.4.2 具体类中使用日志</h6><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">//声明日志成员</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(HelloController.class);    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;======hello world=======&quot;</span>);        logger.debug(<span class="hljs-string">&quot;DEBUG&quot;</span>);        logger.info(<span class="hljs-string">&quot;INFO&quot;</span>);        logger.warn(<span class="hljs-string">&quot;WARN&quot;</span>);        logger.error(<span class="hljs-string">&quot;ERROR&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;    &#125;&#125;</code></pre><h6 id="14-4-3-使用默认日志配置"><a href="#14-4-3-使用默认日志配置" class="headerlink" title="14.4.3 使用默认日志配置"></a>14.4.3 使用默认日志配置</h6><pre><code class="hljs yml"><span class="hljs-attr">logging:</span>  <span class="hljs-attr">level:</span>    <span class="hljs-attr">root:</span> <span class="hljs-string">debug</span>    <span class="hljs-attr">com.baizhi.dao:</span> <span class="hljs-string">debug</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">/Users/chenyannan/aa.log</span>  <span class="hljs-attr">file:</span> <span class="hljs-string">bbb.log</span></code></pre><hr><h2 id="15-切面编程"><a href="#15-切面编程" class="headerlink" title="15. 切面编程"></a>15. 切面编程</h2><h5 id="15-1-引言"><a href="#15-1-引言" class="headerlink" title="15.1 引言"></a>15.1 引言</h5><blockquote><p>springboot是对原有项目中spring框架和springmvc的进一步封装,因此在springboot中同样支持spring框架中AOP切面编程,不过在springboot中为了快速开发仅仅提供了注解方式的切面编程.</p></blockquote><p><img src="https://pic.downk.cc/item/5ff693673ffa7d37b3f5f2e6.png" alt="image-20200327115039033"></p><h5 id="15-2-使用"><a href="#15-2-使用" class="headerlink" title="15.2 使用"></a>15.2 使用</h5><h6 id="15-2-1-引入依赖"><a href="#15-2-1-引入依赖" class="headerlink" title="15.2.1 引入依赖"></a>15.2.1 引入依赖</h6><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h6 id="15-2-2-相关注解"><a href="#15-2-2-相关注解" class="headerlink" title="15.2.2 相关注解"></a>15.2.2 相关注解</h6><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">    <span class="hljs-doctag">@Aspect</span> 用来类上,代表这个类是一个切面</span><span class="hljs-comment">    <span class="hljs-doctag">@Before</span> 用在方法上代表这个方法是一个前置通知方法 </span><span class="hljs-comment">    <span class="hljs-doctag">@After</span> 用在方法上代表这个方法是一个后置通知方法 <span class="hljs-doctag">@Around</span> 用在方法上代表这个方法是一个环绕的方法</span><span class="hljs-comment">    <span class="hljs-doctag">@Around</span> 用在方法上代表这个方法是一个环绕的方法</span><span class="hljs-comment">**/</span></code></pre><h6 id="15-2-3-前置切面"><a href="#15-2-3-前置切面" class="headerlink" title="15.2.3 前置切面"></a>15.2.3 前置切面</h6><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-meta">@Before(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);        joinPoint.getTarget();<span class="hljs-comment">//目标对象</span>        joinPoint.getSignature();<span class="hljs-comment">//方法签名</span>        joinPoint.getArgs();<span class="hljs-comment">//方法参数</span>    &#125;&#125;</code></pre><h6 id="15-2-4-后置切面"><a href="#15-2-4-后置切面" class="headerlink" title="15.2.4 后置切面"></a>15.2.4 后置切面</h6><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-meta">@After(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(JoinPoint joinPoint)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);        joinPoint.getTarget();<span class="hljs-comment">//目标对象</span>        joinPoint.getSignature();<span class="hljs-comment">//方法签名</span>        joinPoint.getArgs();<span class="hljs-comment">//方法参数</span>    &#125;&#125;</code></pre><pre><code>&gt; **注意: 前置通知和后置通知都没有返回值,方法参数都为joinpoint**</code></pre><h6 id="15-2-5-环绕切面"><a href="#15-2-5-环绕切面" class="headerlink" title="15.2.5 环绕切面"></a>15.2.5 环绕切面</h6><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;    <span class="hljs-meta">@Around(&quot;execution(* com.baizhi.service.*.*(..))&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">before</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        System.out.println(<span class="hljs-string">&quot;进入环绕通知&quot;</span>);        proceedingJoinPoint.getTarget();<span class="hljs-comment">//目标对象</span>        proceedingJoinPoint.getSignature();<span class="hljs-comment">//方法签名</span>        proceedingJoinPoint.getArgs();<span class="hljs-comment">//方法参数</span>        Object proceed = proceedingJoinPoint.proceed();<span class="hljs-comment">//放行执行目标方法</span>        System.out.println(<span class="hljs-string">&quot;目标方法执行之后回到环绕通知&quot;</span>);        <span class="hljs-keyword">return</span> proceed;<span class="hljs-comment">//返回目标方法返回值</span>    &#125;&#125;</code></pre><blockquote><p><strong><code>注意: 环绕通知存在返回值,参数为ProceedingJoinPoint,如果执行放行,不会执行目标方法,一旦放行必须将目标方法的返回值返回,否则调用者无法接受返回数据</code></strong></p></blockquote><hr><h2 id="13-文件上传下载"><a href="#13-文件上传下载" class="headerlink" title="13. 文件上传下载"></a>13. 文件上传下载</h2><h5 id="13-1-文件上传"><a href="#13-1-文件上传" class="headerlink" title="13.1 文件上传"></a>13.1 文件上传</h5><p>定义:<code>用户访问当前系统,将自己本地计算机中文件通过浏览器上传到当前系统所在的服务器过程中称之为文件的上传</code></p><h6 id="13-1-1-准备上传页面"><a href="#13-1-1-准备上传页面" class="headerlink" title="13.1.1 准备上传页面"></a>13.1.1 准备上传页面</h6><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;路径....&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">1. 表单提交方式必须是post</span><span class="hljs-comment">2. 表单的enctype属性必须为multipart/form-data</span><span class="hljs-comment">3. 后台接受变量名字要与文件选择name属性一致</span><span class="hljs-comment">--&gt;</span></code></pre><h6 id="13-1-2-编写控制器"><a href="#13-1-2-编写控制器" class="headerlink" title="13.1.2 编写控制器"></a>13.1.2 编写控制器</h6><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileController</span> </span>&#123;  <span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(MultipartFile aa, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        String realPath = request.getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);        aa.transferTo(<span class="hljs-keyword">new</span> File(realPath,aa.getOriginalFilename()));<span class="hljs-comment">//文件上传</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;  &#125;&#125;</code></pre><h6 id="13-1-3-修改文件上传大小"><a href="#13-1-3-修改文件上传大小" class="headerlink" title="13.1.3 修改文件上传大小"></a>13.1.3 修改文件上传大小</h6><pre><code class="hljs yml"><span class="hljs-comment">#上传时出现如下异常:  上传文件的大小超出默认配置  默认10M</span><span class="hljs-attr">nested exception is java.lang.IllegalStateException:</span> <span class="hljs-string">org.apache.tomcat.util.http.fileupload.FileUploadBase$SizeLimitExceededException:</span> <span class="hljs-string">the</span> <span class="hljs-string">request</span> <span class="hljs-string">was</span> <span class="hljs-string">rejected</span> <span class="hljs-string">because</span> <span class="hljs-string">its</span> <span class="hljs-string">size</span> <span class="hljs-string">(38443713)</span> <span class="hljs-string">exceeds</span> <span class="hljs-string">the</span> <span class="hljs-string">configured</span> <span class="hljs-string">maximum</span> <span class="hljs-string">(10485760)</span><span class="hljs-comment">#修改上传文件大小:</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">http:</span>    <span class="hljs-attr">multipart:</span>       <span class="hljs-attr">max-request-size:</span> <span class="hljs-number">209715200</span>  <span class="hljs-comment">#用来控制文件上传大小的限制</span>       <span class="hljs-attr">max-file-size:</span> <span class="hljs-number">209715200</span> <span class="hljs-comment">#用来指定服务端最大文件大小   </span><span class="hljs-string">spring.servlet.multipart.max-file-size=500MB</span><span class="hljs-string">spring.servlet.multipart.max-request-size=500MB</span></code></pre><h5 id="13-2-文件下载"><a href="#13-2-文件下载" class="headerlink" title="13.2 文件下载"></a>13.2 文件下载</h5><h6 id="13-2-1-提供下载文件链接"><a href="#13-2-1-提供下载文件链接" class="headerlink" title="13.2.1 提供下载文件链接"></a>13.2.1 提供下载文件链接</h6><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../file/download?fileName=corejava.txt&quot;</span>&gt;</span>corejava.txt<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h6 id="13-2-2-开发控制器"><a href="#13-2-2-开发控制器" class="headerlink" title="13.2.2 开发控制器"></a>13.2.2 开发控制器</h6><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/download&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(String fileName, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        String realPath = request.getRealPath(<span class="hljs-string">&quot;/upload&quot;</span>);        FileInputStream is = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(realPath, fileName));        ServletOutputStream os = response.getOutputStream();        response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>,<span class="hljs-string">&quot;attachment;fileName=&quot;</span>+ URLEncoder.encode(fileName,<span class="hljs-string">&quot;UTF-8&quot;</span>));        IOUtils.copy(is,os);        IOUtils.closeQuietly(is);        IOUtils.closeQuietly(os);    &#125;</code></pre><hr><h2 id="14-拦截器"><a href="#14-拦截器" class="headerlink" title="14. 拦截器"></a>14. 拦截器</h2><h5 id="14-1-开发拦截器"><a href="#14-1-开发拦截器" class="headerlink" title="14.1 开发拦截器"></a>14.1 开发拦截器</h5><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object o)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;======1=====&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//返回true 放行  返回false阻止</span>    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;=====2=====&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object o, Exception e)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;=====3=====&quot;</span>);    &#125;&#125;</code></pre><h5 id="14-2-配置拦截器"><a href="#14-2-配置拦截器" class="headerlink" title="14.2 配置拦截器"></a>14.2 配置拦截器</h5><pre><code class="hljs java"><span class="hljs-comment">//1.x中拦截器配置</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        <span class="hljs-comment">//添加拦截器</span>        registry.addInterceptor(<span class="hljs-keyword">new</span> MyInterceptor())            .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<span class="hljs-comment">//定义拦截路径</span>            .excludePathPatterns(<span class="hljs-string">&quot;/hello/**&quot;</span>); <span class="hljs-comment">//排除拦截路径</span>    &#125;&#125;<span class="hljs-comment">//2.x中拦截器配置</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="hljs-keyword">new</span> MyInterceptor())<span class="hljs-comment">//添加拦截器</span>                .addPathPatterns(<span class="hljs-string">&quot;/hello/**&quot;</span>)<span class="hljs-comment">//添加拦截的请求路径</span>                .excludePathPatterns(<span class="hljs-string">&quot;/hello/world&quot;</span>);<span class="hljs-comment">//添加排除那些请求路径不经过拦截器</span>    &#125;&#125;</code></pre><p><code>注意:在springboot2.x版本中自定义拦截器之后出现项目中静态资源 404情况,需要在自定义拦截器的配置中加入如下配置即可:</code></p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(<span class="hljs-keyword">new</span> LoginInterceptor())                .addPathPatterns(<span class="hljs-string">&quot;/file/**&quot;</span>)                .excludePathPatterns(<span class="hljs-string">&quot;/js/**&quot;</span>, <span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/files/**&quot;</span>);<span class="hljs-comment">//放行静态资源 静态资源被认为是一个控制器请求</span>    &#125;<span class="hljs-comment">//springboot2.x 静态资源在自定义拦截器之后无法访问的解决方案</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>) <span class="hljs-comment">//代表以什么样的请求路径访问静态资源</span>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>)                .addResourceLocations(<span class="hljs-string">&quot;classpath:/templates/&quot;</span>);    &#125;&#125;</code></pre><hr><h2 id="15-war包部署"><a href="#15-war包部署" class="headerlink" title="15. war包部署"></a>15. war包部署</h2><h5 id="15-1-设置打包方式为war"><a href="#15-1-设置打包方式为war" class="headerlink" title="15.1 设置打包方式为war"></a>15.1 设置打包方式为war</h5><blockquote><p>​    <strong><packaging>war</packaging></strong></p></blockquote><h5 id="15-2-在插件中指定入口类"><a href="#15-2-在插件中指定入口类" class="headerlink" title="15.2 在插件中指定入口类"></a>15.2 在插件中指定入口类</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-comment">&lt;!--使用热部署出现中文乱码解决方案--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span>          <span class="hljs-comment">&lt;!--增加jvm参数--&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">jvmArguments</span>&gt;</span>-Dfile.encoding=UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">jvmArguments</span>&gt;</span>          <span class="hljs-comment">&lt;!--指定入口类--&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.baizhi.Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h5 id="15-3-排除内嵌的tomcat"><a href="#15-3-排除内嵌的tomcat" class="headerlink" title="15.3 排除内嵌的tomcat"></a>15.3 排除内嵌的tomcat</h5><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>   <span class="hljs-comment">&lt;!--去掉内嵌tomcat--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>  <span class="hljs-comment">&lt;!--去掉使用内嵌tomcat解析jsp--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h5 id="15-4-配置入口类"><a href="#15-4-配置入口类" class="headerlink" title="15.4 配置入口类"></a>15.4 配置入口类</h5><pre><code class="hljs java"><span class="hljs-comment">//1.继承SpringBootServletInitializer</span><span class="hljs-comment">//2.覆盖configure方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(Application.class,args);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;        <span class="hljs-keyword">return</span> builder.sources(Application.class);    &#125;&#125;</code></pre><h5 id="15-5-打包测试"><a href="#15-5-打包测试" class="headerlink" title="15.5 打包测试"></a>15.5 打包测试</h5><pre><code class="hljs java"><span class="hljs-comment">/* 一旦使用war包部署注意:</span><span class="hljs-comment">1. application.yml 中配置port context-path 失效</span><span class="hljs-comment">2. 访问时使用打成war包的名字和外部tomcat端口号进行访问项目</span><span class="hljs-comment">*/</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2021/01/07/Vue/"/>
    <url>/2021/01/07/Vue/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue实战"><a href="#Vue实战" class="headerlink" title="Vue实战"></a>Vue实战</h1><h2 id="1-Vue-引言"><a href="#1-Vue-引言" class="headerlink" title="1. Vue 引言"></a>1. Vue 引言</h2><blockquote><p><code>渐进式</code> JavaScript 框架   –摘自官网</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 渐进式</span><span class="hljs-bullet">   1.</span> 易用  html css javascript<span class="hljs-bullet">   2.</span> 高效  开发前端页面 非常高效 <span class="hljs-bullet">   3.</span> 灵活  开发灵活 多样性<span class="hljs-section"># 总结</span><span class="hljs-code">Vue 是一个javascript 框架</span><span class="hljs-code"></span><span class="hljs-code"># 后端服务端开发人员: </span><span class="hljs-code">Vue 渐进式javascript框架: 让我们通过操作很少的DOM,甚至不需要操作页面中任何DOM元素,就很容易的完成数据和视图绑定  双向绑定 MVVM  </span><span class="hljs-code"></span><span class="hljs-code">注意: 日后在使用Vue过程中页面中不要在引入Jquery框架</span><span class="hljs-code"></span><span class="hljs-code">htmlcss---&gt;javascript -----&gt;jquery----&gt;angularjs -----&gt; Vue</span><span class="hljs-code"> </span><span class="hljs-code"> # Vue 作者</span><span class="hljs-code">  尤雨溪   国内的    </span></code></pre><hr><h2 id="2-Vue入门"><a href="#2-Vue入门" class="headerlink" title="2. Vue入门"></a>2. Vue入门</h2><h3 id="2-1-下载Vuejs"><a href="#2-1-下载Vuejs" class="headerlink" title="2.1    下载Vuejs"></a>2.1    下载Vuejs</h3><pre><code class="hljs js"><span class="hljs-comment">//开发版本:</span>&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;<span class="hljs-comment">//生产版本:</span>&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</code></pre><h3 id="2-2-Vue第一个入门应用"><a href="#2-2-Vue第一个入门应用" class="headerlink" title="2.2 Vue第一个入门应用"></a>2.2 Vue第一个入门应用</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>       &#123;&#123; msg &#125;&#125;  &#123;&#123;username&#125;&#125; &#123;&#123;pwd&#125;&#125;       <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>           &#123;&#123; username &#125;&#125;           <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">       <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">           el:<span class="hljs-string">&quot;#app&quot;</span>,  <span class="hljs-comment">//element 用来给Vue实例定义一个作用范围</span></span><span class="javascript">           data:&#123;      <span class="hljs-comment">//用来给Vue实例定义一些相关数据</span></span><span class="javascript">               msg:<span class="hljs-string">&quot;百知欢迎你,期待你的加入!&quot;</span>,</span><span class="javascript">               username:<span class="hljs-string">&quot;hello Vue!&quot;</span>,</span><span class="javascript">               pwd :<span class="hljs-string">&quot;12345&quot;</span>,</span>           &#125;,       &#125;);   <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.vue实例(对象)中el属性: 代表Vue的作用范围  日后在Vue的作用范围内都可以使用Vue的语法</span><span class="hljs-code">2.vue实例(对象)中data属性: 用来给Vue实例绑定一些相关数据, 绑定的数据可以通过&#123;&#123;变量名&#125;&#125;在Vue作用范围内取出</span><span class="hljs-code">3.在使用&#123;&#123;&#125;&#125;进行获取data中数据时,可以在&#123;&#123;&#125;&#125;中书写表达式,运算符,调用相关方法,以及逻辑运算等</span><span class="hljs-code">4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是推荐使用 id选择器</span></code></pre><hr><h2 id="3-v-text和v-html"><a href="#3-v-text和v-html" class="headerlink" title="3. v-text和v-html"></a>3. v-text和v-html</h2><h3 id="3-1-v-text"><a href="#3-1-v-text" class="headerlink" title="3.1 v-text"></a>3.1 v-text</h3><blockquote><p><code>v-text</code>:用来获取data中数据将数据以文本的形式渲染到指定标签内部             类似于javascript 中 innerText</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">          el:<span class="hljs-string">&quot;#app&quot;</span>,</span>          data:&#123;<span class="javascript">              message:<span class="hljs-string">&quot;百知欢迎您&quot;</span></span>          &#125;      &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.&#123;&#123;&#125;&#125;(插值表达式)和v-text获取数据的区别在于 </span><span class="hljs-code">a.使用v-text取值会将标签中原有的数据覆盖 使用插值表达式的形式不会覆盖标签原有的数据</span><span class="hljs-code">b.使用v-text可以避免在网络环境较差的情况下出现插值闪烁</span></code></pre><h3 id="3-2-v-html"><a href="#3-2-v-html" class="headerlink" title="3.2 v-html"></a>3.2 v-html</h3><blockquote><p><code>v-html</code>:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似于javascript中 innerHTML</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>xxxxxx<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">            el:<span class="hljs-string">&quot;#app&quot;</span>,</span>            data:&#123;<span class="handlebars"><span class="xml">                message:&quot;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#x27;</span>&gt;</span>百知欢迎您<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&quot;</span></span>            &#125;        &#125;)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><hr><h2 id="4-vue中事件绑定-v-on"><a href="#4-vue中事件绑定-v-on" class="headerlink" title="4.vue中事件绑定(v-on)"></a>4.vue中事件绑定(v-on)</h2><h3 id="4-1-绑定事件基本语法"><a href="#4-1-绑定事件基本语法" class="headerlink" title="4.1 绑定事件基本语法"></a>4.1 绑定事件基本语法</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄:&#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我改变年龄&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;changeage&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">          el:<span class="hljs-string">&quot;#app&quot;</span>,</span>          data:&#123;<span class="javascript">              message:<span class="hljs-string">&quot;hello 欢迎来到百知课堂!&quot;</span>,</span>              age:23,          &#125;,<span class="javascript">          methods:&#123;  <span class="hljs-comment">//methods 用来定义vue中时间</span></span><span class="javascript">              changeage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                  alert(<span class="hljs-string">&#x27;点击触发&#x27;</span>);</span>              &#125;          &#125;      &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">事件  事件源:发生事件dom元素  事件: 发生特定的动作  click....  监听器  发生特定动作之后的事件处理程序 通常是js中函数</span><span class="hljs-code">1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如  v-on:click</span><span class="hljs-code">2.在v-on:事件名的赋值语句中是当前时间触发调用的函数名</span><span class="hljs-code">3.在vue中事件的函数统一定义在Vue实例的methods属性中</span><span class="hljs-code">4.在vue定义的事件中this指的就是当前的Vue实例,日后可以在事件中通过使用this获取Vue实例中相关数据</span></code></pre><h3 id="4-2-Vue中事件的简化语法"><a href="#4-2-Vue中事件的简化语法" class="headerlink" title="4.2 Vue中事件的简化语法"></a>4.2 Vue中事件的简化语法</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;通过v-on事件修改年龄每次+1&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;changeage&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;通过@绑定时间修改年龄每次-1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;editage&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">         el:<span class="hljs-string">&quot;#app&quot;</span>,  <span class="hljs-comment">//element: 用来指定vue作用范围</span></span>         data:&#123;             age:23,<span class="javascript">         &#125;,    <span class="hljs-comment">//data   : 用来定义vue实例中相关数据</span></span>         methods:&#123;<span class="javascript">             changeage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                 <span class="hljs-built_in">this</span>.age++;</span>             &#125;,<span class="javascript">             editage:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">                 <span class="hljs-built_in">this</span>.age--;</span>             &#125;<span class="javascript">         &#125;  <span class="hljs-comment">//methods: 用来定义事件的处理函数</span></span>      &#125;);  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.日后在vue中绑定事件时可以通过@符号形式 简化  v-on 的事件绑定</span></code></pre><h3 id="4-3-Vue事件函数两种写法"><a href="#4-3-Vue事件函数两种写法" class="headerlink" title="4.3 Vue事件函数两种写法"></a>4.3 Vue事件函数两种写法</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变count的值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changecount&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">         el:<span class="hljs-string">&quot;#app&quot;</span>,</span>         data:&#123;             count:1,         &#125;,         methods:&#123;             /*changecount:function()&#123;<span class="javascript">                 <span class="hljs-built_in">this</span>.count++;</span>             &#125;*/             changecount()&#123;<span class="javascript">                 <span class="hljs-built_in">this</span>.count++;</span>             &#125;         &#125;      &#125;);  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.在Vue中事件定义存在两种写法  一种是 函数名:function()&#123;&#125;  推荐    一种是  函数名()&#123;&#125; 推荐</span></code></pre><h3 id="4-4-Vue事件参数传递"><a href="#4-4-Vue事件参数传递" class="headerlink" title="4.4 Vue事件参数传递"></a>4.4 Vue事件参数传递</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变count为指定的值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changecount(23,&#x27;xiaohei&#x27;)&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-comment">&lt;!--引入vue.js--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">      <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">         el:<span class="hljs-string">&quot;#app&quot;</span>,</span>         data:&#123;             count:1,         &#125;,         methods:&#123;<span class="javascript">             <span class="hljs-comment">//定义changecount</span></span>             changecount(count,name)&#123;<span class="javascript">                 <span class="hljs-built_in">this</span>.count = count;</span>                 alert(name);             &#125;         &#125;      &#125;);  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.在使用事件时,可以直接在事件调用出给事件进行参数传递,在事件定义出通过定义对应变量接收传递的参数</span></code></pre><hr><h2 id="5-v-show-v-if-v-bind"><a href="#5-v-show-v-if-v-bind" class="headerlink" title="5.v-show v-if v-bind"></a>5.v-show v-if v-bind</h2><h3 id="5-1-v-show"><a href="#5-1-v-show" class="headerlink" title="5.1 v-show"></a>5.1 v-show</h3><blockquote><p><code>v-show</code>:用来控制页面中某个标签元素是否展示        底层使用控制是 display 属性</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        v-show: 用来控制标签展示还是隐藏的</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>百知教育欢迎你的加入!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>百知教育欢迎你的加入这是vue中定义变量true!<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;展示隐藏标签&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showmsg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            show:<span class="hljs-literal">false</span>,</span>        &#125;,        methods:&#123;<span class="javascript">            <span class="hljs-comment">//定义时间</span></span>            showmsg()&#123;<span class="javascript">               <span class="hljs-built_in">this</span>.show =  !<span class="hljs-built_in">this</span>.show;</span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.在使用v-show时可以直接书写boolean值控制元素展示,也可以通过变量控制标签展示和隐藏</span><span class="hljs-code">2.在v-show中可以通过boolean表达式控制标签的展示课隐藏</span></code></pre><h3 id="5-2-v-if"><a href="#5-2-v-if" class="headerlink" title="5.2 v-if"></a>5.2 v-if</h3><blockquote><p><code>v-if</code>: 用来控制页面元素是否展示                底层控制是DOM元素    操作DOM</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>百知教育<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;show&quot;</span>&gt;</span>百知教育欢迎你的加入<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            show:<span class="hljs-literal">false</span></span>        &#125;,        methods:&#123;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="5-3-v-bind"><a href="#5-3-v-bind" class="headerlink" title="5.3 v-bind"></a>5.3 v-bind</h3><blockquote><p><code>v-bind</code>: 用来绑定标签的属性从而通过vue动态修改标签的属性</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">v-bind:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123;aa:showCss&#125;&quot;</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;baizhilogo.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            msg:<span class="hljs-string">&quot;百知教育官方logo!!!!&quot;</span>,</span><span class="javascript">            showCss:<span class="hljs-literal">true</span>,</span>        &#125;,        methods:&#123;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="5-4-v-bind-简化写法"><a href="#5-4-v-bind-简化写法" class="headerlink" title="5.4 v-bind 简化写法"></a>5.4 v-bind 简化写法</h3><blockquote><p>​    vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 <code>v-bind:属性名</code> 简化之后 <code>:属性名</code></p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;msg&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;aa:showCss&#125;&quot;</span>  <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;src&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;动态控制加入样式&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addCss&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变图片&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeSrc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue.js--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el:<span class="hljs-string">&quot;#app&quot;</span>,</span>        data:&#123;<span class="javascript">            msg:<span class="hljs-string">&quot;百知教育官方logo!!!!&quot;</span>,</span><span class="javascript">            showCss:<span class="hljs-literal">true</span>,</span><span class="javascript">            src:<span class="hljs-string">&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1583490365568&amp;di=52a82bd614cd4030f97ada9441bb2d0e&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Flogo%2F20160714%2F820a68f65b4e4a3634085055779c000c.jpg&quot;</span></span>        &#125;,        methods:&#123;            addCss()&#123;<span class="javascript">                <span class="hljs-built_in">this</span>.showCss= !<span class="hljs-built_in">this</span>.showCss;</span>            &#125;,            changeSrc()&#123;<span class="javascript">                <span class="hljs-built_in">this</span>.src = <span class="hljs-string">&quot;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1925088662,1336364220&amp;fm=26&amp;gp=0.jpg&quot;</span>;</span>            &#125;        &#125;    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><hr><h2 id="6-v-for的使用"><a href="#6-v-for的使用" class="headerlink" title="6.v-for的使用"></a>6.v-for的使用</h2><blockquote><p><code>v-for</code>: 作用就是用来对对象进行遍历的(数组也是对象的一种)</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; user.name &#125;&#125; &#123;&#123; user.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">       通过v-for遍历对象</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key,index) in user&quot;</span>&gt;</span>        &#123;&#123;index&#125;&#125; : &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        通过v-for遍历数组</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;a,index in arr&quot;</span> &gt;</span>            &#123;&#123;index&#125;&#125; &#123;&#123;a&#125;&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        通过v-for遍历数组中对象</span><span class="hljs-comment">        :key 便于vue内部做重用和排序</span><span class="hljs-comment">    --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user,index in users&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span>            &#123;&#123;index+1&#125;&#125; &#123;&#123; user.name &#125;&#125;  === &#123;&#123; user.age &#125;&#125; ==== &#123;&#123; user.content &#125;&#125;        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span>        data: &#123;<span class="javascript">            user:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小陈&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">23</span>&#125;,</span><span class="javascript">            arr:[<span class="hljs-string">&quot;北京校区&quot;</span>, <span class="hljs-string">&quot;天津校区&quot;</span>, <span class="hljs-string">&quot;河南校区&quot;</span>],</span>            users:[<span class="javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;xiaochen&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&quot;我曾经也是一个单纯的少年!&quot;</span>&#125;,</span><span class="javascript">                &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;小白&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&quot;我曾经是一个邪恶的少年!&quot;</span>&#125;,</span>            ]        &#125;,        methods: &#123;&#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.在使用v-for的时候一定要注意加入:key 用来给vue内部提供重用和排序的唯一key </span></code></pre><hr><h2 id="7-v-model-双向绑定"><a href="#7-v-model-双向绑定" class="headerlink" title="7 .v-model 双向绑定"></a>7 .v-model 双向绑定</h2><blockquote><p><code>v-model</code>: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;改变Data中值&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeValue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span>        data: &#123;<span class="javascript">            message:<span class="hljs-string">&quot;&quot;</span></span>        &#125;,        methods: &#123;            changeValue()&#123;<span class="javascript">                <span class="hljs-built_in">this</span>.message=<span class="hljs-string">&#x27;百知教育!&#x27;</span>;</span>            &#125;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.使用v-model指令可以实现数据的双向绑定 </span><span class="hljs-code">2.所谓双向绑定 表单中数据变化导致vue实例data数据变化   vue实例中data数据的变化导致表单中数据变化 称之为双向绑定</span><span class="hljs-code"></span><span class="hljs-code"># MVVM架构  双向绑定机制</span><span class="hljs-code">Model: 数据  Vue实例中绑定数据</span><span class="hljs-code"></span><span class="hljs-code">VM:   ViewModel  监听器</span><span class="hljs-code"></span><span class="hljs-code">View:  页面  页面展示的数据</span></code></pre><hr><h2 id="8-事件修饰符"><a href="#8-事件修饰符" class="headerlink" title="8. 事件修饰符"></a>8. 事件修饰符</h2><blockquote><p><code>修饰符</code>: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 1.常用的事件修饰符</span><span class="hljs-code">.stop</span><span class="hljs-code">.prevent</span><span class="hljs-code">.capture</span><span class="hljs-code">.self</span><span class="hljs-code">.once</span><span class="hljs-code">.passive</span></code></pre><h3 id="8-1-stop事件修饰符"><a href="#8-1-stop事件修饰符" class="headerlink" title="8.1 stop事件修饰符"></a>8.1 stop事件修饰符</h3><blockquote><p>用来阻止事件冒泡</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;divClick&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--用来阻止事件冒泡--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--引入vue--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;</span><span class="javascript">        el: <span class="hljs-string">&quot;#app&quot;</span>,</span>        data: &#123;&#125;,        methods: &#123;            btnClick()&#123;<span class="javascript">                alert(<span class="hljs-string">&#x27;button被点击了&#x27;</span>);</span>            &#125;,            divClick()&#123;<span class="javascript">                alert(<span class="hljs-string">&#x27;div被点击了&#x27;</span>);</span>            &#125;        &#125;    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="8-2-prevent-事件修饰符"><a href="#8-2-prevent-事件修饰符" class="headerlink" title="8.2 prevent 事件修饰符"></a>8.2 prevent 事件修饰符</h3><blockquote><p>用来阻止标签的默认行为</p></blockquote><pre><code class="hljs html"><span class="hljs-comment">&lt;!--用来阻止事件的默认行为--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baizhibest.com/&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;aClick&quot;</span>&gt;</span>百知教育<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><h3 id="8-3-self-事件修饰符"><a href="#8-3-self-事件修饰符" class="headerlink" title="8.3 self 事件修饰符"></a>8.3 self 事件修饰符</h3><blockquote><p>用来针对于当前标签的事件触发     ===========&gt; 只触发自己标签的上特定动作的事件     只关心自己标签上触发的事件 不监听事件冒泡</p></blockquote><pre><code class="hljs html"><span class="hljs-comment">&lt;!--只触发标签自身的事件--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;divClick&quot;</span>&gt;</span>      <span class="hljs-comment">&lt;!--用来阻止事件冒泡--&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick1&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h3 id="8-4-once-事件修饰符"><a href="#8-4-once-事件修饰符" class="headerlink" title="8.4 once 事件修饰符"></a>8.4 once 事件修饰符</h3><blockquote><p>once 一次 作用:  就是让指定事件只触发一次</p></blockquote><pre><code class="hljs html"><span class="hljs-comment">&lt;!--</span><span class="hljs-comment">.prevent : 用来阻止事件的默认行为</span><span class="hljs-comment">.once    : 用来只执行一次特定的事件</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baizhibest.com/&quot;</span> @<span class="hljs-attr">click.prevent.once</span>=<span class="hljs-string">&quot;aClick&quot;</span>&gt;</span>百知教育<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre><hr><h2 id="9-按键修饰符"><a href="#9-按键修饰符" class="headerlink" title="9. 按键修饰符"></a>9. 按键修饰符</h2><blockquote><p>作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符</p></blockquote><pre><code class="hljs markdown"><span class="hljs-section"># 按键修饰符</span><span class="hljs-code">.enter</span><span class="hljs-code">.tab</span><span class="hljs-code">.delete (捕获“删除”和“退格”键)</span><span class="hljs-code">.esc</span><span class="hljs-code">.space</span><span class="hljs-code">.up</span><span class="hljs-code">.down</span><span class="hljs-code">.left</span><span class="hljs-code">.right</span></code></pre><h3 id="9-1-enter-回车键"><a href="#9-1-enter-回车键" class="headerlink" title="9.1 enter 回车键"></a>9.1 enter 回车键</h3><blockquote><p>用来在触发回车按键之后触发的事件</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;keyups&quot;</span>&gt;</span></code></pre><h3 id="9-2-tab-键"><a href="#9-2-tab-键" class="headerlink" title="9.2 tab 键"></a>9.2 tab 键</h3><blockquote><p>用来捕获到tab键执行到当前标签是才会触发</p></blockquote><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.tab</span>=<span class="hljs-string">&quot;keytabs&quot;</span>&gt;</span></code></pre><hr><h2 id="10-Axios-基本使用"><a href="#10-Axios-基本使用" class="headerlink" title="10. Axios 基本使用"></a>10. Axios 基本使用</h2><h3 id="10-1-引言"><a href="#10-1-引言" class="headerlink" title="10.1 引言"></a>10.1 引言</h3><blockquote><p><code>Axios</code> 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染       页面局部更新技术  Ajax</p></blockquote><h3 id="10-2-Axios-第一个程序"><a href="#10-2-Axios-第一个程序" class="headerlink" title="10.2 Axios 第一个程序"></a>10.2 Axios 第一个程序</h3><p>中文网站:<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>安装: <a href="https://unpkg.com/axios/dist/axios.min.js">https://unpkg.com/axios/dist/axios.min.js</a></p><h4 id="10-2-1-GET方式的请求"><a href="#10-2-1-GET方式的请求" class="headerlink" title="10.2.1 GET方式的请求"></a>10.2.1 GET方式的请求</h4><pre><code class="hljs js"><span class="hljs-comment">//发送GET方式请求</span> axios.get(<span class="hljs-string">&quot;http://localhost:8989/user/findAll?name=xiaochen&quot;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;     <span class="hljs-built_in">console</span>.log(response.data); &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;     <span class="hljs-built_in">console</span>.log(err); &#125;);</code></pre><h4 id="10-2-2-POST方式请求"><a href="#10-2-2-POST方式请求" class="headerlink" title="10.2.2 POST方式请求"></a>10.2.2 POST方式请求</h4><pre><code class="hljs javascript"><span class="hljs-comment">//发送POST方式请求</span>  axios.post(<span class="hljs-string">&quot;http://localhost:8989/user/save&quot;</span>,&#123;      username:<span class="hljs-string">&quot;xiaochen&quot;</span>,      age:<span class="hljs-number">23</span>,      email:<span class="hljs-string">&quot;xiaochen@zparkhr.com&quot;</span>,      phone:<span class="hljs-number">13260426185</span>  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(response.data);  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)</span>&#123;      <span class="hljs-built_in">console</span>.log(err);  &#125;);</code></pre><h4 id="10-2-3-axios并发请求"><a href="#10-2-3-axios并发请求" class="headerlink" title="10.2.3 axios并发请求"></a>10.2.3 axios并发请求</h4><blockquote><p><code>并发请求</code>:  将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果</p></blockquote><pre><code class="hljs js"><span class="hljs-comment">//1.创建一个查询所有请求</span>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findAll</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-keyword">return</span> axios.get(<span class="hljs-string">&quot;http://localhost:8989/user/findAll?name=xiaochen&quot;</span>);   &#125;   <span class="hljs-comment">//2.创建一个保存的请求</span>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;       <span class="hljs-keyword">return</span> axios.post(<span class="hljs-string">&quot;http://localhost:8989/user/save&quot;</span>,&#123;           username:<span class="hljs-string">&quot;xiaochen&quot;</span>,           age:<span class="hljs-number">23</span>,           email:<span class="hljs-string">&quot;xiaochen@zparkhr.com&quot;</span>,           phone:<span class="hljs-number">13260426185</span>       &#125;);   &#125;   <span class="hljs-comment">//3.并发执行</span>   axios.all([findAll(),save()]).then(       axios.spread(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res1,res2</span>)</span>&#123;  <span class="hljs-comment">//用来将一组函数的响应结果汇总处理</span>           <span class="hljs-built_in">console</span>.log(res1.data);           <span class="hljs-built_in">console</span>.log(res2.data);       &#125;)   );<span class="hljs-comment">//用来发送一组并发请求</span></code></pre><hr><h2 id="11-Vue-生命周期"><a href="#11-Vue-生命周期" class="headerlink" title="11. Vue 生命周期"></a>11. Vue 生命周期</h2><blockquote><p><code>生命周期钩子</code>   ====&gt;  <code>生命周期函数</code></p></blockquote><p><img src="https://pic.downk.cc/item/5ff68f6b3ffa7d37b3f1ac0e.png" alt="img"></p><pre><code class="hljs markdown"><span class="hljs-section"># Vue生命周期总结</span><span class="hljs-code">1.初始化阶段</span><span class="hljs-code">beforeCreate()&#123; //1.生命周期中第一个函数,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,Vue实例中还没有 Data el methods相关属性</span><span class="hljs-code">            console.log(&quot;beforeCreate: &quot;+this.msg);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        created()&#123; //2.生命周期中第二个函数,该函数在执行时Vue实例已经初始化了data属性和methods中相关方法</span><span class="hljs-code">            console.log(&quot;created: &quot;+this.msg);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        beforeMount()&#123;//3.生命周期中第三个函数,该函数在执行时Vue将El中指定作用范围作为模板编译</span><span class="hljs-code">            console.log(&quot;beforeMount: &quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        mounted()&#123;//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面</span><span class="hljs-code">            console.log(&quot;Mounted: &quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;</span><span class="hljs-code">        </span><span class="hljs-code">2.运行阶段</span><span class="hljs-code"> beforeUpdate()&#123;//5.生命周期中第五个函数,该函数是data中数据发生变化时执行 这个事件执行时仅仅是Vue实例中data数据变化页面显示的依然是原始数据</span><span class="hljs-code">            console.log(&quot;beforeUpdate:&quot;+this.msg);</span><span class="hljs-code">            console.log(&quot;beforeUpdate:&quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        updated()&#123;    //6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化  页面中数据已经和data中数据一致</span><span class="hljs-code">            console.log(&quot;updated:&quot;+this.msg);</span><span class="hljs-code">            console.log(&quot;updated:&quot;+document.getElementById(&quot;sp&quot;).innerText);</span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        </span><span class="hljs-code">3.销毁阶段</span><span class="hljs-code"> beforeDestory()&#123;//7.生命周期第七个函数,该函数执行时,Vue中所有数据 methods componet 都没销毁</span><span class="hljs-code"></span><span class="hljs-code">        &#125;,</span><span class="hljs-code">        destoryed()&#123; //8.生命周期的第八个函数,该函数执行时,Vue实例彻底销毁</span><span class="hljs-code"></span><span class="hljs-code">        &#125;</span></code></pre><hr><h2 id="12-Vue中组件-Component"><a href="#12-Vue中组件-Component" class="headerlink" title="12. Vue中组件(Component)"></a>12. Vue中组件(Component)</h2><h3 id="12-1-组件作用"><a href="#12-1-组件作用" class="headerlink" title="12.1 组件作用"></a>12.1 组件作用</h3><p>组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不能业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。</p><h3 id="12-2-组件使用"><a href="#12-2-组件使用" class="headerlink" title="12.2 组件使用"></a>12.2 组件使用</h3><h4 id="12-2-1-全局组件注册"><a href="#12-2-1-全局组件注册" class="headerlink" title="12.2.1 全局组件注册"></a>12.2.1 全局组件注册</h4><p><code>说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件</code></p><pre><code class="hljs js"><span class="hljs-comment">//1.开发全局组件</span>Vue.component(<span class="hljs-string">&#x27;login&#x27;</span>,&#123;        template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h1&gt;用户登录&lt;/h1&gt;&lt;/div&gt;&#x27;</span>    &#125;);<span class="hljs-comment">//2.使用全局组件  在Vue实例范围内</span>&lt;login&gt;&lt;/login&gt;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 注意:</span><span class="hljs-code">1.Vue.component用来开发全局组件 参数1: 组件的名称  参数2: 组件配置&#123;&#125;  template:&#x27;&#x27;用来书写组件的html代码  template中必须有且只有一个root元素</span><span class="hljs-code">2.使用时需要在Vue的作用范围内根据组件名使用全局组件</span><span class="hljs-code">3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用</span></code></pre><h4 id="12-2-2-局部组件注册"><a href="#12-2-2-局部组件注册" class="headerlink" title="12.2.2 局部组件注册"></a>12.2.2 局部组件注册</h4><p><code>说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加</code></p><ul><li>第一种开发方式</li></ul><pre><code class="hljs js"><span class="hljs-comment">//局部组件登录模板声明</span>  <span class="hljs-keyword">let</span> login =&#123;   <span class="hljs-comment">//具体局部组件名称</span>      template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h2&gt;用户登录&lt;/h2&gt;&lt;/div&gt;&#x27;</span>  &#125;;    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;      el: <span class="hljs-string">&quot;#app&quot;</span>,      data: &#123;&#125;,      methods: &#123;&#125;,      components:&#123;  <span class="hljs-comment">//用来注册局部组件</span>          login:login  <span class="hljs-comment">//注册局部组件</span>      &#125;  &#125;);<span class="hljs-comment">//局部组件使用 在Vue实例范围内</span>&lt;login&gt;&lt;/login&gt;</code></pre><ul><li><p>第二种开发方式</p><pre><code class="hljs js"><span class="hljs-comment">//1.声明局部组件模板  template 标签 注意:在Vue实例作用范围外声明</span>  &lt;template id=<span class="hljs-string">&quot;loginTemplate&quot;</span>&gt;      &lt;h1&gt;用户登录&lt;/h1&gt;  &lt;/template&gt;<span class="hljs-comment">//2.定义变量用来保存模板配置对象</span>    <span class="hljs-keyword">let</span> login =&#123;   <span class="hljs-comment">//具体局部组件名称</span>        template:<span class="hljs-string">&#x27;#loginTemplate&#x27;</span>  <span class="hljs-comment">//使用自定义template标签选择器即可</span>    &#125;;<span class="hljs-comment">//3.注册组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;&#125;,        methods: &#123;&#125;,        components:&#123;  <span class="hljs-comment">//用来注册局部组件</span>            login:login  <span class="hljs-comment">//注册局部组件</span>        &#125;    &#125;); <span class="hljs-comment">//4.局部组件使用 在Vue实例范围内</span> &lt;login&gt;&lt;/login&gt;</code></pre></li></ul><h3 id="12-3-Prop的使用"><a href="#12-3-Prop的使用" class="headerlink" title="12.3 Prop的使用"></a>12.3 Prop的使用</h3><p><code>作用:props用来给组件传递相应静态数据或者是动态数据的</code></p><h4 id="12-3-1-通过在组件上声明静态数据传递给组件内部"><a href="#12-3-1-通过在组件上声明静态数据传递给组件内部" class="headerlink" title="12.3.1 通过在组件上声明静态数据传递给组件内部"></a>12.3.1 通过在组件上声明静态数据传递给组件内部</h4><pre><code class="hljs js"><span class="hljs-comment">//1.声明组件模板配置对象</span>    <span class="hljs-keyword">let</span> login = &#123;        template:<span class="hljs-string">&quot;&lt;div&gt;&lt;h1&gt;欢迎:&#123;&#123; userName &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h1&gt;&lt;/div&gt;&quot;</span>,        props:[<span class="hljs-string">&#x27;userName&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]  <span class="hljs-comment">//props作用 用来接收使用组件时通过组件标签传递的数据</span>    &#125;<span class="hljs-comment">//2.注册组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;&#125;,        methods: &#123;&#125;,        components:&#123;            login <span class="hljs-comment">//组件注册</span>        &#125;    &#125;);<span class="hljs-comment">//3.通过组件完成数据传递</span>&lt;login user-name=<span class="hljs-string">&quot;小陈&quot;</span> age=<span class="hljs-string">&quot;23&quot;</span>&gt;&lt;/login&gt;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.使用组件时可以在组件上定义多个属性以及对应数据</span><span class="hljs-code">2.在组件内部可以使用props数组生命多个定义在组件上的属性名 日后可以在组件中通过&#123;&#123; 属性名 &#125;&#125; 方式获取组件中属性值</span></code></pre><h4 id="12-3-2-通过在组件上声明动态数据传递给组件内部"><a href="#12-3-2-通过在组件上声明动态数据传递给组件内部" class="headerlink" title="12.3.2 通过在组件上声明动态数据传递给组件内部"></a>12.3.2 通过在组件上声明动态数据传递给组件内部</h4><pre><code class="hljs js"><span class="hljs-comment">//1.声明组件模板对象</span>    <span class="hljs-keyword">const</span> login = &#123;        template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h2&gt;欢迎: &#123;&#123; name &#125;&#125; 年龄:&#123;&#123; age &#125;&#125;&lt;/h2&gt;&lt;/div&gt;&#x27;</span>,        props:[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]    &#125; <span class="hljs-comment">//2.注册局部组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;            username:<span class="hljs-string">&quot;小陈陈&quot;</span>,            age:<span class="hljs-number">23</span>        &#125;,        methods: &#123;&#125;,        components:&#123;            login <span class="hljs-comment">//注册组件</span>        &#125;    &#125;);<span class="hljs-comment">//3.使用组件</span> &lt;login :name=<span class="hljs-string">&quot;username&quot;</span> :age=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;<span class="hljs-regexp">/login&gt;  /</span><span class="hljs-regexp">/使用v-bind形式将数据绑定Vue实例中data属性,日后data属性发生变化,组件内部数据跟着变化</span></code></pre><h4 id="12-3-3-prop的单向数据流"><a href="#12-3-3-prop的单向数据流" class="headerlink" title="12.3.3 prop的单向数据流"></a>12.3.3 prop的单向数据流</h4><p><code>单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个**单向下行绑定**：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</code></p><blockquote><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你<strong>不</strong>应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。—摘自官网</p></blockquote><h3 id="12-4-组件中定义数据和事件使用"><a href="#12-4-组件中定义数据和事件使用" class="headerlink" title="12.4 组件中定义数据和事件使用"></a>12.4 组件中定义数据和事件使用</h3><h5 id="1-组件中定义属于组件的数据"><a href="#1-组件中定义属于组件的数据" class="headerlink" title="1. 组件中定义属于组件的数据"></a>1. 组件中定义属于组件的数据</h5><pre><code class="hljs js"><span class="hljs-comment">//组件声明的配置对象</span>    <span class="hljs-keyword">const</span> login = &#123;        template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;h1&gt;&#123;&#123; msg &#125;&#125; 百知教育&lt;/h1&gt;&lt;ul&gt;&lt;li v-for=&quot;item,index in lists&quot;&gt;&#123;&#123; index &#125;&#125;&#123;&#123; item &#125;&#125;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&#x27;</span>,        data()&#123;   <span class="hljs-comment">//使用data函数方式定义组件的数据   在templatehtml代码中通过插值表达式直接获取</span>            <span class="hljs-keyword">return</span> &#123;                msg:<span class="hljs-string">&quot;hello&quot;</span>,                lists:[<span class="hljs-string">&#x27;java&#x27;</span>,<span class="hljs-string">&#x27;spring&#x27;</span>,<span class="hljs-string">&#x27;springboot&#x27;</span>]            &#125;<span class="hljs-comment">//组件自己内部数据</span>        &#125;    &#125;</code></pre><h5 id="2-组件中事件定义"><a href="#2-组件中事件定义" class="headerlink" title="2.组件中事件定义"></a>2.组件中事件定义</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> login=&#123;       template:<span class="hljs-string">&#x27;&lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我触发组件中事件&quot; @click=&quot;change&quot;&gt;&lt;/div&gt;&#x27;</span>,       data()&#123;           <span class="hljs-keyword">return</span> &#123;               name:<span class="hljs-string">&#x27;小陈&#x27;</span>           &#125;;       &#125;,       methods:&#123;           change()&#123;               alert(<span class="hljs-built_in">this</span>.name)               alert(<span class="hljs-string">&#x27;触发事件&#x27;</span>);           &#125;       &#125;   &#125;</code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结</span><span class="hljs-code">1.组件中定义事件和直接在Vue中定义事件基本一致 直接在组件内部对应的html代码上加入@事件名=函数名方式即可</span><span class="hljs-code">2.在组件内部使用methods属性用来定义对应的事件函数即可,事件函数中this 指向的是当前组件的实例</span></code></pre><h3 id="12-5-向子组件中传递事件并在子组件中调用改事件"><a href="#12-5-向子组件中传递事件并在子组件中调用改事件" class="headerlink" title="12.5 向子组件中传递事件并在子组件中调用改事件"></a>12.5 向子组件中传递事件并在子组件中调用改事件</h3><p><code>在子组件中调用传递过来的相关事件必须使用 this.$emit(&#39;函数名&#39;) 方式调用</code></p><pre><code class="hljs js"><span class="hljs-comment">//1.声明组件</span>    <span class="hljs-keyword">const</span> login = &#123;        template:<span class="hljs-string">&quot;&lt;div&gt;&lt;h1&gt;百知教育 &#123;&#123; uname &#125;&#125;&lt;/h1&gt; &lt;input type=&#x27;button&#x27; value=&#x27;点我&#x27; @click=&#x27;change&#x27;&gt;&lt;/div&gt;&quot;</span>,        data()&#123;            <span class="hljs-keyword">return</span> &#123;                uname:<span class="hljs-built_in">this</span>.name            &#125;        &#125;,        props:[<span class="hljs-string">&#x27;name&#x27;</span>],        methods:&#123;            change()&#123;                <span class="hljs-comment">//调用vue实例中函数</span>                <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;aaa&#x27;</span>);  <span class="hljs-comment">//调用组件传递过来的其他函数时需要使用 this.$emit(&#x27;函数名调用&#x27;)</span>            &#125;        &#125;    &#125;     <span class="hljs-comment">//2.注册组件</span>    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;        el: <span class="hljs-string">&quot;#app&quot;</span>,        data: &#123;            username:<span class="hljs-string">&quot;小陈&quot;</span>        &#125;,        methods: &#123;            findAll()&#123;  <span class="hljs-comment">//一个事件函数  将这个函数传递给子组件</span>                alert(<span class="hljs-string">&#x27;Vue 实例中定义函数&#x27;</span>);            &#125;        &#125;,        components:&#123;            login,<span class="hljs-comment">//组件的注册</span>        &#125;    &#125;);<span class="hljs-comment">//3.使用组件</span>&lt;login  @find=<span class="hljs-string">&quot;findAll&quot;</span>&gt;&lt;<span class="hljs-regexp">/login&gt;    /</span><span class="hljs-regexp">/=====&gt; 在组件内部使用  this.$emit(&#x27;find&#x27;)</span></code></pre><hr><h2 id="13-Vue中路由-VueRouter"><a href="#13-Vue中路由-VueRouter" class="headerlink" title="13.Vue中路由(VueRouter)"></a>13.Vue中路由(VueRouter)</h2><h4 id="13-1-路由"><a href="#13-1-路由" class="headerlink" title="13.1 路由"></a>13.1 路由</h4><p><code>路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理</code></p><h4 id="13-2-作用"><a href="#13-2-作用" class="headerlink" title="13.2 作用"></a>13.2 作用</h4><p><code>用来在vue中实现组件之间的动态切换</code></p><h4 id="13-3-使用路由"><a href="#13-3-使用路由" class="headerlink" title="13.3 使用路由"></a>13.3 使用路由</h4><ol><li><h5 id="引入路由"><a href="#引入路由" class="headerlink" title="引入路由"></a>引入路由</h5><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;&lt;script src=<span class="hljs-string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;&lt;<span class="hljs-regexp">/script&gt;  /</span><span class="hljs-regexp">/vue 路由js</span></code></pre></li><li><h5 id="创建组件对象"><a href="#创建组件对象" class="headerlink" title="创建组件对象"></a>创建组件对象</h5><pre><code class="hljs js"><span class="hljs-comment">//声明组件模板</span><span class="hljs-keyword">const</span> login = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;登录&lt;/h1&gt;&#x27;</span>&#125;;<span class="hljs-keyword">const</span> register = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;注册&lt;/h1&gt;&#x27;</span>&#125;;</code></pre></li><li><h5 id="定义路由对象的规则"><a href="#定义路由对象的规则" class="headerlink" title="定义路由对象的规则"></a>定义路由对象的规则</h5><pre><code class="hljs js"> <span class="hljs-comment">//创建路由对象</span><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-attr">component</span>:login&#125;,   <span class="hljs-comment">//path: 路由的路径  component:路径对应的组件</span>    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register&#x27;</span>,<span class="hljs-attr">component</span>:register&#125;  ]&#125;);</code></pre></li></ol><ol start="4"><li><h5 id="将路由对象注册到vue实例"><a href="#将路由对象注册到vue实例" class="headerlink" title="将路由对象注册到vue实例"></a>将路由对象注册到vue实例</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">&quot;#app&quot;</span>,  data: &#123;    username:<span class="hljs-string">&quot;小陈&quot;</span>,  &#125;,  methods: &#123;&#125;,  router:router   <span class="hljs-comment">//设置路由对象</span>&#125;);</code></pre></li></ol><ol start="5"><li><h5 id="在页面中显示路由的组件"><a href="#在页面中显示路由的组件" class="headerlink" title="在页面中显示路由的组件"></a>在页面中显示路由的组件</h5><pre><code class="hljs html"><span class="hljs-comment">&lt;!--显示路由的组件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></code></pre></li><li><h5 id="根据连接切换路由"><a href="#根据连接切换路由" class="headerlink" title="根据连接切换路由"></a>根据连接切换路由</h5><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/login&quot;</span>&gt;</span>点我登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/register&quot;</span>&gt;</span>点我注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></li></ol><h3 id="13-4-router-link使用"><a href="#13-4-router-link使用" class="headerlink" title="13.4 router-link使用"></a>13.4 router-link使用</h3><p><code>作用:用来替换我们在切换路由时使用a标签切换路由</code></p><p><code>好处:就是可以自动给路由路径加入#不需要手动加入</code></p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>我要登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/register&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>点我注册<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></code></pre><pre><code class="hljs markdown"><span class="hljs-section"># 总结:</span><span class="hljs-code">1.router-link 用来替换使用a标签实现路由切换 好处是不需要书写#号直接书写路由路径</span><span class="hljs-code">2.router-link to属性用来书写路由路径   tag属性:用来将router-link渲染成指定的标签</span></code></pre><h3 id="13-5-默认路由"><a href="#13-5-默认路由" class="headerlink" title="13.5 默认路由"></a>13.5 默认路由</h3><p><code>作用:用来在第一次进入界面是显示一个默认的组件</code></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[    <span class="hljs-comment">//&#123; path:&#x27;/&#x27;,component:login&#125;,</span>    &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/login&#x27;</span>&#125;,  <span class="hljs-comment">//redirect: 用来当访问的是默认路由 &quot;/&quot; 时 跳转到指定的路由展示  推荐使用</span>    &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>:login&#125;,    &#123; <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">component</span>:register&#125;,  ]&#125;);</code></pre><h3 id="13-6-路由中参数传递"><a href="#13-6-路由中参数传递" class="headerlink" title="13.6 路由中参数传递"></a>13.6 路由中参数传递</h3><ul><li>第一种方式传递参数 传统方式</li></ul><ol><li><p>通过?号形式拼接参数</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/login?id=21&amp;name=zhangsan&quot;</span>&gt;</span>我要登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></code></pre></li><li><p>组件中获取参数</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> login = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;用户登录&lt;/h1&gt;&#x27;</span>,  data()&#123;<span class="hljs-keyword">return</span> &#123;&#125;&#125;,  methods:&#123;&#125;,  created()&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;=============&gt;&quot;</span>+<span class="hljs-built_in">this</span>.$route.query.id+<span class="hljs-string">&quot;======&gt;&quot;</span>+<span class="hljs-built_in">this</span>.$route.query.name);  &#125;&#125;;</code></pre></li></ol><ul><li>第二种方式传递参数 restful</li></ul><ol><li><p>通过使用路径方式传递参数</p><pre><code class="hljs js">&lt;router-link to=<span class="hljs-string">&quot;/register/24/张三&quot;</span>&gt;我要注册&lt;/router-link&gt;<span class="hljs-keyword">var</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;  routes:[    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/register/:id/:name&#x27;</span>,<span class="hljs-attr">component</span>:register&#125;   <span class="hljs-comment">//定义路径中获取对应参数</span>  ]&#125;);</code></pre></li></ol><ol start="2"><li><p>组件中获取参数</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> register = &#123;  template:<span class="hljs-string">&#x27;&lt;h1&gt;用户注册&#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;&#x27;</span>,  created()&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;注册组件中id:   &quot;</span>+<span class="hljs-built_in">this</span>.$route.params.id+<span class="hljs-built_in">this</span>.$route.params.name);  &#125;&#125;;</code></pre></li></ol><h3 id="13-7-嵌套路由"><a href="#13-7-嵌套路由" class="headerlink" title="13.7 嵌套路由"></a>13.7 嵌套路由</h3><ol><li><h5 id="声明最外层和内层路由"><a href="#声明最外层和内层路由" class="headerlink" title="声明最外层和内层路由"></a>声明最外层和内层路由</h5><pre><code class="hljs js">&lt;template id=<span class="hljs-string">&quot;product&quot;</span>&gt;    &lt;div&gt;        &lt;h1&gt;商品管理&lt;/h1&gt;        &lt;router-link to=<span class="hljs-string">&quot;/product/add&quot;</span>&gt;商品添加&lt;/router-link&gt;        &lt;router-link to=<span class="hljs-string">&quot;/product/edit&quot;</span>&gt;商品编辑&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;<span class="hljs-comment">//声明组件模板</span><span class="hljs-keyword">const</span> product=&#123;  template:<span class="hljs-string">&#x27;#product&#x27;</span>&#125;;<span class="hljs-keyword">const</span> add = &#123;  template:<span class="hljs-string">&#x27;&lt;h4&gt;商品添加&lt;/h4&gt;&#x27;</span>&#125;;<span class="hljs-keyword">const</span> edit = &#123;  template:<span class="hljs-string">&#x27;&lt;h4&gt;商品编辑&lt;/h4&gt;&#x27;</span>&#125;;</code></pre></li></ol><ol start="2"><li><h5 id="创建路由对象含有嵌套路由"><a href="#创建路由对象含有嵌套路由" class="headerlink" title="创建路由对象含有嵌套路由"></a>创建路由对象含有嵌套路由</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;        routes:[            &#123;                path:<span class="hljs-string">&#x27;/product&#x27;</span>,                component:product,                children:[                    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-attr">component</span>: add&#125;,                    &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;edit&#x27;</span>,<span class="hljs-attr">component</span>: edit&#125;,                ]            &#125;,        ]    &#125;);</code></pre></li></ol><ol start="3"><li><h5 id="注册路由对象"><a href="#注册路由对象" class="headerlink" title="注册路由对象"></a>注册路由对象</h5><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Vue(&#123;    el: <span class="hljs-string">&quot;#app&quot;</span>,    data: &#123;&#125;,    methods: &#123;&#125;,    router,<span class="hljs-comment">//定义路由对象</span>&#125;);</code></pre></li><li><p>测试路由</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/product&quot;</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></code></pre><hr></li></ol><h2 id="14-Vue-CLI-脚手架"><a href="#14-Vue-CLI-脚手架" class="headerlink" title="14. Vue CLI 脚手架"></a>14. Vue CLI 脚手架</h2><h3 id="14-1-什么是CLI"><a href="#14-1-什么是CLI" class="headerlink" title="14.1 什么是CLI"></a>14.1 什么是CLI</h3><p>命令行界面（英语：command-line interface，缩写：<em>CLI</em>）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）</p><h3 id="14-2-什么是Vue-CLI"><a href="#14-2-什么是Vue-CLI" class="headerlink" title="14.2 什么是Vue CLI"></a>14.2 什么是Vue CLI</h3><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。</p><h3 id="14-3-Vue-CLI优势"><a href="#14-3-Vue-CLI优势" class="headerlink" title="14.3 Vue CLI优势"></a>14.3 Vue CLI优势</h3><ul><li>通过 <code>vue-cli</code> 搭建交互式的项目脚手架。bootstrap css js jquery js     通过执行命令方式下载相关依赖</li><li>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 快速开始零配置原型开发    vue页面 vuejs  vuerouter        axios(一条命令)</li><li>一个运行时依赖 (<code>@vue/cli-service</code>)，该依赖：<ul><li>可升级；  一条命令</li><li>基于 webpack 构建，并带有合理的默认配置；  webpack  项目打包方式     编译好的项目源码===&gt;部署到服务器上直接使用</li><li>可以通过项目内的配置文件进行配置；               默认配置文件,通过修改默认配置文件达到自己想要的项目环境            </li><li>可以通过插件进行扩展。                                       vue v-charts  elementui </li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。Nodejs(tomcat)  Vue VueRouter webpack yarn</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面</li></ul><h3 id="14-4-Vue-CLI安装"><a href="#14-4-Vue-CLI安装" class="headerlink" title="14.4 Vue CLI安装"></a>14.4 Vue CLI安装</h3><h5 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h5><pre><code class="hljs markdown"><span class="hljs-section">#1.下载nodejs</span><span class="hljs-code">http://nodejs.cn/download/</span><span class="hljs-code">windows系统:   .msi  安装包(exe)指定安装位置   .zip(压缩包)直接解压缩指定目录</span><span class="hljs-code">  mac os 系统:   .pkg  安装包格式自动配置环境变量  .tar.gz(压缩包)解压缩安装到指定名</span><span class="hljs-code"></span><span class="hljs-code">#2.配置nodejs环境变量</span><span class="hljs-code">windows系统:</span><span class="hljs-code">1.计算上右键属性----&gt;  高级属性 ----&gt;环境变量 添加如下配置:</span><span class="hljs-code">NODE_HOME=  nodejs安装目录</span><span class="hljs-code">        PATH    = xxxx;%NODE_HOME%</span><span class="hljs-code">    2.macos 系统</span><span class="hljs-code">    推荐使用.pkg安装直接配置node环境</span><span class="hljs-code"> </span><span class="hljs-code">#3.验证nodejs环境是否成功</span><span class="hljs-code">node -v </span><span class="hljs-code"></span><span class="hljs-code">#4.npm介绍</span><span class="hljs-code">node package mangager    nodejs包管理工具       前端主流技术  npm 进行统一管理</span><span class="hljs-code">maven 管理java后端依赖   远程仓库(中心仓库)      阿里云镜像</span><span class="hljs-code">npm   管理前端系统依赖    远程仓库(中心仓库)      配置淘宝镜像</span><span class="hljs-code"></span><span class="hljs-code">#5.配置淘宝镜像</span><span class="hljs-code">  npm config set registry https://registry.npm.taobao.org</span><span class="hljs-code">  npm config get registry</span><span class="hljs-code"></span><span class="hljs-code">#6.配置npm下载依赖位置</span><span class="hljs-code"> windows:</span><span class="hljs-code">npm config set cache &quot;D:\nodereps\npm-cache&quot;</span><span class="hljs-code">npm config set prefix &quot;D:\nodereps\npm_global&quot;</span><span class="hljs-code"> mac os:</span><span class="hljs-code"> npm config set cache &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code">npm config set prefix &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code"></span><span class="hljs-code">#7.验证nodejs环境配置</span><span class="hljs-code">npm config ls</span><span class="hljs-code"></span><span class="hljs-code">    ; userconfig /Users/chenyannan/.npmrc</span><span class="hljs-code">    cache = &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code">    prefix = &quot;/Users/chenyannan/dev/nodereps&quot;</span><span class="hljs-code">    registry = &quot;https://registry.npm.taobao.org/&quot;</span><span class="hljs-code"></span></code></pre><h5 id="2-安装脚手架"><a href="#2-安装脚手架" class="headerlink" title="2.安装脚手架"></a>2.安装脚手架</h5><pre><code class="hljs markdown"><span class="hljs-section">#0.卸载脚手架</span><span class="hljs-code">npm uninstall -g @vue/cli  //卸载3.x版本脚手架</span><span class="hljs-code">npm uninstall -g vue-cli  //卸载2.x版本脚手架</span><span class="hljs-code"></span><span class="hljs-code">#1.Vue Cli官方网站</span><span class="hljs-code">https://cli.vuejs.org/zh/guide/</span><span class="hljs-code"></span><span class="hljs-code">#2.安装vue Cli</span><span class="hljs-code">npm install -g vue-cli</span><span class="hljs-code"></span></code></pre><h5 id="3-第一个vue脚手架项目"><a href="#3-第一个vue脚手架项目" class="headerlink" title="3.第一个vue脚手架项目"></a>3.第一个vue脚手架项目</h5><pre><code class="hljs markdown"><span class="hljs-section"># 1.创建vue脚手架第一个项目</span><span class="hljs-code">vue init webpack 项目名</span><span class="hljs-code"># 2.创建第一个项目</span><span class="hljs-code">hello     -------------&gt;项目名</span><span class="hljs-code">    -build  -------------&gt;用来使用webpack打包使用build依赖</span><span class="hljs-code">    -config -------------&gt;用来做整个项目配置目录</span><span class="hljs-code">    -node_modules  ------&gt;用来管理项目中使用依赖</span><span class="hljs-code">    -src ------&gt;用来书写vue的源代码[重点]</span><span class="hljs-code">    +assets      ------&gt;用来存放静态资源 [重点]</span><span class="hljs-code">      components   ------&gt;用来书写Vue组件 [重点]</span><span class="hljs-code">      router ------&gt;用来配置项目中路由[重点]</span><span class="hljs-code">      App.vue      ------&gt;项目中根组件[重点]</span><span class="hljs-code">      main.js      ------&gt;项目中主入口[重点]</span><span class="hljs-code">    -static        ------&gt;其它静态</span><span class="hljs-code">    -.babelrc      ------&gt; 将es6语法转为es5运行</span><span class="hljs-code">    -.editorconfig ------&gt; 项目编辑配置</span><span class="hljs-code">    -.gitignore    ------&gt; git版本控制忽略文件</span><span class="hljs-code">    -.postcssrc.js ------&gt; 源码相关js</span><span class="hljs-code">    -index.html    ------&gt; 项目主页</span><span class="hljs-code">    -package.json  ------&gt; 类似与pom.xml 依赖管理  jquery 不建议手动修改</span><span class="hljs-code">    -package-lock.json ----&gt; 对package.json加锁</span><span class="hljs-code">    -README.md         ----&gt; 项目说明文件</span><span class="hljs-code"></span><span class="hljs-code"># 3.如何运行在项目的根目录中执行</span><span class="hljs-code">npm start 运行前端系统</span><span class="hljs-code"></span><span class="hljs-code"># 4.如何访问项目</span><span class="hljs-code">http://localhost:8081    </span><span class="hljs-code"></span><span class="hljs-code"># 5.Vue Cli中项目开发方式</span><span class="hljs-code"> 注意: 一切皆组件   一个组件中   js代码  html代码  css样式</span><span class="hljs-code"> </span><span class="hljs-code"> 1. VueCli开发方式是在项目中开发一个一个组件对应一个业务功能模块,日后可以将多个组件组合到一起形成一个前端系统</span><span class="hljs-code"> 2. 日后在使用vue Cli进行开发时不再书写html,编写的是一个个组件(组件后缀.vue结尾的文件),日后打包时vue cli会将组件编译成运行的html文件  </span></code></pre><h5 id="4-如何开发Vue脚手架"><a href="#4-如何开发Vue脚手架" class="headerlink" title="4.如何开发Vue脚手架"></a>4.如何开发Vue脚手架</h5><p><code>注意:在Vue cli 中一切皆组件</code></p><hr><h2 id="15-在脚手架中使用axios"><a href="#15-在脚手架中使用axios" class="headerlink" title="15.在脚手架中使用axios"></a>15.在脚手架中使用axios</h2><h3 id="15-1-安装axios"><a href="#15-1-安装axios" class="headerlink" title="15.1 安装axios"></a>15.1 安装axios</h3><pre><code class="hljs markdown"><span class="hljs-section"># 1.安装axios</span><span class="hljs-code">npm install axios --save-dev</span><span class="hljs-code"></span><span class="hljs-code"># 2.配置main.js中引入axios</span><span class="hljs-code">import axios from &#x27;axios&#x27;;</span><span class="hljs-code"></span><span class="hljs-code">Vue.prototype.$http=axios;</span><span class="hljs-code"></span><span class="hljs-code"># 3.使用axios</span><span class="hljs-code">在需要发送异步请求的位置:this.$http.get(&quot;url&quot;).then((res)=&gt;&#123;&#125;) this.$http.post(&quot;url&quot;).then((res)=&gt;&#123;&#125;)</span></code></pre><hr><h2 id="16-Vue-Cli脚手架项目打包和部署"><a href="#16-Vue-Cli脚手架项目打包和部署" class="headerlink" title="16.Vue Cli脚手架项目打包和部署"></a>16.Vue Cli脚手架项目打包和部署</h2><pre><code class="hljs markdown"><span class="hljs-section"># 1.在项目根目录中执行如下命令:</span><span class="hljs-code">  vue run build</span><span class="hljs-code"></span><span class="hljs-code">注意:vue脚手架打包的项目必须在服务器上运行不能直接双击运行</span><span class="hljs-code"></span><span class="hljs-code"># 2.打包之后当前项目中变化</span><span class="hljs-code"> 在打包之后项目中出现dist目录,dist目录就是vue脚手架项目生产目录或者说是直接部署目录</span><span class="hljs-code"></span><span class="hljs-code"># 3.</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Swagger</title>
    <link href="/2021/01/07/Swagger/"/>
    <url>/2021/01/07/Swagger/</url>
    
    <content type="html"><![CDATA[<h2 id="Swagger-引言"><a href="#Swagger-引言" class="headerlink" title="Swagger 引言"></a>Swagger 引言</h2><p>​         相信无论是前端还是后端开发，都或多或少地被接口文档折磨过。<code>前端经常抱怨后端给的接口文档和实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。其实无论是前端调用后端，还是后端调用前端，都期望有一个好的接口文档。</code>但是这个接口文档对于程序员来说，就跟注释一样，经常还会抱怨别人写的代码没有写注释，然而自己写起代码来，最讨厌的也是写注释。所以仅仅只听过强制了来规范大家是不够的，随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了。</p><h2 id="1-什么是-Swagger"><a href="#1-什么是-Swagger" class="headerlink" title="1. 什么是 Swagger"></a>1. 什么是 Swagger</h2><p>​         发现了痛点就要去找解决方案。解决方案用的人多了，就成了标准的规范，这就是 Swagger 的由来。通过这套规范，你只需要按照它的规范去定义接口及接口相关信息。再通过 Swagger 衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多做语言的客户端和服务端的代码，以及在线接口调试页面等等。这样，如果按照新的开发木事，在开发新版本或者迭代版本的时候，只需要更新 Swagger 描述文件，就可以自动生成接口文档和客户端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p><p>​        但即便如此，对于许多开发来说，编写这个 yml 或 json 格式的描述文件，本身也是有一定负担的工作，特别是在后面持续迭代开发的时候，往往会忽略更新这个描述文件，直接更改代码。久而久之，这个描述文件也和实际项目渐行渐远，基于该描述文件生成的接口文档也失去了参考意义。<strong>所以作为 Java 界服务端的大一统框架 Spring，迅速将 Swagger 规范纳入自身的标准，建立了 Spring-swagger 项目，后面改成了现在的 Springfox。通过在项目中引入 Springfox，可以扫描相关的代码，生成该描述文件，进而生成与代码一致的接口文档和客户端代码。</strong>这种通过代码生成接口文档的形式，在后面需求持续迭代的项目中，显得尤为重要和高效。</p><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6aa.png" alt="image-20200907160045833"></p><ul><li>总结：<strong>Swagger 就是一个用来定义接口标准，接口规范，同时能根据你的代码自动生成接口说明文档的一个工具。</strong></li></ul><hr><h2 id="2-官方提供的工具"><a href="#2-官方提供的工具" class="headerlink" title="2. 官方提供的工具"></a>2. 官方提供的工具</h2><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6ad.png" alt="image-20200907160803871"></p><p>​        <code>Swagger Codegen</code>：通过Codegen 可以将描述文件生成 html 格式和 cwiki 形式的接口文档，同时也能生成多种语言的服务端和客户端代码。支持通过 jar 包、docker、node 等方式在本地化执行生成。也可以在后面的 Swagger Editor 中在线生成。</p><p>​        <code>Swagger UI</code>：提供了一个可视化的 UI 页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署 UI 项目。</p><p>​        <code>Swagger Editor</code>：类似于 Markdown 编辑器的编辑 Swagger 描述文件的编辑器，该编辑器支持实时预览描述文件的更新效果，也提供了在线编辑器和本地部署器俩种方式。</p><p>​        <code>Swagger Inspector</code>：感觉和 Postman 差不多，是一个可以对接口进行测试的在线版的 postman。比如在 Swagger UI 里面做接口请求，会返回更多的信息，也会保存你请求的实际请求参数等数据。</p><p>​        <code>Swagger Hub</code>：集成了上面所有项目的各个功能，你可以以项目和版本为单位，将你的描述文件上传到 Swagger Hub 中。在 Swagger Hub 中可以完成上面项目的所有工作，需要注册账号，分免费版和收费版。</p><p>​        <code>Springfox Swagger</code>：Spring 基于 Swagger 规范，可以将基于 SpringMVC 和 Spring Boot 项目的项目代码，自动生成 JSON 格式的描述文件。本身不是属于 Swagger 官网提供的，在这里列出来做个说明，方便后面作一个使用的展开。</p><hr><h2 id="3-构建-Swagger-与-Spring-Boot-环境"><a href="#3-构建-Swagger-与-Spring-Boot-环境" class="headerlink" title="3. 构建 Swagger 与 Spring Boot 环境"></a>3. 构建 Swagger 与 Spring Boot 环境</h2><h3 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="3-2-编写-Swagger-配置类"><a href="#3-2-编写-Swagger-配置类" class="headerlink" title="3.2 编写 Swagger 配置类"></a>3.2 编写 Swagger 配置类</h3><p>这个配置类基本都是不变的。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableSwagger2</span>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)                .select()                <span class="hljs-comment">// 扫描哪个接口的包</span>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.baiyi.controller&quot;</span>))                .paths(PathSelectors.any())                .build().apiInfo(<span class="hljs-keyword">new</span> ApiInfoBuilder()                        .title(<span class="hljs-string">&quot;标题: SpringBoot 整合 Swagger 使用&quot;</span>)                        .description(<span class="hljs-string">&quot;详细信息: SpringBoot 整合 Swagger,详细信息......&quot;</span>)                        <span class="hljs-comment">// 版本信息</span>                        .version(<span class="hljs-string">&quot;1.1&quot;</span>)                        <span class="hljs-comment">// 开发文档的联系人</span>                        .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;baiyi&quot;</span>, <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;1101293873@qq.com&quot;</span>))                        .license(<span class="hljs-string">&quot;This Baidu License&quot;</span>)                        .licenseUrl(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)                        .build());    &#125;&#125;</code></pre><h3 id="3-3-启动-SpringBoot-项目"><a href="#3-3-启动-SpringBoot-项目" class="headerlink" title="3.3 启动 SpringBoot 项目"></a>3.3 启动 SpringBoot 项目</h3><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6b0.png" alt="image-20200907164327757"></p><h3 id="3-4-访问-Swagger-的-UI-界面"><a href="#3-4-访问-Swagger-的-UI-界面" class="headerlink" title="3.4 访问 Swagger 的 UI 界面"></a>3.4 访问 Swagger 的 UI 界面</h3><p><strong>访问 Swagger 提供的 UI 界面：</strong><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6b3.png" alt="image-20200907165602060"></p><hr><h2 id="4-使用-Swagger-构建"><a href="#4-使用-Swagger-构建" class="headerlink" title="4. 使用 Swagger 构建"></a>4. 使用 Swagger 构建</h2><h3 id="4-1-开发-Controller-接口"><a href="#4-1-开发-Controller-接口" class="headerlink" title="4.1 开发 Controller 接口"></a>4.1 开发 Controller 接口</h3><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;查询所有数据成功&quot;</span>);        map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">true</span>);        <span class="hljs-keyword">return</span> map;    &#125;&#125;</code></pre><h3 id="4-2-重启项目访问接口界面"><a href="#4-2-重启项目访问接口界面" class="headerlink" title="4.2 重启项目访问接口界面"></a>4.2 重启项目访问接口界面</h3><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0324.png" alt="image-20200907165951426"></p><hr><h2 id="5-Swagger-注解"><a href="#5-Swagger-注解" class="headerlink" title="5. Swagger 注解"></a>5. Swagger 注解</h2><h3 id="5-1-Api"><a href="#5-1-Api" class="headerlink" title="5.1 @Api"></a>5.1 @Api</h3><ul><li>作用：用来指定接口的描述文字</li><li>修饰范围：用在类上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-meta">@Api(tags = &quot;用户服务相关接口描叙&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;....&#125;</code></pre><h3 id="5-2-ApiOperation"><a href="#5-2-ApiOperation" class="headerlink" title="5.2 @ApiOperation"></a>5.2 @ApiOperation</h3><ul><li>作用：用来对接口中具体方法做描叙</li><li>修饰范围：用在方法上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;查询所有用户接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来查询所有用户信息的接口&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;查询所有数据成功&quot;</span>);    map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">true</span>);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><h3 id="5-3-ApiImplicitParams"><a href="#5-3-ApiImplicitParams" class="headerlink" title="5.3 @ApiImplicitParams"></a>5.3 @ApiImplicitParams</h3><ul><li>作用：用来接口中参数进行说明</li><li>修饰范围：用在方法上</li></ul><h4 id="5-3-1-普通参数使用"><a href="#5-3-1-普通参数使用" class="headerlink" title="5.3.1 普通参数使用"></a>5.3.1 普通参数使用</h4><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;保存用户信息接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来保存用户信息的接口&quot;)</span><span class="hljs-meta">@ApiImplicitParams(&#123;</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户 id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;21&quot;),</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;白衣&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(String id, String name)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, id);    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0329.png" alt="image-20200907172500905"></p><h4 id="5-3-2-RestFul-风格使用"><a href="#5-3-2-RestFul-风格使用" class="headerlink" title="5.3.2 RestFul 风格使用"></a>5.3.2 RestFul 风格使用</h4><p>如果使用的是 RestFul 风格进行传参，必须再添加一个 <code>paramType=&quot;path&quot;</code></p><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save/&#123;id&#125;/&#123;name&#125;&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;保存用户信息接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来保存用户信息的接口&quot;)</span><span class="hljs-meta">@ApiImplicitParams(&#123;</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户 id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;21&quot;, paramType = &quot;path&quot;),</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;白衣&quot;, paramType = &quot;path&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id,<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, id);    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da032e.png" alt="image-20200907172950893"></p><h4 id="5-3-3-JSON-格式使用"><a href="#5-3-3-JSON-格式使用" class="headerlink" title="5.3.3 JSON 格式使用"></a>5.3.3 JSON 格式使用</h4><p>如果是 RequestBody 的方式，需要定义一个对象进行接收。</p><ol><li>定义一个 User 对象</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><ol start="2"><li>编写 Controller</li></ol><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + user.getId());    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + user.getName());    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId());    map.put(<span class="hljs-string">&quot;name&quot;</span>, user.getName());    <span class="hljs-keyword">return</span> map;&#125;</code></pre><ol start="3"><li>重启项目，打开 UI 界面</li></ol><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0331.png" alt="image-20200907174402323"></p><p>测试：</p><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0335.png" alt="image-20200907174538702"></p><h3 id="5-4-ApiResponses"><a href="#5-4-ApiResponses" class="headerlink" title="5.4 @ApiResponses"></a>5.4 @ApiResponses</h3><ul><li>作用：用在请求的方法上，表示一组响应</li><li>修饰范围：用在方法上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save2&quot;)</span><span class="hljs-meta">@ApiResponses(&#123;</span><span class="hljs-meta">        @ApiResponse(code = 404, message = &quot;请求路径不对&quot;),</span><span class="hljs-meta">        @ApiResponse(code = 400, message = &quot;程序不对&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + user.getId());    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + user.getName());    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId());    map.put(<span class="hljs-string">&quot;name&quot;</span>, user.getName());    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679bd3ffa7d37b3da0c05.png" alt="image-20200907175213481"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="/2021/01/07/Mybatis-plus/"/>
    <url>/2021/01/07/Mybatis-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><h2 id="1-什么是Mybatis-Plus"><a href="#1-什么是Mybatis-Plus" class="headerlink" title="1.什么是Mybatis-Plus"></a>1.什么是Mybatis-Plus</h2><h3 id="1-1-什么是mybatis-plus"><a href="#1-1-什么是mybatis-plus" class="headerlink" title="1.1 什么是mybatis-plus"></a>1.1 什么是mybatis-plus</h3><p><code>官网:</code><a href="https://mybatis.plus/guide/">https://mybatis.plus/guide/</a></p><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54d6e.png" alt="image-20200509110144062"></p><h3 id="1-2-官方愿景"><a href="#1-2-官方愿景" class="headerlink" title="1.2 官方愿景"></a>1.2 官方愿景</h3><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54db2.png" alt="image-20200509110309834"></p><h3 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a>1.3 特性</h3><ul><li><strong>无侵入</strong>：<code>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</code></li><li><strong>损耗小</strong>：<code>启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</code></li><li><strong>强大的 CRUD 操作</strong>：<code>内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</code></li><li><strong>支持 Lambda 形式调用</strong>：<code>通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</code></li><li><strong>支持主键自动生成</strong>：<code>支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</code></li><li><strong>支持 ActiveRecord 模式</strong>：<code>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</code></li><li><strong>支持自定义全局通用操作</strong>：<code>支持全局通用方法注入（ Write once, use anywhere ）</code></li><li><strong>内置代码生成器</strong>：<code>采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</code></li><li><strong>内置分页插件</strong>：<code>基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</code></li><li><strong>分页插件支持多种数据库</strong>：<code>支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</code></li><li><strong>内置性能分析插件</strong>：<code>可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</code></li><li><strong>内置全局拦截插件</strong>：<code>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</code></li></ul><h3 id="1-4-支持数据库"><a href="#1-4-支持数据库" class="headerlink" title="1.4 支持数据库"></a>1.4 支持数据库</h3><ul><li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li></ul><h3 id="1-5-框架结构"><a href="#1-5-框架结构" class="headerlink" title="1.5 框架结构"></a>1.5 框架结构</h3><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54dc5.jpg" alt="img"></p><hr><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><h3 id="2-1-创建springboot项目"><a href="#2-1-创建springboot项目" class="headerlink" title="2.1 创建springboot项目"></a>2.1 创建springboot项目</h3><h4 id="1-并引入依赖"><a href="#1-并引入依赖" class="headerlink" title="1.并引入依赖"></a>1.并引入依赖</h4><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li><strong>注意</strong>:<code>不需要在引入mybatis的相关依赖,只引入这一个即可,当然数据库相关的驱动还的显式引入</code></li></ul><h4 id="2-在入口类加入注解"><a href="#2-在入口类加入注解" class="headerlink" title="2.在入口类加入注解"></a>2.在入口类加入注解</h4><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(MybatisApplication.class, args);    &#125;&#125;</code></pre><h4 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h4><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">logging.level.root</span>=<span class="hljs-string">info</span><span class="hljs-meta">logging.level.com.baizhi.dao</span>=<span class="hljs-string">debug</span></code></pre><h3 id="2-2-创建数据库以及表结构"><a href="#2-2-创建数据库以及表结构" class="headerlink" title="2.2 创建数据库以及表结构"></a>2.2 创建数据库以及表结构</h3><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`age`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`bir`</span> <span class="hljs-built_in">timestamp</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">1</span>;</code></pre><h3 id="2-3-开发实体类"><a href="#2-3-开发实体类" class="headerlink" title="2.3 开发实体类"></a>2.3 开发实体类</h3><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-comment">//lombok的注解用来生成get set 等相关方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> Date bir;&#125;</code></pre><h3 id="2-4-开发mapper通用实现"><a href="#2-4-开发mapper通用实现" class="headerlink" title="2.4 开发mapper通用实现"></a>2.4 开发mapper通用实现</h3><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper; <span class="hljs-comment">//提供了各种CRUD方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDAO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;  &#125;</code></pre><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> UserDAO userDAO;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;  List&lt;User&gt; users = userDAO.selectList(<span class="hljs-keyword">null</span>);  System.out.println(users);&#125;</code></pre><hr><h2 id="3-常用注解说明"><a href="#3-常用注解说明" class="headerlink" title="3.常用注解说明"></a>3.常用注解说明</h2><ul><li><strong>@TableName</strong>  </li><li><strong>@TableId</strong></li><li><strong>@TableField</strong></li></ul><h3 id="3-1-TableName注解"><a href="#3-1-TableName注解" class="headerlink" title="3.1 @TableName注解"></a>3.1 @TableName注解</h3><ul><li><strong>描述:</strong><code>用来将实体对象与数据库表名完成映射</code></li><li><strong>修饰范围:</strong> <code>用在类上</code></li><li><strong>常见属性:</strong><ul><li><strong>value:</strong>  <code>String类型,指定映射的表名</code></li><li><strong>resultMap:</strong><code> String类型,用来指定XML配置中resultMap的id值</code></li></ul></li></ul><h3 id="3-2-TableId注解"><a href="#3-2-TableId注解" class="headerlink" title="3.2 @TableId注解"></a>3.2 @TableId注解</h3><ul><li><p><strong>描述</strong>：<code>主键注解</code></p></li><li><p><strong>修饰范围:</strong><code>用在属性上</code></p></li><li><p><strong>常见属性:</strong></p><ul><li><strong>value:</strong> <code>String类型,指定实体类中与表中对应的主键列名</code></li><li><strong>type:</strong>  <code>枚举类型,指定主键生成类型</code></li></ul><p><img src="https://pic.downk.cc/item/5ff6662d3ffa7d37b3c553bd.png" alt="image-20200509140855571"></p></li></ul><h3 id="3-3-TableField"><a href="#3-3-TableField" class="headerlink" title="3.3 @TableField"></a>3.3 @TableField</h3><ul><li><strong>描述</strong>：<code>字段注解(非主键)</code></li><li><strong>修饰范围:</strong><code>用在属性上</code></li><li><strong>常用属性:</strong><ul><li><strong>value:</strong>    <code>String类型,用来指定对应的数据库表中的字段名</code></li><li><strong>el:</strong>    <code>String类型,映射为原生 #&#123; ... &#125; 逻辑,相当于写在 xml 里的 #&#123; ... &#125; 部分</code> 3.0不存在</li><li>exist    <code>boolean是否为数据库表字段 true代表是数据库字段,false代表不是</code></li></ul></li></ul><hr><h2 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a>4.常用方法</h2><h3 id="4-1-查询方法"><a href="#4-1-查询方法" class="headerlink" title="4.1 查询方法"></a>4.1 查询方法</h3><ul><li><p>查询所有</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  List&lt;User&gt; users = userDAO.selectList(<span class="hljs-keyword">null</span>);  users.forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li><li><p>查询一个</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOne</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);&#125;</code></pre></li><li><p>条件查询</p><pre><code class="hljs java"><span class="hljs-comment">//条件查询</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFind</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  <span class="hljs-comment">//queryWrapper.eq(&quot;age&quot;,23);//设置等值查询</span>  <span class="hljs-comment">//queryWrapper.lt(&quot;age&quot;,23);//设置小于查询</span>  <span class="hljs-comment">//queryWrapper.ge(&quot;age&quot;,23);//小于等于查询 gt 大于  ge 大于等于</span>  List&lt;User&gt; users = userDAO.selectList(queryWrapper);  users.forEach(user-&gt; System.out.println(user));&#125;</code></pre></li><li><p>模糊查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  queryWrapper.likeRight(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小&quot;</span>);  List&lt;User&gt; users = userDAO.selectList(queryWrapper);  users.forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre><ul><li>like 相当于 %?%</li><li>likeLeft 相当于 %?</li><li>likeRight 相当于 ?%</li></ul></li></ul><h3 id="4-2-添加方法"><a href="#4-2-添加方法" class="headerlink" title="4.2 添加方法"></a>4.2 添加方法</h3><ul><li><p>​    添加方法</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;  User entity = <span class="hljs-keyword">new</span> User();  entity.setAge(<span class="hljs-number">23</span>).setName(<span class="hljs-string">&quot;小明明&quot;</span>).setBir(<span class="hljs-keyword">new</span> Date());  userDAO.insert(entity);&#125;</code></pre></li></ul><h3 id="4-3-修改方法"><a href="#4-3-修改方法" class="headerlink" title="4.3 修改方法"></a>4.3 修改方法</h3><ul><li><p>基于id修改</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateById</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  user.setAge(<span class="hljs-number">24</span>);  userDAO.updateById(user);&#125;</code></pre><p>基于条件修改</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  user.setName(<span class="hljs-string">&quot;小陈陈&quot;</span>);  QueryWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  updateWrapper.eq(<span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>);  userDAO.update(user, updateWrapper);&#125;</code></pre></li></ul><h3 id="4-4-删除方法"><a href="#4-4-删除方法" class="headerlink" title="4.4 删除方法"></a>4.4 删除方法</h3><ul><li><p>基于id删除</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span></span>&#123;  userDAO.deleteById(<span class="hljs-string">&quot;3&quot;</span>);&#125;</code></pre></li><li><p>基于条件删除</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  wrapper.lambda().eq(<span class="hljs-keyword">true</span>,User::getAge,<span class="hljs-number">23</span>);  userDAO.delete(wrapper);&#125;</code></pre></li></ul><hr><h2 id="5-Mybatis-Plus分页查询"><a href="#5-Mybatis-Plus分页查询" class="headerlink" title="5.Mybatis-Plus分页查询"></a>5.Mybatis-Plus分页查询</h2><h3 id="0-预先配置"><a href="#0-预先配置" class="headerlink" title="0.预先配置"></a>0.预先配置</h3><ul><li><p><strong>注意:</strong><code>使用分页查询必须设置mybatis-plus提供的分页插件,才能实现分页效果</code></p><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;        PaginationInterceptor paginationInterceptor = <span class="hljs-keyword">new</span> PaginationInterceptor();        <span class="hljs-keyword">return</span> paginationInterceptor;    &#125;&#125;</code></pre><p><code>注意事项:目前分页查询仅仅支持单表查询,不能再表连接时使用分页插件</code></p></li></ul><h3 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1.分页查询"></a>1.分页查询</h3><ul><li><p>非条件分页查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  page = userDAO.selectPage(page, <span class="hljs-keyword">null</span>);  page.getRecords().forEach(user -&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li><li><p>带条件分页查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  queryWrapper.eq(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>);  IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  page = userDAO.selectPage(page, queryWrapper);  page.getRecords().forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li></ul><hr><h2 id="6-Mybatis-Plus多数据源配置"><a href="#6-Mybatis-Plus多数据源配置" class="headerlink" title="6. Mybatis-Plus多数据源配置"></a>6. Mybatis-Plus多数据源配置</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。·</p><p><img src="https://pic.downk.cc/item/5ff6662d3ffa7d37b3c553c7.png" alt="image-20200510110005920"></p><h3 id="6-1-引入dynamic-datasource-spring-boot-starter"><a href="#6-1-引入dynamic-datasource-spring-boot-starter" class="headerlink" title="6.1 引入dynamic-datasource-spring-boot-starter"></a>6.1 引入dynamic-datasource-spring-boot-starter</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="6-2-配置数据源"><a href="#6-2-配置数据源" class="headerlink" title="6.2 配置数据源"></a>6.2 配置数据源</h3><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.primary</span>=<span class="hljs-string">master  #指定默认数据源</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus-1?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.password</span>=<span class="hljs-string">root</span></code></pre><h3 id="6-3-创建多个数据库模拟不同mysql服务"><a href="#6-3-创建多个数据库模拟不同mysql服务" class="headerlink" title="6.3 创建多个数据库模拟不同mysql服务"></a>6.3 创建多个数据库模拟不同mysql服务</h3><h3 id="6-4-DS注解"><a href="#6-4-DS注解" class="headerlink" title="6.4 @DS注解"></a>6.4 @DS注解</h3><ul><li><strong>作用:</strong> <code>用来切换数据源的注解 </code></li><li><strong>修饰范围:</strong> <code>方法上和类上</code>，<strong>同时存在方法注解优先于类上注解</strong>。</li><li><strong>Value属性:</strong> <code>切换数据源名称</code></li></ul><h3 id="6-5-开发业务层"><a href="#6-5-开发业务层" class="headerlink" title="6.5 开发业务层"></a>6.5 开发业务层</h3><ul><li><p>业务接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span></span>&#123;    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span></span>;&#125;</code></pre></li></ul><ul><li><p>业务实现类</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserDAO userDAO;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> userDAO.selectList(<span class="hljs-keyword">null</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span> </span>&#123;        userDAO.insert(user);    &#125;&#125;</code></pre></li></ul><h3 id="6-6-测试结果"><a href="#6-6-测试结果" class="headerlink" title="6.6 测试结果"></a>6.6 测试结果</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baizhi;<span class="hljs-keyword">import</span> com.baizhi.entity.User;<span class="hljs-keyword">import</span> com.baizhi.service.UserService;<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@SpringBootTest</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserService</span> </span>&#123;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;        <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;        userService.findAll().forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;        User user = <span class="hljs-keyword">new</span> User();        user.setName(<span class="hljs-string">&quot;aaa&quot;</span>).setAge(<span class="hljs-number">23</span>).setBir(<span class="hljs-keyword">new</span> Date());        userService.save(user);    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
