<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Swagger</title>
    <link href="/2021/01/07/Swagger/"/>
    <url>/2021/01/07/Swagger/</url>
    
    <content type="html"><![CDATA[<h2 id="Swagger-引言"><a href="#Swagger-引言" class="headerlink" title="Swagger 引言"></a>Swagger 引言</h2><p>​         相信无论是前端还是后端开发，都或多或少地被接口文档折磨过。<code>前端经常抱怨后端给的接口文档和实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。其实无论是前端调用后端，还是后端调用前端，都期望有一个好的接口文档。</code>但是这个接口文档对于程序员来说，就跟注释一样，经常还会抱怨别人写的代码没有写注释，然而自己写起代码来，最讨厌的也是写注释。所以仅仅只听过强制了来规范大家是不够的，随着时间推移，版本迭代，接口文档往往很容易就跟不上代码了。</p><h2 id="1-什么是-Swagger"><a href="#1-什么是-Swagger" class="headerlink" title="1. 什么是 Swagger"></a>1. 什么是 Swagger</h2><p>​         发现了痛点就要去找解决方案。解决方案用的人多了，就成了标准的规范，这就是 Swagger 的由来。通过这套规范，你只需要按照它的规范去定义接口及接口相关信息。再通过 Swagger 衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多做语言的客户端和服务端的代码，以及在线接口调试页面等等。这样，如果按照新的开发木事，在开发新版本或者迭代版本的时候，只需要更新 Swagger 描述文件，就可以自动生成接口文档和客户端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p><p>​        但即便如此，对于许多开发来说，编写这个 yml 或 json 格式的描述文件，本身也是有一定负担的工作，特别是在后面持续迭代开发的时候，往往会忽略更新这个描述文件，直接更改代码。久而久之，这个描述文件也和实际项目渐行渐远，基于该描述文件生成的接口文档也失去了参考意义。<strong>所以作为 Java 界服务端的大一统框架 Spring，迅速将 Swagger 规范纳入自身的标准，建立了 Spring-swagger 项目，后面改成了现在的 Springfox。通过在项目中引入 Springfox，可以扫描相关的代码，生成该描述文件，进而生成与代码一致的接口文档和客户端代码。</strong>这种通过代码生成接口文档的形式，在后面需求持续迭代的项目中，显得尤为重要和高效。</p><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6aa.png" alt="image-20200907160045833"></p><ul><li>总结：<strong>Swagger 就是一个用来定义接口标准，接口规范，同时能根据你的代码自动生成接口说明文档的一个工具。</strong></li></ul><hr><h2 id="2-官方提供的工具"><a href="#2-官方提供的工具" class="headerlink" title="2. 官方提供的工具"></a>2. 官方提供的工具</h2><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6ad.png" alt="image-20200907160803871"></p><p>​        <code>Swagger Codegen</code>：通过Codegen 可以将描述文件生成 html 格式和 cwiki 形式的接口文档，同时也能生成多种语言的服务端和客户端代码。支持通过 jar 包、docker、node 等方式在本地化执行生成。也可以在后面的 Swagger Editor 中在线生成。</p><p>​        <code>Swagger UI</code>：提供了一个可视化的 UI 页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署 UI 项目。</p><p>​        <code>Swagger Editor</code>：类似于 Markdown 编辑器的编辑 Swagger 描述文件的编辑器，该编辑器支持实时预览描述文件的更新效果，也提供了在线编辑器和本地部署器俩种方式。</p><p>​        <code>Swagger Inspector</code>：感觉和 Postman 差不多，是一个可以对接口进行测试的在线版的 postman。比如在 Swagger UI 里面做接口请求，会返回更多的信息，也会保存你请求的实际请求参数等数据。</p><p>​        <code>Swagger Hub</code>：集成了上面所有项目的各个功能，你可以以项目和版本为单位，将你的描述文件上传到 Swagger Hub 中。在 Swagger Hub 中可以完成上面项目的所有工作，需要注册账号，分免费版和收费版。</p><p>​        <code>Springfox Swagger</code>：Spring 基于 Swagger 规范，可以将基于 SpringMVC 和 Spring Boot 项目的项目代码，自动生成 JSON 格式的描述文件。本身不是属于 Swagger 官网提供的，在这里列出来做个说明，方便后面作一个使用的展开。</p><hr><h2 id="3-构建-Swagger-与-Spring-Boot-环境"><a href="#3-构建-Swagger-与-Spring-Boot-环境" class="headerlink" title="3. 构建 Swagger 与 Spring Boot 环境"></a>3. 构建 Swagger 与 Spring Boot 环境</h2><h3 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="3-2-编写-Swagger-配置类"><a href="#3-2-编写-Swagger-配置类" class="headerlink" title="3.2 编写 Swagger 配置类"></a>3.2 编写 Swagger 配置类</h3><p>这个配置类基本都是不变的。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<span class="hljs-keyword">import</span> springfox.documentation.service.Contact;<span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableSwagger2</span>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .pathMapping(<span class="hljs-string">&quot;/&quot;</span>)                .select()                <span class="hljs-comment">// 扫描哪个接口的包</span>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.baiyi.controller&quot;</span>))                .paths(PathSelectors.any())                .build().apiInfo(<span class="hljs-keyword">new</span> ApiInfoBuilder()                        .title(<span class="hljs-string">&quot;标题: SpringBoot 整合 Swagger 使用&quot;</span>)                        .description(<span class="hljs-string">&quot;详细信息: SpringBoot 整合 Swagger,详细信息......&quot;</span>)                        <span class="hljs-comment">// 版本信息</span>                        .version(<span class="hljs-string">&quot;1.1&quot;</span>)                        <span class="hljs-comment">// 开发文档的联系人</span>                        .contact(<span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;baiyi&quot;</span>, <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;1101293873@qq.com&quot;</span>))                        .license(<span class="hljs-string">&quot;This Baidu License&quot;</span>)                        .licenseUrl(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)                        .build());    &#125;&#125;</code></pre><h3 id="3-3-启动-SpringBoot-项目"><a href="#3-3-启动-SpringBoot-项目" class="headerlink" title="3.3 启动 SpringBoot 项目"></a>3.3 启动 SpringBoot 项目</h3><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6b0.png" alt="image-20200907164327757"></p><h3 id="3-4-访问-Swagger-的-UI-界面"><a href="#3-4-访问-Swagger-的-UI-界面" class="headerlink" title="3.4 访问 Swagger 的 UI 界面"></a>3.4 访问 Swagger 的 UI 界面</h3><p><strong>访问 Swagger 提供的 UI 界面：</strong><a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://pic.downk.cc/item/5ff6799c3ffa7d37b3d9e6b3.png" alt="image-20200907165602060"></p><hr><h2 id="4-使用-Swagger-构建"><a href="#4-使用-Swagger-构建" class="headerlink" title="4. 使用 Swagger 构建"></a>4. 使用 Swagger 构建</h2><h3 id="4-1-开发-Controller-接口"><a href="#4-1-开发-Controller-接口" class="headerlink" title="4.1 开发 Controller 接口"></a>4.1 开发 Controller 接口</h3><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;查询所有数据成功&quot;</span>);        map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">true</span>);        <span class="hljs-keyword">return</span> map;    &#125;&#125;</code></pre><h3 id="4-2-重启项目访问接口界面"><a href="#4-2-重启项目访问接口界面" class="headerlink" title="4.2 重启项目访问接口界面"></a>4.2 重启项目访问接口界面</h3><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0324.png" alt="image-20200907165951426"></p><hr><h2 id="5-Swagger-注解"><a href="#5-Swagger-注解" class="headerlink" title="5. Swagger 注解"></a>5. Swagger 注解</h2><h3 id="5-1-Api"><a href="#5-1-Api" class="headerlink" title="5.1 @Api"></a>5.1 @Api</h3><ul><li>作用：用来指定接口的描述文字</li><li>修饰范围：用在类上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><span class="hljs-meta">@Api(tags = &quot;用户服务相关接口描叙&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;....&#125;</code></pre><h3 id="5-2-ApiOperation"><a href="#5-2-ApiOperation" class="headerlink" title="5.2 @ApiOperation"></a>5.2 @ApiOperation</h3><ul><li>作用：用来对接口中具体方法做描叙</li><li>修饰范围：用在方法上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/findAll&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;查询所有用户接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来查询所有用户信息的接口&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>&#123;    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;查询所有数据成功&quot;</span>);    map.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-keyword">true</span>);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><h3 id="5-3-ApiImplicitParams"><a href="#5-3-ApiImplicitParams" class="headerlink" title="5.3 @ApiImplicitParams"></a>5.3 @ApiImplicitParams</h3><ul><li>作用：用来接口中参数进行说明</li><li>修饰范围：用在方法上</li></ul><h4 id="5-3-1-普通参数使用"><a href="#5-3-1-普通参数使用" class="headerlink" title="5.3.1 普通参数使用"></a>5.3.1 普通参数使用</h4><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;保存用户信息接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来保存用户信息的接口&quot;)</span><span class="hljs-meta">@ApiImplicitParams(&#123;</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户 id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;21&quot;),</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;白衣&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(String id, String name)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, id);    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0329.png" alt="image-20200907172500905"></p><h4 id="5-3-2-RestFul-风格使用"><a href="#5-3-2-RestFul-风格使用" class="headerlink" title="5.3.2 RestFul 风格使用"></a>5.3.2 RestFul 风格使用</h4><p>如果使用的是 RestFul 风格进行传参，必须再添加一个 <code>paramType=&quot;path&quot;</code></p><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save/&#123;id&#125;/&#123;name&#125;&quot;)</span><span class="hljs-meta">@ApiOperation(value = &quot;保存用户信息接口&quot;,</span><span class="hljs-meta">        notes = &quot;&lt;span style=&#x27;color:red;&#x27;&gt;描叙:&lt;/span&gt;&amp;nbsp;&amp;nbsp;用来保存用户信息的接口&quot;)</span><span class="hljs-meta">@ApiImplicitParams(&#123;</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户 id&quot;, dataType = &quot;String&quot;, defaultValue = &quot;21&quot;, paramType = &quot;path&quot;),</span><span class="hljs-meta">        @ApiImplicitParam(name = &quot;name&quot;, value = &quot;用户姓名&quot;, dataType = &quot;String&quot;, defaultValue = &quot;白衣&quot;, paramType = &quot;path&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id,<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name);    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, id);    map.put(<span class="hljs-string">&quot;name&quot;</span>, name);    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da032e.png" alt="image-20200907172950893"></p><h4 id="5-3-3-JSON-格式使用"><a href="#5-3-3-JSON-格式使用" class="headerlink" title="5.3.3 JSON 格式使用"></a>5.3.3 JSON 格式使用</h4><p>如果是 RequestBody 的方式，需要定义一个对象进行接收。</p><ol><li>定义一个 User 对象</li></ol><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><ol start="2"><li>编写 Controller</li></ol><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save2&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + user.getId());    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + user.getName());    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId());    map.put(<span class="hljs-string">&quot;name&quot;</span>, user.getName());    <span class="hljs-keyword">return</span> map;&#125;</code></pre><ol start="3"><li>重启项目，打开 UI 界面</li></ol><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0331.png" alt="image-20200907174402323"></p><p>测试：</p><p><img src="https://pic.downk.cc/item/5ff679b53ffa7d37b3da0335.png" alt="image-20200907174538702"></p><h3 id="5-4-ApiResponses"><a href="#5-4-ApiResponses" class="headerlink" title="5.4 @ApiResponses"></a>5.4 @ApiResponses</h3><ul><li>作用：用在请求的方法上，表示一组响应</li><li>修饰范围：用在方法上</li></ul><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;save2&quot;)</span><span class="hljs-meta">@ApiResponses(&#123;</span><span class="hljs-meta">        @ApiResponse(code = 404, message = &quot;请求路径不对&quot;),</span><span class="hljs-meta">        @ApiResponse(code = 400, message = &quot;程序不对&quot;)</span><span class="hljs-meta">&#125;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">save2</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> </span>&#123;    System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + user.getId());    System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + user.getName());    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId());    map.put(<span class="hljs-string">&quot;name&quot;</span>, user.getName());    <span class="hljs-keyword">return</span> map;&#125;</code></pre><p><img src="https://pic.downk.cc/item/5ff679bd3ffa7d37b3da0c05.png" alt="image-20200907175213481"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-Plus</title>
    <link href="/2021/01/07/Mybatis-plus/"/>
    <url>/2021/01/07/Mybatis-plus/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><h2 id="1-什么是Mybatis-Plus"><a href="#1-什么是Mybatis-Plus" class="headerlink" title="1.什么是Mybatis-Plus"></a>1.什么是Mybatis-Plus</h2><h3 id="1-1-什么是mybatis-plus"><a href="#1-1-什么是mybatis-plus" class="headerlink" title="1.1 什么是mybatis-plus"></a>1.1 什么是mybatis-plus</h3><p><code>官网:</code><a href="https://mybatis.plus/guide/">https://mybatis.plus/guide/</a></p><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54d6e.png" alt="image-20200509110144062"></p><h3 id="1-2-官方愿景"><a href="#1-2-官方愿景" class="headerlink" title="1.2 官方愿景"></a>1.2 官方愿景</h3><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54db2.png" alt="image-20200509110309834"></p><h3 id="1-3-特性"><a href="#1-3-特性" class="headerlink" title="1.3 特性"></a>1.3 特性</h3><ul><li><strong>无侵入</strong>：<code>只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</code></li><li><strong>损耗小</strong>：<code>启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</code></li><li><strong>强大的 CRUD 操作</strong>：<code>内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</code></li><li><strong>支持 Lambda 形式调用</strong>：<code>通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</code></li><li><strong>支持主键自动生成</strong>：<code>支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</code></li><li><strong>支持 ActiveRecord 模式</strong>：<code>支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</code></li><li><strong>支持自定义全局通用操作</strong>：<code>支持全局通用方法注入（ Write once, use anywhere ）</code></li><li><strong>内置代码生成器</strong>：<code>采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</code></li><li><strong>内置分页插件</strong>：<code>基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</code></li><li><strong>分页插件支持多种数据库</strong>：<code>支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</code></li><li><strong>内置性能分析插件</strong>：<code>可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</code></li><li><strong>内置全局拦截插件</strong>：<code>提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</code></li></ul><h3 id="1-4-支持数据库"><a href="#1-4-支持数据库" class="headerlink" title="1.4 支持数据库"></a>1.4 支持数据库</h3><ul><li>mysql 、 mariadb 、 oracle 、 db2 、 h2 、 hsql 、 sqlite 、 postgresql 、 sqlserver</li></ul><h3 id="1-5-框架结构"><a href="#1-5-框架结构" class="headerlink" title="1.5 框架结构"></a>1.5 框架结构</h3><p><img src="https://pic.downk.cc/item/5ff666273ffa7d37b3c54dc5.jpg" alt="img"></p><hr><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><h3 id="2-1-创建springboot项目"><a href="#2-1-创建springboot项目" class="headerlink" title="2.1 创建springboot项目"></a>2.1 创建springboot项目</h3><h4 id="1-并引入依赖"><a href="#1-并引入依赖" class="headerlink" title="1.并引入依赖"></a>1.并引入依赖</h4><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><ul><li><strong>注意</strong>:<code>不需要在引入mybatis的相关依赖,只引入这一个即可,当然数据库相关的驱动还的显式引入</code></li></ul><h4 id="2-在入口类加入注解"><a href="#2-在入口类加入注解" class="headerlink" title="2.在入口类加入注解"></a>2.在入口类加入注解</h4><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(MybatisApplication.class, args);    &#125;&#125;</code></pre><h4 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h4><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">logging.level.root</span>=<span class="hljs-string">info</span><span class="hljs-meta">logging.level.com.baizhi.dao</span>=<span class="hljs-string">debug</span></code></pre><h3 id="2-2-创建数据库以及表结构"><a href="#2-2-创建数据库以及表结构" class="headerlink" title="2.2 创建数据库以及表结构"></a>2.2 创建数据库以及表结构</h3><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`user`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,  <span class="hljs-string">`name`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`age`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`bir`</span> <span class="hljs-built_in">timestamp</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<span class="hljs-keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="hljs-number">1</span>;</code></pre><h3 id="2-3-开发实体类"><a href="#2-3-开发实体类" class="headerlink" title="2.3 开发实体类"></a>2.3 开发实体类</h3><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-comment">//lombok的注解用来生成get set 等相关方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> Date bir;&#125;</code></pre><h3 id="2-4-开发mapper通用实现"><a href="#2-4-开发mapper通用实现" class="headerlink" title="2.4 开发mapper通用实现"></a>2.4 开发mapper通用实现</h3><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper; <span class="hljs-comment">//提供了各种CRUD方法</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDAO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;  &#125;</code></pre><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> UserDAO userDAO;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;  List&lt;User&gt; users = userDAO.selectList(<span class="hljs-keyword">null</span>);  System.out.println(users);&#125;</code></pre><hr><h2 id="3-常用注解说明"><a href="#3-常用注解说明" class="headerlink" title="3.常用注解说明"></a>3.常用注解说明</h2><ul><li><strong>@TableName</strong>  </li><li><strong>@TableId</strong></li><li><strong>@TableField</strong></li></ul><h3 id="3-1-TableName注解"><a href="#3-1-TableName注解" class="headerlink" title="3.1 @TableName注解"></a>3.1 @TableName注解</h3><ul><li><strong>描述:</strong><code>用来将实体对象与数据库表名完成映射</code></li><li><strong>修饰范围:</strong> <code>用在类上</code></li><li><strong>常见属性:</strong><ul><li><strong>value:</strong>  <code>String类型,指定映射的表名</code></li><li><strong>resultMap:</strong><code> String类型,用来指定XML配置中resultMap的id值</code></li></ul></li></ul><h3 id="3-2-TableId注解"><a href="#3-2-TableId注解" class="headerlink" title="3.2 @TableId注解"></a>3.2 @TableId注解</h3><ul><li><p><strong>描述</strong>：<code>主键注解</code></p></li><li><p><strong>修饰范围:</strong><code>用在属性上</code></p></li><li><p><strong>常见属性:</strong></p><ul><li><strong>value:</strong> <code>String类型,指定实体类中与表中对应的主键列名</code></li><li><strong>type:</strong>  <code>枚举类型,指定主键生成类型</code></li></ul><p><img src="https://pic.downk.cc/item/5ff6662d3ffa7d37b3c553bd.png" alt="image-20200509140855571"></p></li></ul><h3 id="3-3-TableField"><a href="#3-3-TableField" class="headerlink" title="3.3 @TableField"></a>3.3 @TableField</h3><ul><li><strong>描述</strong>：<code>字段注解(非主键)</code></li><li><strong>修饰范围:</strong><code>用在属性上</code></li><li><strong>常用属性:</strong><ul><li><strong>value:</strong>    <code>String类型,用来指定对应的数据库表中的字段名</code></li><li><strong>el:</strong>    <code>String类型,映射为原生 #&#123; ... &#125; 逻辑,相当于写在 xml 里的 #&#123; ... &#125; 部分</code> 3.0不存在</li><li>exist    <code>boolean是否为数据库表字段 true代表是数据库字段,false代表不是</code></li></ul></li></ul><hr><h2 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4.常用方法"></a>4.常用方法</h2><h3 id="4-1-查询方法"><a href="#4-1-查询方法" class="headerlink" title="4.1 查询方法"></a>4.1 查询方法</h3><ul><li><p>查询所有</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  List&lt;User&gt; users = userDAO.selectList(<span class="hljs-keyword">null</span>);  users.forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li><li><p>查询一个</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindOne</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);&#125;</code></pre></li><li><p>条件查询</p><pre><code class="hljs java"><span class="hljs-comment">//条件查询</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFind</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  <span class="hljs-comment">//queryWrapper.eq(&quot;age&quot;,23);//设置等值查询</span>  <span class="hljs-comment">//queryWrapper.lt(&quot;age&quot;,23);//设置小于查询</span>  <span class="hljs-comment">//queryWrapper.ge(&quot;age&quot;,23);//小于等于查询 gt 大于  ge 大于等于</span>  List&lt;User&gt; users = userDAO.selectList(queryWrapper);  users.forEach(user-&gt; System.out.println(user));&#125;</code></pre></li><li><p>模糊查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  queryWrapper.likeRight(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小&quot;</span>);  List&lt;User&gt; users = userDAO.selectList(queryWrapper);  users.forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre><ul><li>like 相当于 %?%</li><li>likeLeft 相当于 %?</li><li>likeRight 相当于 ?%</li></ul></li></ul><h3 id="4-2-添加方法"><a href="#4-2-添加方法" class="headerlink" title="4.2 添加方法"></a>4.2 添加方法</h3><ul><li><p>​    添加方法</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;  User entity = <span class="hljs-keyword">new</span> User();  entity.setAge(<span class="hljs-number">23</span>).setName(<span class="hljs-string">&quot;小明明&quot;</span>).setBir(<span class="hljs-keyword">new</span> Date());  userDAO.insert(entity);&#125;</code></pre></li></ul><h3 id="4-3-修改方法"><a href="#4-3-修改方法" class="headerlink" title="4.3 修改方法"></a>4.3 修改方法</h3><ul><li><p>基于id修改</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateById</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  user.setAge(<span class="hljs-number">24</span>);  userDAO.updateById(user);&#125;</code></pre><p>基于条件修改</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;  User user = userDAO.selectById(<span class="hljs-string">&quot;1&quot;</span>);  user.setName(<span class="hljs-string">&quot;小陈陈&quot;</span>);  QueryWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  updateWrapper.eq(<span class="hljs-keyword">true</span>,<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>);  userDAO.update(user, updateWrapper);&#125;</code></pre></li></ul><h3 id="4-4-删除方法"><a href="#4-4-删除方法" class="headerlink" title="4.4 删除方法"></a>4.4 删除方法</h3><ul><li><p>基于id删除</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteById</span><span class="hljs-params">()</span></span>&#123;  userDAO.deleteById(<span class="hljs-string">&quot;3&quot;</span>);&#125;</code></pre></li><li><p>基于条件删除</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  wrapper.lambda().eq(<span class="hljs-keyword">true</span>,User::getAge,<span class="hljs-number">23</span>);  userDAO.delete(wrapper);&#125;</code></pre></li></ul><hr><h2 id="5-Mybatis-Plus分页查询"><a href="#5-Mybatis-Plus分页查询" class="headerlink" title="5.Mybatis-Plus分页查询"></a>5.Mybatis-Plus分页查询</h2><h3 id="0-预先配置"><a href="#0-预先配置" class="headerlink" title="0.预先配置"></a>0.预先配置</h3><ul><li><p><strong>注意:</strong><code>使用分页查询必须设置mybatis-plus提供的分页插件,才能实现分页效果</code></p><pre><code class="hljs java"><span class="hljs-meta">@EnableTransactionManagement</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@MapperScan(&quot;com.baizhi.dao&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;        PaginationInterceptor paginationInterceptor = <span class="hljs-keyword">new</span> PaginationInterceptor();        <span class="hljs-keyword">return</span> paginationInterceptor;    &#125;&#125;</code></pre><p><code>注意事项:目前分页查询仅仅支持单表查询,不能再表连接时使用分页插件</code></p></li></ul><h3 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1.分页查询"></a>1.分页查询</h3><ul><li><p>非条件分页查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  page = userDAO.selectPage(page, <span class="hljs-keyword">null</span>);  page.getRecords().forEach(user -&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li><li><p>带条件分页查询</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;  QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();  queryWrapper.eq(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">23</span>);  IPage&lt;User&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);  page = userDAO.selectPage(page, queryWrapper);  page.getRecords().forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));&#125;</code></pre></li></ul><hr><h2 id="6-Mybatis-Plus多数据源配置"><a href="#6-Mybatis-Plus多数据源配置" class="headerlink" title="6. Mybatis-Plus多数据源配置"></a>6. Mybatis-Plus多数据源配置</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>为了确保数据库产品的稳定性，很多数据库拥有双机热备功能。也就是，第一台数据库服务器，是对外提供增删改业务的生产服务器；第二台数据库服务器，主要进行读的操作。·</p><p><img src="https://pic.downk.cc/item/5ff6662d3ffa7d37b3c553c7.png" alt="image-20200510110005920"></p><h3 id="6-1-引入dynamic-datasource-spring-boot-starter"><a href="#6-1-引入dynamic-datasource-spring-boot-starter" class="headerlink" title="6.1 引入dynamic-datasource-spring-boot-starter"></a>6.1 引入dynamic-datasource-spring-boot-starter</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dynamic-datasource-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="6-2-配置数据源"><a href="#6-2-配置数据源" class="headerlink" title="6.2 配置数据源"></a>6.2 配置数据源</h3><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.primary</span>=<span class="hljs-string">master  #指定默认数据源</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.master.password</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus-1?characterEncoding=UTF-8</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.username</span>=<span class="hljs-string">root</span><span class="hljs-meta">spring.datasource.dynamic.datasource.slave_1.password</span>=<span class="hljs-string">root</span></code></pre><h3 id="6-3-创建多个数据库模拟不同mysql服务"><a href="#6-3-创建多个数据库模拟不同mysql服务" class="headerlink" title="6.3 创建多个数据库模拟不同mysql服务"></a>6.3 创建多个数据库模拟不同mysql服务</h3><h3 id="6-4-DS注解"><a href="#6-4-DS注解" class="headerlink" title="6.4 @DS注解"></a>6.4 @DS注解</h3><ul><li><strong>作用:</strong> <code>用来切换数据源的注解 </code></li><li><strong>修饰范围:</strong> <code>方法上和类上</code>，<strong>同时存在方法注解优先于类上注解</strong>。</li><li><strong>Value属性:</strong> <code>切换数据源名称</code></li></ul><h3 id="6-5-开发业务层"><a href="#6-5-开发业务层" class="headerlink" title="6.5 开发业务层"></a>6.5 开发业务层</h3><ul><li><p>业务接口</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span></span>&#123;    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span></span>;&#125;</code></pre></li></ul><ul><li><p>业务实现类</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-meta">@Transactional</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserDAO userDAO;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> userDAO.selectList(<span class="hljs-keyword">null</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(User user)</span> </span>&#123;        userDAO.insert(user);    &#125;&#125;</code></pre></li></ul><h3 id="6-6-测试结果"><a href="#6-6-测试结果" class="headerlink" title="6.6 测试结果"></a>6.6 测试结果</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baizhi;<span class="hljs-keyword">import</span> com.baizhi.entity.User;<span class="hljs-keyword">import</span> com.baizhi.service.UserService;<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@SpringBootTest</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestUserService</span> </span>&#123;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;        <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindAll</span><span class="hljs-params">()</span></span>&#123;        userService.findAll().forEach(user-&gt; System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user));    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span></span>&#123;        User user = <span class="hljs-keyword">new</span> User();        user.setName(<span class="hljs-string">&quot;aaa&quot;</span>).setAge(<span class="hljs-number">23</span>).setBir(<span class="hljs-keyword">new</span> Date());        userService.save(user);    &#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
